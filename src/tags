!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR	./sqlite3/sqlite3.c	/^#define ADDR(/;"	d	file:
AGGREGATE	./sqlite3/sqlite3.c	/^#define AGGREGATE(/;"	d	file:
ALWAYS	./sqlite3/sqlite3.c	/^# define ALWAYS(/;"	d	file:
ASSERT	./includes/IMG3_defines.h	/^#define ASSERT(/;"	d
ASSERT_RET	./includes/IMG3_defines.h	/^#define ASSERT_RET(/;"	d
AddClosingTag	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::AddClosingTag(char *buffer, uint32_t bufferLength)$/;"	f	class:IMG3_HtmlParser
AddFilter	./html/IMG3_HtmlParser.cpp	/^int32_t IMG3_HtmlParser::AddFilter(char *filter)$/;"	f	class:IMG3_HtmlParser
AddOpeningTag	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::AddOpeningTag(char *buffer, uint32_t bufferLength)$/;"	f	class:IMG3_HtmlParser
AdjustTree	./sqlite3/sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	./sqlite3/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	./sqlite3/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	./sqlite3/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	./sqlite3/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
AnalyzeFile	./compression/IMG3_ZipInterface.cpp	/^list<char *> * IMG3_ZipInterface::AnalyzeFile(const char *fileName)$/;"	f	class:IMG3_ZipInterface
AreFileApisANSI	./sqlite3/sqlite3.c	/^# define AreFileApisANSI(/;"	d	file:
ArraySize	./sqlite3/sqlite3.c	/^#define ArraySize(/;"	d	file:
AssignCells	./sqlite3/sqlite3.c	/^  #define AssignCells /;"	d	file:
AttachKey	./sqlite3/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	./sqlite3/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	./sqlite3/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	./sqlite3/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	./sqlite3/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	./sqlite3/sqlite3.c	/^  struct AuxData {$/;"	s	struct:VdbeFunc	file:
BITVEC_HASH	./sqlite3/sqlite3.c	/^#define BITVEC_HASH(/;"	d	file:
BITVEC_MXHASH	./sqlite3/sqlite3.c	/^#define BITVEC_MXHASH /;"	d	file:
BITVEC_NBIT	./sqlite3/sqlite3.c	/^#define BITVEC_NBIT /;"	d	file:
BITVEC_NELEM	./sqlite3/sqlite3.c	/^#define BITVEC_NELEM /;"	d	file:
BITVEC_NINT	./sqlite3/sqlite3.c	/^#define BITVEC_NINT /;"	d	file:
BITVEC_NPTR	./sqlite3/sqlite3.c	/^#define BITVEC_NPTR /;"	d	file:
BITVEC_SZ	./sqlite3/sqlite3.c	/^#define BITVEC_SZ /;"	d	file:
BITVEC_SZELEM	./sqlite3/sqlite3.c	/^#define BITVEC_SZELEM /;"	d	file:
BITVEC_TELEM	./sqlite3/sqlite3.c	/^#define BITVEC_TELEM /;"	d	file:
BITVEC_USIZE	./sqlite3/sqlite3.c	/^#define BITVEC_USIZE /;"	d	file:
BMS	./sqlite3/sqlite3.c	/^#define BMS /;"	d	file:
BTCURSOR_MAX_DEPTH	./sqlite3/sqlite3.c	/^#define BTCURSOR_MAX_DEPTH /;"	d	file:
BTREE_AUTOVACUUM_FULL	./sqlite3/sqlite3.c	/^#define BTREE_AUTOVACUUM_FULL /;"	d	file:
BTREE_AUTOVACUUM_INCR	./sqlite3/sqlite3.c	/^#define BTREE_AUTOVACUUM_INCR /;"	d	file:
BTREE_AUTOVACUUM_NONE	./sqlite3/sqlite3.c	/^#define BTREE_AUTOVACUUM_NONE /;"	d	file:
BTREE_BLOBKEY	./sqlite3/sqlite3.c	/^#define BTREE_BLOBKEY /;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	./sqlite3/sqlite3.c	/^#define BTREE_DEFAULT_CACHE_SIZE /;"	d	file:
BTREE_FILE_FORMAT	./sqlite3/sqlite3.c	/^#define BTREE_FILE_FORMAT /;"	d	file:
BTREE_FREE_PAGE_COUNT	./sqlite3/sqlite3.c	/^#define BTREE_FREE_PAGE_COUNT /;"	d	file:
BTREE_INCR_VACUUM	./sqlite3/sqlite3.c	/^#define BTREE_INCR_VACUUM /;"	d	file:
BTREE_INTKEY	./sqlite3/sqlite3.c	/^#define BTREE_INTKEY /;"	d	file:
BTREE_LARGEST_ROOT_PAGE	./sqlite3/sqlite3.c	/^#define BTREE_LARGEST_ROOT_PAGE /;"	d	file:
BTREE_MEMORY	./sqlite3/sqlite3.c	/^#define BTREE_MEMORY /;"	d	file:
BTREE_NO_READLOCK	./sqlite3/sqlite3.c	/^#define BTREE_NO_READLOCK /;"	d	file:
BTREE_OMIT_JOURNAL	./sqlite3/sqlite3.c	/^#define BTREE_OMIT_JOURNAL /;"	d	file:
BTREE_SCHEMA_VERSION	./sqlite3/sqlite3.c	/^#define BTREE_SCHEMA_VERSION /;"	d	file:
BTREE_SINGLE	./sqlite3/sqlite3.c	/^#define BTREE_SINGLE /;"	d	file:
BTREE_TEXT_ENCODING	./sqlite3/sqlite3.c	/^#define BTREE_TEXT_ENCODING /;"	d	file:
BTREE_UNORDERED	./sqlite3/sqlite3.c	/^#define BTREE_UNORDERED /;"	d	file:
BTREE_USER_VERSION	./sqlite3/sqlite3.c	/^#define BTREE_USER_VERSION /;"	d	file:
BYTESWAP32	./sqlite3/sqlite3.c	/^#define BYTESWAP32(/;"	d	file:
BenignMallocHooks	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	./sqlite3/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	./sqlite3/sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	./sqlite3/sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	./sqlite3/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Bool	./sqlite3/sqlite3.c	/^typedef unsigned char Bool;$/;"	t	file:
BtCursor	./sqlite3/sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	./sqlite3/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	./sqlite3/sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	./sqlite3/sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	./sqlite3/sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	./sqlite3/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	./sqlite3/sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	./sqlite3/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BtreeMutexArray	./sqlite3/sqlite3.c	/^struct BtreeMutexArray {$/;"	s	file:
BtreeMutexArray	./sqlite3/sqlite3.c	/^typedef struct BtreeMutexArray BtreeMutexArray;$/;"	t	typeref:struct:BtreeMutexArray	file:
BusyHandler	./sqlite3/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	./sqlite3/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	./sqlite3/sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	./sqlite3/sqlite3.c	/^#define CACHE_STALE /;"	d	file:
CC	./Makefile	/^CC 			= g++$/;"	m
CC	./compression/Makefile	/^CC 		= g++$/;"	m
CC	./html/Makefile	/^CC 		= g++$/;"	m
CC	./openssl/Makefile	/^CC 		= g++$/;"	m
CC	./sections/Makefile	/^CC = g++$/;"	m
CC	./sqlite3/Makefile	/^CC 		= gcc$/;"	m
CENTRAL_DIRECTORY_END_EXTRA	./compression/include/IMG3_ZipInterface.h	/^#define CENTRAL_DIRECTORY_END_EXTRA	/;"	d
CENTRAL_DIRECTORY_END_MARKER	./compression/include/IMG3_ZipInterface.h	/^#define CENTRAL_DIRECTORY_END_MARKER	/;"	d
CENTRAL_DIRECTORY_HEADER_EXTRA	./compression/include/IMG3_ZipInterface.h	/^#define CENTRAL_DIRECTORY_HEADER_EXTRA	/;"	d
CENTRAL_DIRECTORY_HEADER_MARKER	./compression/include/IMG3_ZipInterface.h	/^#define CENTRAL_DIRECTORY_HEADER_MARKER	/;"	d
CERT_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct CERT_Struct {$/;"	s
CERT_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) CERT_Struct;$/;"	t	typeref:struct:CERT_Struct
CFLAGS	./Makefile	/^CFLAGS	    = -g -Icompression\/include -Ihtml\/include -Iopenssl\/include -Isections\/include -Isqlite3\/include -Iincludes $/;"	m
CFLAGS	./compression/Makefile	/^CFLAGS 	= -g -Iinclude -I..\/includes$/;"	m
CFLAGS	./html/Makefile	/^CFLAGS 	= -g -Iinclude -I..\/includes$/;"	m
CFLAGS	./openssl/Makefile	/^CFLAGS 	= -g -Iinclude -I..\/includes$/;"	m
CFLAGS	./sections/Makefile	/^CFLAGS = -g -Iinclude -I..\/includes$/;"	m
CFLAGS	./sqlite3/Makefile	/^CFLAGS 	= -g -Iinclude -I..\/includes$/;"	m
CHECK_FOR_INTERRUPT	./sqlite3/sqlite3.c	/^#define CHECK_FOR_INTERRUPT /;"	d	file:
CHECK_PAGE	./sqlite3/sqlite3.c	/^#define CHECK_PAGE(/;"	d	file:
CHUNK	./compression/include/IMG3_ZipInterface.h	/^#define CHUNK /;"	d
CLEARBIT	./sqlite3/sqlite3.c	/^#define CLEARBIT(/;"	d	file:
CLOSING_TAG	./html/include/IMG3_HtmlTag.h	/^	CLOSING_TAG,$/;"	e	enum:TagType
CODEC1	./sqlite3/sqlite3.c	/^# define CODEC1(/;"	d	file:
CODEC2	./sqlite3/sqlite3.c	/^# define CODEC2(/;"	d	file:
COLNAME_COLUMN	./sqlite3/sqlite3.c	/^#define COLNAME_COLUMN /;"	d	file:
COLNAME_DATABASE	./sqlite3/sqlite3.c	/^#define COLNAME_DATABASE /;"	d	file:
COLNAME_DECLTYPE	./sqlite3/sqlite3.c	/^#define COLNAME_DECLTYPE /;"	d	file:
COLNAME_N	./sqlite3/sqlite3.c	/^#   define COLNAME_N /;"	d	file:
COLNAME_N	./sqlite3/sqlite3.c	/^# define COLNAME_N /;"	d	file:
COLNAME_NAME	./sqlite3/sqlite3.c	/^#define COLNAME_NAME /;"	d	file:
COLNAME_TABLE	./sqlite3/sqlite3.c	/^#define COLNAME_TABLE /;"	d	file:
COLUMN_MASK	./sqlite3/sqlite3.c	/^#define COLUMN_MASK(/;"	d	file:
COMPLETE_TAG	./html/include/IMG3_HtmlTag.h	/^	COMPLETE_TAG,$/;"	e	enum:TagType
CPP	./sqlite3/Makefile	/^CPP 	= g++$/;"	m
CTIMEOPT_VAL	./sqlite3/sqlite3.c	/^#define CTIMEOPT_VAL(/;"	d	file:
CTIMEOPT_VAL_	./sqlite3/sqlite3.c	/^#define CTIMEOPT_VAL_(/;"	d	file:
CTRL_FREE	./sqlite3/sqlite3.c	/^#define CTRL_FREE /;"	d	file:
CTRL_LOGSIZE	./sqlite3/sqlite3.c	/^#define CTRL_LOGSIZE /;"	d	file:
CURSOR_FAULT	./sqlite3/sqlite3.c	/^#define CURSOR_FAULT /;"	d	file:
CURSOR_INVALID	./sqlite3/sqlite3.c	/^#define CURSOR_INVALID /;"	d	file:
CURSOR_REQUIRESEEK	./sqlite3/sqlite3.c	/^#define CURSOR_REQUIRESEEK /;"	d	file:
CURSOR_VALID	./sqlite3/sqlite3.c	/^#define CURSOR_VALID /;"	d	file:
CellInfo	./sqlite3/sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	./sqlite3/sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	./sqlite3/sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	./sqlite3/sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	./sqlite3/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	./sqlite3/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	./sqlite3/sqlite3.c	/^struct Column {$/;"	s	file:
Column	./sqlite3/sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
CombineTags	./html/IMG3_HtmlParser.cpp	/^int32_t IMG3_HtmlParser::CombineTags()$/;"	f	class:IMG3_HtmlParser
Compress	./compression/IMG3_LzssInterface.cpp	/^uint8_t * IMG3_LzssInterface::Compress(uint8_t *dst, uint32_t dstlen, uint8_t *src, uint32_t srclen)$/;"	f	class:IMG3_LzssInterface
ConnectToDatabase	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::ConnectToDatabase(void)$/;"	f	class:IMG3_Sqlite3
CountCtx	./sqlite3/sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	./sqlite3/sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
D	./sqlite3/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DATABASE_FILE	./sqlite3/include/IMG3_Sqlite3.h	/^#define DATABASE_FILE /;"	d
DATA_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct DATA_Struct {$/;"	s
DATA_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) DATA_Struct;$/;"	t	typeref:struct:DATA_Struct
DB_Empty	./sqlite3/sqlite3.c	/^#define DB_Empty /;"	d	file:
DB_SchemaLoaded	./sqlite3/sqlite3.c	/^#define DB_SchemaLoaded /;"	d	file:
DB_UnresetViews	./sqlite3/sqlite3.c	/^#define DB_UnresetViews /;"	d	file:
DCOORD	./sqlite3/sqlite3.c	/^#define DCOORD(/;"	d	file:
DECRYPT_IMG3_FILE	./includes/IMG3_typedefs.h	/^	DECRYPT_IMG3_FILE, UPDATE_IMG3_DATABASE, LIST_ARCHIVE_FILES, EXTRACT_FILE, PATCH_KERNEL$/;"	e	enum:ParserOperation
DIRECT_MODE	./sqlite3/sqlite3.c	/^# define DIRECT_MODE /;"	d	file:
DIRS	./Makefile	/^DIRS		= compression html openssl sections sqlite3$/;"	m
DOTLOCK_SUFFIX	./sqlite3/sqlite3.c	/^#define DOTLOCK_SUFFIX /;"	d	file:
DO_OS_MALLOC_TEST	./sqlite3/sqlite3.c	/^  #define DO_OS_MALLOC_TEST(/;"	d	file:
DateTime	./sqlite3/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	./sqlite3/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	./sqlite3/sqlite3.c	/^struct Db {$/;"	s	file:
Db	./sqlite3/sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	./sqlite3/sqlite3.c	/^#define DbClearProperty(/;"	d	file:
DbFixer	./sqlite3/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	./sqlite3/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	./sqlite3/sqlite3.c	/^#define DbHasAnyProperty(/;"	d	file:
DbHasProperty	./sqlite3/sqlite3.c	/^#define DbHasProperty(/;"	d	file:
DbPage	./sqlite3/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	./sqlite3/sqlite3.c	/^#define DbSetProperty(/;"	d	file:
Decompress	./compression/IMG3_LzssInterface.cpp	/^int IMG3_LzssInterface::Decompress(uint8_t *dst, uint8_t *src, uint32_t srclen)$/;"	f	class:IMG3_LzssInterface
DecryptData	./openssl/IMG3_OpensslInterface.cpp	/^int32_t	IMG3_OpensslInterface::DecryptData(uint8_t *input, uint32_t length, uint8_t **output)$/;"	f	class:IMG3_OpensslInterface
DecryptIMG3Data	./IMG3_Functions.cpp	/^DecryptIMG3Data( uint8_t *data, uint32_t length, char *deviceName, char *deviceVersion, char *section, uint8_t **decryptedData, uint32_t *decryptedLength ) $/;"	f	file:
DecryptIMG3File	./IMG3_Functions.cpp	/^int32_t DecryptIMG3File( char *archiveFileName, char *outputFileName, char *deviceName, char *deviceVersion, char *section )$/;"	f
DecryptionInfo	./includes/IMG3_typedefs.h	/^typedef struct DecryptionInfo {$/;"	s
DecryptionInfo	./includes/IMG3_typedefs.h	/^} DecryptionInfo;$/;"	t	typeref:struct:DecryptionInfo
Deephemeralize	./sqlite3/sqlite3.c	/^#define Deephemeralize(/;"	d	file:
DeleteNode	./compression/IMG3_LzssInterface.cpp	/^void IMG3_LzssInterface::DeleteNode(struct encode_state *sp, int p)$/;"	f	class:IMG3_LzssInterface
DisconnectFromDatabase	./sqlite3/IMG3_Sqlite3.cpp	/^void IMG3_Sqlite3::DisconnectFromDatabase(void)$/;"	f	class:IMG3_Sqlite3
DoesDeviceExist	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::DoesDeviceExist(char *device)$/;"	f	class:IMG3_Sqlite3
DoesSectionExist	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::DoesSectionExist(char *device, char *version, char *section)$/;"	f	class:IMG3_Sqlite3
DoesTagContainAttribute	./html/IMG3_HtmlTag.cpp	/^char * IMG3_HtmlTag::DoesTagContainAttribute(char *attr)$/;"	f	class:IMG3_HtmlTag
EIGHT_BYTE_ALIGNMENT	./sqlite3/sqlite3.c	/^# define EIGHT_BYTE_ALIGNMENT(/;"	d	file:
ENC	./sqlite3/sqlite3.c	/^#define ENC(/;"	d	file:
EP2_Irreducible	./sqlite3/sqlite3.c	/^#define EP2_Irreducible /;"	d	file:
EP2_MallocedToken	./sqlite3/sqlite3.c	/^#define EP2_MallocedToken /;"	d	file:
EP_Agg	./sqlite3/sqlite3.c	/^#define EP_Agg /;"	d	file:
EP_DblQuoted	./sqlite3/sqlite3.c	/^#define EP_DblQuoted /;"	d	file:
EP_Distinct	./sqlite3/sqlite3.c	/^#define EP_Distinct /;"	d	file:
EP_Error	./sqlite3/sqlite3.c	/^#define EP_Error /;"	d	file:
EP_ExpCollate	./sqlite3/sqlite3.c	/^#define EP_ExpCollate /;"	d	file:
EP_FixedDest	./sqlite3/sqlite3.c	/^#define EP_FixedDest /;"	d	file:
EP_FromJoin	./sqlite3/sqlite3.c	/^#define EP_FromJoin /;"	d	file:
EP_InfixFunc	./sqlite3/sqlite3.c	/^#define EP_InfixFunc /;"	d	file:
EP_IntValue	./sqlite3/sqlite3.c	/^#define EP_IntValue /;"	d	file:
EP_Reduced	./sqlite3/sqlite3.c	/^#define EP_Reduced /;"	d	file:
EP_Resolved	./sqlite3/sqlite3.c	/^#define EP_Resolved /;"	d	file:
EP_Static	./sqlite3/sqlite3.c	/^#define EP_Static /;"	d	file:
EP_TokenOnly	./sqlite3/sqlite3.c	/^#define EP_TokenOnly /;"	d	file:
EP_VarSelect	./sqlite3/sqlite3.c	/^#define EP_VarSelect /;"	d	file:
EP_xIsSelect	./sqlite3/sqlite3.c	/^#define EP_xIsSelect /;"	d	file:
EXCLUSIVE_LOCK	./sqlite3/sqlite3.c	/^#define EXCLUSIVE_LOCK /;"	d	file:
EXE	./Makefile	/^EXE			= img3_parser$/;"	m
EXPRDUP_REDUCE	./sqlite3/sqlite3.c	/^#define EXPRDUP_REDUCE /;"	d	file:
EXPR_FULLSIZE	./sqlite3/sqlite3.c	/^#define EXPR_FULLSIZE /;"	d	file:
EXPR_REDUCEDSIZE	./sqlite3/sqlite3.c	/^#define EXPR_REDUCEDSIZE /;"	d	file:
EXPR_TOKENONLYSIZE	./sqlite3/sqlite3.c	/^#define EXPR_TOKENONLYSIZE /;"	d	file:
EXTRACT_FILE	./includes/IMG3_typedefs.h	/^	DECRYPT_IMG3_FILE, UPDATE_IMG3_DATABASE, LIST_ARCHIVE_FILES, EXTRACT_FILE, PATCH_KERNEL$/;"	e	enum:ParserOperation
EXTRA_SIZE	./sqlite3/sqlite3.c	/^#define EXTRA_SIZE /;"	d	file:
EncryptData	./openssl/IMG3_OpensslInterface.cpp	/^int32_t IMG3_OpensslInterface::EncryptData(uint8_t *input, uint32_t length, uint8_t **output)$/;"	f	class:IMG3_OpensslInterface
EncryptIMG3Data	./IMG3_Functions.cpp	/^EncryptIMG3Data( uint8_t *data, uint32_t length, char *deviceName, char *deviceVersion, char *section, uint8_t compress, uint8_t **encryptedData, uint32_t *encryptedLength ) $/;"	f	file:
ExpandBlob	./sqlite3/sqlite3.c	/^#define ExpandBlob(/;"	d	file:
Expr	./sqlite3/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	./sqlite3/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprAndCost	./sqlite3/sqlite3.c	/^struct ExprAndCost {$/;"	s	file:
ExprAndCost	./sqlite3/sqlite3.c	/^typedef struct ExprAndCost ExprAndCost;$/;"	t	typeref:struct:ExprAndCost	file:
ExprClearProperty	./sqlite3/sqlite3.c	/^#define ExprClearProperty(/;"	d	file:
ExprHasAnyProperty	./sqlite3/sqlite3.c	/^#define ExprHasAnyProperty(/;"	d	file:
ExprHasProperty	./sqlite3/sqlite3.c	/^#define ExprHasProperty(/;"	d	file:
ExprList	./sqlite3/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	./sqlite3/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	./sqlite3/sqlite3.c	/^  struct ExprList_item {$/;"	s	struct:ExprList	file:
ExprSetIrreducible	./sqlite3/sqlite3.c	/^# define ExprSetIrreducible(/;"	d	file:
ExprSetProperty	./sqlite3/sqlite3.c	/^#define ExprSetProperty(/;"	d	file:
ExprSpan	./sqlite3/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	./sqlite3/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
ExtractAllFiles	./compression/IMG3_ZipInterface.cpp	/^int32_t IMG3_ZipInterface::ExtractAllFiles(const char *archiveName)$/;"	f	class:IMG3_ZipInterface
ExtractCentralDirectoryListings	./compression/IMG3_ZipInterface.cpp	/^int32_t IMG3_ZipInterface::ExtractCentralDirectoryListings(FILE *fd, ZIP_CentralDirectoryEnd *end)$/;"	f	class:IMG3_ZipInterface
ExtractDecryptionInfo	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::ExtractDecryptionInfo()$/;"	f	class:IMG3_HtmlParser
ExtractFileFromArchive	./IMG3_Functions.cpp	/^int32_t ExtractFileFromArchive( char *archiveFileName, char *section )$/;"	f
ExtractFiles	./compression/IMG3_ZipInterface.cpp	/^list<char *> * IMG3_ZipInterface::ExtractFiles(const char *archiveName, char *section)$/;"	f	class:IMG3_ZipInterface
FABS	./sqlite3/sqlite3.c	/^  #define FABS(/;"	d	file:
FILEHANDLEID	./sqlite3/sqlite3.c	/^#define FILEHANDLEID(/;"	d	file:
FKey	./sqlite3/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	./sqlite3/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	./sqlite3/sqlite3.c	/^#define FLAG_INTERN /;"	d	file:
FLAG_SIGNED	./sqlite3/sqlite3.c	/^#define FLAG_SIGNED /;"	d	file:
FLAG_STRING	./sqlite3/sqlite3.c	/^#define FLAG_STRING /;"	d	file:
FOREGUARD	./sqlite3/sqlite3.c	/^#define FOREGUARD /;"	d	file:
FTS3_DOCID_SEARCH	./sqlite3/sqlite3.c	/^#define FTS3_DOCID_SEARCH /;"	d	file:
FTS3_EVAL_FILTER	./sqlite3/sqlite3.c	/^#define FTS3_EVAL_FILTER /;"	d	file:
FTS3_EVAL_MATCHINFO	./sqlite3/sqlite3.c	/^#define FTS3_EVAL_MATCHINFO /;"	d	file:
FTS3_EVAL_NEXT	./sqlite3/sqlite3.c	/^#define FTS3_EVAL_NEXT /;"	d	file:
FTS3_FULLSCAN_SEARCH	./sqlite3/sqlite3.c	/^#define FTS3_FULLSCAN_SEARCH /;"	d	file:
FTS3_FULLTEXT_SEARCH	./sqlite3/sqlite3.c	/^#define FTS3_FULLTEXT_SEARCH /;"	d	file:
FTS3_HASH_BINARY	./sqlite3/sqlite3.c	/^#define FTS3_HASH_BINARY /;"	d	file:
FTS3_HASH_STRING	./sqlite3/sqlite3.c	/^#define FTS3_HASH_STRING /;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_AVGLENGTH /;"	d	file:
FTS3_MATCHINFO_DEFAULT	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_DEFAULT /;"	d	file:
FTS3_MATCHINFO_HITS	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_HITS /;"	d	file:
FTS3_MATCHINFO_LCS	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_LCS /;"	d	file:
FTS3_MATCHINFO_LENGTH	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_LENGTH /;"	d	file:
FTS3_MATCHINFO_NCOL	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_NCOL /;"	d	file:
FTS3_MATCHINFO_NDOC	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_NDOC /;"	d	file:
FTS3_MATCHINFO_NPHRASE	./sqlite3/sqlite3.c	/^#define FTS3_MATCHINFO_NPHRASE /;"	d	file:
FTS3_MAX_PENDING_DATA	./sqlite3/sqlite3.c	/^#define FTS3_MAX_PENDING_DATA /;"	d	file:
FTS3_MERGE_COUNT	./sqlite3/sqlite3.c	/^#define FTS3_MERGE_COUNT /;"	d	file:
FTS3_NODE_PADDING	./sqlite3/sqlite3.c	/^#define FTS3_NODE_PADDING /;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	./sqlite3/sqlite3.c	/^#define FTS3_SEGMENT_COLUMN_FILTER /;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	./sqlite3/sqlite3.c	/^#define FTS3_SEGMENT_IGNORE_EMPTY /;"	d	file:
FTS3_SEGMENT_PREFIX	./sqlite3/sqlite3.c	/^#define FTS3_SEGMENT_PREFIX /;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	./sqlite3/sqlite3.c	/^#define FTS3_SEGMENT_REQUIRE_POS /;"	d	file:
FTS3_VARINT_MAX	./sqlite3/sqlite3.c	/^#define FTS3_VARINT_MAX /;"	d	file:
FTSQUERY_AND	./sqlite3/sqlite3.c	/^#define FTSQUERY_AND /;"	d	file:
FTSQUERY_NEAR	./sqlite3/sqlite3.c	/^#define FTSQUERY_NEAR /;"	d	file:
FTSQUERY_NOT	./sqlite3/sqlite3.c	/^#define FTSQUERY_NOT /;"	d	file:
FTSQUERY_OR	./sqlite3/sqlite3.c	/^#define FTSQUERY_OR /;"	d	file:
FTSQUERY_PHRASE	./sqlite3/sqlite3.c	/^#define FTSQUERY_PHRASE /;"	d	file:
FUNCTION	./sqlite3/sqlite3.c	/^#define FUNCTION(/;"	d	file:
FileChunk	./sqlite3/sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	./sqlite3/sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	./sqlite3/sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	./sqlite3/sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
FindCentralDirectoryEnd	./compression/IMG3_ZipInterface.cpp	/^char * IMG3_ZipInterface::FindCentralDirectoryEnd(FILE *fd, long fileSize)$/;"	f	class:IMG3_ZipInterface
FormatMessageW	./sqlite3/sqlite3.c	/^# define FormatMessageW(/;"	d	file:
Fts3Cursor	./sqlite3/sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	./sqlite3/sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	./sqlite3/sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	./sqlite3/sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Expr	./sqlite3/sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	./sqlite3/sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	./sqlite3/sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	./sqlite3/sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	./sqlite3/sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	./sqlite3/sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Phrase	./sqlite3/sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	./sqlite3/sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	./sqlite3/sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	./sqlite3/sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	./sqlite3/sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	./sqlite3/sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	./sqlite3/sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	./sqlite3/sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3SegReaderArray	./sqlite3/sqlite3.c	/^struct Fts3SegReaderArray {$/;"	s	file:
Fts3SegReaderArray	./sqlite3/sqlite3.c	/^typedef struct Fts3SegReaderArray Fts3SegReaderArray;$/;"	t	typeref:struct:Fts3SegReaderArray	file:
Fts3Table	./sqlite3/sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	./sqlite3/sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
FuncDef	./sqlite3/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	./sqlite3/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	./sqlite3/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	./sqlite3/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	./sqlite3/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	./sqlite3/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GLOBAL	./sqlite3/sqlite3.c	/^  #define GLOBAL(/;"	d	file:
GetAllClosingTagsByName	./html/IMG3_HtmlParser.cpp	/^list<HtmlTagNode *> * IMG3_HtmlParser::GetAllClosingTagsByName(char *tagName)$/;"	f	class:IMG3_HtmlParser
GetAllOpeningTagsByName	./html/IMG3_HtmlParser.cpp	/^list<HtmlTagNode *> * IMG3_HtmlParser::GetAllOpeningTagsByName(char *tagName)$/;"	f	class:IMG3_HtmlParser
GetAllSortedTagsByName	./html/IMG3_HtmlParser.cpp	/^list<pair<HtmlTagNode *, HtmlTagNode *> > * IMG3_HtmlParser::GetAllSortedTagsByName(char *tagName)$/;"	f	class:IMG3_HtmlParser
GetAllTagsByName	./html/IMG3_HtmlParser.cpp	/^list<HtmlTagNode *> * IMG3_HtmlParser::GetAllTagsByName(char *tagName)$/;"	f	class:IMG3_HtmlParser
GetAttributes	./html/include/IMG3_HtmlTag.h	/^	list<pair<char*,char*> > * GetAttributes() { return &attrs; }$/;"	f	class:IMG3_HtmlTag
GetDecryptionInfo	./html/include/IMG3_HtmlParser.h	/^	list<DecryptionInfo *> *GetDecryptionInfo() { return &decryptionList; }$/;"	f	class:IMG3_HtmlParser
GetError	./compression/include/IMG3_ZipInterface.h	/^	int32_t GetError( void ) { return errorCode; }$/;"	f	class:IMG3_ZipInterface
GetNextTag	./html/IMG3_HtmlParser.cpp	/^HtmlTagNode * IMG3_HtmlParser::GetNextTag(uint32_t currentTagId)$/;"	f	class:IMG3_HtmlParser
GetSectionData	./sections/IMG3_FileInterface.cpp	/^uint8_t * IMG3_FileInterface::GetSectionData(IMG3_SectionType section)$/;"	f	class:IMG3_FileInterface
GetSectionData	./sections/include/IMG3_FileSection.h	/^	uint8_t * GetSectionData() { return data; }$/;"	f	class:IMG3_FileSection
GetSectionLength	./sections/IMG3_FileInterface.cpp	/^uint32_t IMG3_FileInterface::GetSectionLength(IMG3_SectionType section)$/;"	f	class:IMG3_FileInterface
GetSectionLength	./sections/include/IMG3_FileSection.h	/^	uint32_t GetSectionLength() { return dataLength; }$/;"	f	class:IMG3_FileSection
GetSectionType	./sections/include/IMG3_FileSection.h	/^	IMG3_SectionType GetSectionType() { return type; }$/;"	f	class:IMG3_FileSection
GetTagAddress	./html/include/IMG3_HtmlTag.h	/^	char * GetTagAddress() { return tagAddress; }$/;"	f	class:IMG3_HtmlTag
GetTagData	./html/include/IMG3_HtmlTag.h	/^	char *GetTagData() { return data; }$/;"	f	class:IMG3_HtmlTag
GetTagType	./html/include/IMG3_HtmlTag.h	/^	TagType GetTagType() { return type; }$/;"	f	class:IMG3_HtmlTag
GetTagValue	./html/include/IMG3_HtmlTag.h	/^	char *GetTagValue() { return tag; }$/;"	f	class:IMG3_HtmlTag
GetTempPathA	./sqlite3/sqlite3.c	/^#define GetTempPathA(/;"	d	file:
GlogUpperToLower	./sqlite3/sqlite3.c	/^# define GlogUpperToLower(/;"	d	file:
HANDLE_TO_WINFILE	./sqlite3/sqlite3.c	/^#define HANDLE_TO_WINFILE(/;"	d	file:
HASHSIZE	./sqlite3/sqlite3.c	/^#define HASHSIZE /;"	d	file:
HASHTABLE_HASH_1	./sqlite3/sqlite3.c	/^#define HASHTABLE_HASH_1 /;"	d	file:
HASHTABLE_NPAGE	./sqlite3/sqlite3.c	/^#define HASHTABLE_NPAGE /;"	d	file:
HASHTABLE_NPAGE_ONE	./sqlite3/sqlite3.c	/^#define HASHTABLE_NPAGE_ONE /;"	d	file:
HASHTABLE_NSLOT	./sqlite3/sqlite3.c	/^#define HASHTABLE_NSLOT /;"	d	file:
HAVE_FULLFSYNC	./sqlite3/sqlite3.c	/^# define HAVE_FULLFSYNC /;"	d	file:
HAVE_LOCALTIME_S	./sqlite3/sqlite3.c	/^#define HAVE_LOCALTIME_S /;"	d	file:
HTMLPARSER_H_	./html/include/IMG3_HtmlParser.h	/^#define HTMLPARSER_H_$/;"	d
HTMLTAG_H_	./html/include/IMG3_HtmlTag.h	/^#define HTMLTAG_H_$/;"	d
Hash	./sqlite3/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	./sqlite3/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	./sqlite3/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	./sqlite3/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HexToBytes	./openssl/IMG3_OpensslInterface.cpp	/^void IMG3_OpensslInterface::HexToBytes(const char* hex, unsigned char* buffer, uint32_t bytes)$/;"	f	class:IMG3_OpensslInterface
HtmlTagNode	./html/include/IMG3_HtmlParser.h	/^typedef struct HtmlTagNode {$/;"	s
HtmlTagNode	./html/include/IMG3_HtmlParser.h	/^} HtmlTagNode;$/;"	t	typeref:struct:HtmlTagNode
IMG3_BASE	./sections/include/IMG3_FileSection.h	/^	IMG3_BASE = 0,$/;"	e	enum:IMG3_SectionType
IMG3_BDID	./sections/include/IMG3_FileSection.h	/^	IMG3_BDID,$/;"	e	enum:IMG3_SectionType
IMG3_BDID_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_BDID_MAGIC /;"	d
IMG3_BORD	./sections/include/IMG3_FileSection.h	/^	IMG3_BORD,$/;"	e	enum:IMG3_SectionType
IMG3_BORD_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_BORD_MAGIC /;"	d
IMG3_CERT	./sections/include/IMG3_FileSection.h	/^	IMG3_CERT,$/;"	e	enum:IMG3_SectionType
IMG3_CERT_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_CERT_HEADER_LENGTH /;"	d
IMG3_CERT_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_CERT_MAGIC /;"	d
IMG3_CHIP	./sections/include/IMG3_FileSection.h	/^	IMG3_CHIP,$/;"	e	enum:IMG3_SectionType
IMG3_CHIP_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_CHIP_MAGIC /;"	d
IMG3_DATA	./sections/include/IMG3_FileSection.h	/^	IMG3_DATA,$/;"	e	enum:IMG3_SectionType
IMG3_DATA_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_DATA_HEADER_LENGTH /;"	d
IMG3_DATA_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_DATA_MAGIC /;"	d
IMG3_ECID	./sections/include/IMG3_FileSection.h	/^	IMG3_ECID,$/;"	e	enum:IMG3_SectionType
IMG3_ECID_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_ECID_MAGIC /;"	d
IMG3_FILEINTERFACE_H_	./sections/include/IMG3_FileInterface.h	/^#define IMG3_FILEINTERFACE_H_$/;"	d
IMG3_FILE_SECTION_H_	./sections/include/IMG3_FileSection.h	/^#define IMG3_FILE_SECTION_H_$/;"	d
IMG3_FileInterface	./sections/IMG3_FileInterface.cpp	/^IMG3_FileInterface::IMG3_FileInterface() {$/;"	f	class:IMG3_FileInterface
IMG3_FileInterface	./sections/include/IMG3_FileInterface.h	/^class IMG3_FileInterface {$/;"	c
IMG3_FileSection	./sections/IMG3_FileSection.cpp	/^IMG3_FileSection::IMG3_FileSection() {$/;"	f	class:IMG3_FileSection
IMG3_FileSection	./sections/include/IMG3_FileSection.h	/^class IMG3_FileSection {$/;"	c
IMG3_Generic_Header	./sections/include/IMG3_FileSection.h	/^typedef struct IMG3_Generic_Header {$/;"	s
IMG3_Generic_Header	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) IMG3_Generic_Header;$/;"	t	typeref:struct:IMG3_Generic_Header
IMG3_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_HEADER_LENGTH /;"	d
IMG3_HtmlParser	./html/IMG3_HtmlParser.cpp	/^IMG3_HtmlParser::IMG3_HtmlParser()$/;"	f	class:IMG3_HtmlParser
IMG3_HtmlParser	./html/include/IMG3_HtmlParser.h	/^class IMG3_HtmlParser {$/;"	c
IMG3_HtmlTag	./html/IMG3_HtmlTag.cpp	/^IMG3_HtmlTag::IMG3_HtmlTag() {$/;"	f	class:IMG3_HtmlTag
IMG3_HtmlTag	./html/IMG3_HtmlTag.cpp	/^IMG3_HtmlTag::IMG3_HtmlTag(char *newTag, uint32_t length, TagType tagType)$/;"	f	class:IMG3_HtmlTag
IMG3_HtmlTag	./html/include/IMG3_HtmlTag.h	/^class IMG3_HtmlTag {$/;"	c
IMG3_KBAG	./sections/include/IMG3_FileSection.h	/^	IMG3_KBAG,$/;"	e	enum:IMG3_SectionType
IMG3_KBAG_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_KBAG_HEADER_LENGTH /;"	d
IMG3_KBAG_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_KBAG_MAGIC /;"	d
IMG3_LZSSINTERFACE_BASE	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_BASE /;"	d
IMG3_LZSSINTERFACE_COMP_SIGNATURE	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_COMP_SIGNATURE /;"	d
IMG3_LZSSINTERFACE_DO1	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_DO1(/;"	d
IMG3_LZSSINTERFACE_DO16	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_DO16(/;"	d
IMG3_LZSSINTERFACE_DO2	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_DO2(/;"	d
IMG3_LZSSINTERFACE_DO4	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_DO4(/;"	d
IMG3_LZSSINTERFACE_DO8	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_DO8(/;"	d
IMG3_LZSSINTERFACE_F	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_F /;"	d
IMG3_LZSSINTERFACE_H_	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_H_$/;"	d
IMG3_LZSSINTERFACE_LZSS_SIGNATURE	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_LZSS_SIGNATURE /;"	d
IMG3_LZSSINTERFACE_N	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_N /;"	d
IMG3_LZSSINTERFACE_NIL	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_NIL /;"	d
IMG3_LZSSINTERFACE_NMAX	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_NMAX /;"	d
IMG3_LZSSINTERFACE_THRESHOLD	./compression/include/IMG3_LzssInterface.h	/^#define IMG3_LZSSINTERFACE_THRESHOLD /;"	d
IMG3_LzssInterface	./compression/IMG3_LzssInterface.cpp	/^IMG3_LzssInterface::IMG3_LzssInterface() {$/;"	f	class:IMG3_LzssInterface
IMG3_LzssInterface	./compression/include/IMG3_LzssInterface.h	/^class IMG3_LzssInterface {$/;"	c
IMG3_LzssInterface_CompressionHeader	./compression/include/IMG3_LzssInterface.h	/^typedef struct IMG3_LzssInterface_CompressionHeader {$/;"	s
IMG3_LzssInterface_CompressionHeader	./compression/include/IMG3_LzssInterface.h	/^} __attribute__((__packed__)) IMG3_LzssInterface_CompressionHeader;$/;"	t	typeref:struct:IMG3_LzssInterface_CompressionHeader
IMG3_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_MAGIC /;"	d
IMG3_OPENSSLINTERFACE_H_	./openssl/include/IMG3_OpensslInterface.h	/^#define IMG3_OPENSSLINTERFACE_H_$/;"	d
IMG3_OpensslInterface	./openssl/IMG3_OpensslInterface.cpp	/^IMG3_OpensslInterface::IMG3_OpensslInterface()$/;"	f	class:IMG3_OpensslInterface
IMG3_OpensslInterface	./openssl/IMG3_OpensslInterface.cpp	/^IMG3_OpensslInterface::IMG3_OpensslInterface(char *newKey, char *newIV)$/;"	f	class:IMG3_OpensslInterface
IMG3_OpensslInterface	./openssl/include/IMG3_OpensslInterface.h	/^class IMG3_OpensslInterface {$/;"	c
IMG3_PROD	./sections/include/IMG3_FileSection.h	/^	IMG3_PROD,$/;"	e	enum:IMG3_SectionType
IMG3_PROD_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_PROD_MAGIC /;"	d
IMG3_SCEP	./sections/include/IMG3_FileSection.h	/^	IMG3_SCEP,$/;"	e	enum:IMG3_SectionType
IMG3_SCEP_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_SCEP_MAGIC /;"	d
IMG3_SDOM	./sections/include/IMG3_FileSection.h	/^	IMG3_SDOM,$/;"	e	enum:IMG3_SectionType
IMG3_SDOM_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_SDOM_MAGIC /;"	d
IMG3_SEPO	./sections/include/IMG3_FileSection.h	/^	IMG3_SEPO,$/;"	e	enum:IMG3_SectionType
IMG3_SEPO_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_SEPO_HEADER_LENGTH /;"	d
IMG3_SEPO_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_SEPO_MAGIC /;"	d
IMG3_SHSH	./sections/include/IMG3_FileSection.h	/^	IMG3_SHSH,$/;"	e	enum:IMG3_SectionType
IMG3_SHSH_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_SHSH_HEADER_LENGTH /;"	d
IMG3_SHSH_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_SHSH_MAGIC /;"	d
IMG3_SectionType	./sections/include/IMG3_FileSection.h	/^typedef enum IMG3_SectionType {$/;"	g
IMG3_SectionType	./sections/include/IMG3_FileSection.h	/^}IMG3_SectionType;$/;"	t	typeref:enum:IMG3_SectionType
IMG3_Sqlite3	./sqlite3/IMG3_Sqlite3.cpp	/^IMG3_Sqlite3::IMG3_Sqlite3()$/;"	f	class:IMG3_Sqlite3
IMG3_Sqlite3	./sqlite3/include/IMG3_Sqlite3.h	/^class IMG3_Sqlite3 {$/;"	c
IMG3_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct IMG3_Struct {$/;"	s
IMG3_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) IMG3_Struct;$/;"	t	typeref:struct:IMG3_Struct
IMG3_TYPE	./sections/include/IMG3_FileSection.h	/^	IMG3_TYPE,$/;"	e	enum:IMG3_SectionType
IMG3_TYPE_HEADER_LENGTH	./sections/include/IMG3_FileSection.h	/^#define IMG3_TYPE_HEADER_LENGTH /;"	d
IMG3_TYPE_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_TYPE_MAGIC /;"	d
IMG3_UNKNOWN	./sections/include/IMG3_FileSection.h	/^	IMG3_UNKNOWN$/;"	e	enum:IMG3_SectionType
IMG3_VERS	./sections/include/IMG3_FileSection.h	/^	IMG3_VERS,$/;"	e	enum:IMG3_SectionType
IMG3_VERS_MAGIC	./sections/include/IMG3_FileSection.h	/^#define IMG3_VERS_MAGIC /;"	d
IMG3_ZIPINTERFACE_H_	./compression/include/IMG3_ZipInterface.h	/^#define IMG3_ZIPINTERFACE_H_$/;"	d
IMG3_ZipInterface	./compression/IMG3_ZipInterface.cpp	/^IMG3_ZipInterface::IMG3_ZipInterface() {$/;"	f	class:IMG3_ZipInterface
IMG3_ZipInterface	./compression/include/IMG3_ZipInterface.h	/^class IMG3_ZipInterface {$/;"	c
INCL_DOSDATETIME	./sqlite3/sqlite3.c	/^# define INCL_DOSDATETIME$/;"	d	file:
INCL_DOSERRORS	./sqlite3/sqlite3.c	/^# define INCL_DOSERRORS$/;"	d	file:
INCL_DOSFILEMGR	./sqlite3/sqlite3.c	/^# define INCL_DOSFILEMGR$/;"	d	file:
INCL_DOSMISC	./sqlite3/sqlite3.c	/^# define INCL_DOSMISC$/;"	d	file:
INCL_DOSMODULEMGR	./sqlite3/sqlite3.c	/^# define INCL_DOSMODULEMGR$/;"	d	file:
INCL_DOSPROCESS	./sqlite3/sqlite3.c	/^# define INCL_DOSPROCESS$/;"	d	file:
INCL_DOSSEMAPHORES	./sqlite3/sqlite3.c	/^# define INCL_DOSSEMAPHORES$/;"	d	file:
INT16_TYPE	./sqlite3/sqlite3.c	/^#  define INT16_TYPE /;"	d	file:
INT8_TYPE	./sqlite3/sqlite3.c	/^#  define INT8_TYPE /;"	d	file:
INTERFACE	./sqlite3/sqlite3.c	/^# define INTERFACE /;"	d	file:
INVALID_FILE_ATTRIBUTES	./sqlite3/sqlite3.c	/^# define INVALID_FILE_ATTRIBUTES /;"	d	file:
INVALID_SET_FILE_POINTER	./sqlite3/sqlite3.c	/^# define INVALID_SET_FILE_POINTER /;"	d	file:
IN_DECLARE_VTAB	./sqlite3/sqlite3.c	/^  #define IN_DECLARE_VTAB /;"	d	file:
IN_INDEX_EPH	./sqlite3/sqlite3.c	/^#define IN_INDEX_EPH /;"	d	file:
IN_INDEX_INDEX	./sqlite3/sqlite3.c	/^#define IN_INDEX_INDEX /;"	d	file:
IN_INDEX_ROWID	./sqlite3/sqlite3.c	/^#define IN_INDEX_ROWID /;"	d	file:
IOMETHODS	./sqlite3/sqlite3.c	/^#define IOMETHODS(/;"	d	file:
IOTRACE	./sqlite3/sqlite3.c	/^# define IOTRACE(/;"	d	file:
ISAUTOVACUUM	./sqlite3/sqlite3.c	/^#define ISAUTOVACUUM /;"	d	file:
IS_BIG_INT	./sqlite3/sqlite3.c	/^#define IS_BIG_INT(/;"	d	file:
IS_LOCK_ERROR	./sqlite3/sqlite3.c	/^#define IS_LOCK_ERROR(/;"	d	file:
IcuCursor	./sqlite3/sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	./sqlite3/sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	./sqlite3/sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	./sqlite3/sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	./sqlite3/sqlite3.c	/^#define IdChar(/;"	d	file:
IdList	./sqlite3/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	./sqlite3/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	./sqlite3/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IgnorableOrderby	./sqlite3/sqlite3.c	/^#define IgnorableOrderby(/;"	d	file:
InLoop	./sqlite3/sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon7::__anon8	file:
Incrblob	./sqlite3/sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	./sqlite3/sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
Index	./sqlite3/sqlite3.c	/^struct Index {$/;"	s	file:
Index	./sqlite3/sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	./sqlite3/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	./sqlite3/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	./sqlite3/sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon9	file:
InitState	./compression/IMG3_LzssInterface.cpp	/^void IMG3_LzssInterface::InitState(struct encode_state *sp)$/;"	f	class:IMG3_LzssInterface
InsertDecryptionInfo	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::InsertDecryptionInfo(char *device, char * build, char *version, char *section, char *key, char *iv)$/;"	f	class:IMG3_Sqlite3
InsertNode	./compression/IMG3_LzssInterface.cpp	/^void IMG3_LzssInterface::InsertNode(struct encode_state *sp, int r)$/;"	f	class:IMG3_LzssInterface
InsertTable	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::InsertTable(char *device)$/;"	f	class:IMG3_Sqlite3
IntegrityCk	./sqlite3/sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	./sqlite3/sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsFileCompressed	./compression/IMG3_LzssInterface.cpp	/^int32_t IMG3_LzssInterface::IsFileCompressed(uint8_t *inbuff)$/;"	f	class:IMG3_LzssInterface
IsHiddenColumn	./sqlite3/sqlite3.c	/^#  define IsHiddenColumn(/;"	d	file:
IsVirtual	./sqlite3/sqlite3.c	/^#  define IsVirtual(/;"	d	file:
JOURNAL_CHUNKSIZE	./sqlite3/sqlite3.c	/^#define JOURNAL_CHUNKSIZE /;"	d	file:
JOURNAL_HDR_SZ	./sqlite3/sqlite3.c	/^#define JOURNAL_HDR_SZ(/;"	d	file:
JOURNAL_PG_SZ	./sqlite3/sqlite3.c	/^#define JOURNAL_PG_SZ(/;"	d	file:
JT_CROSS	./sqlite3/sqlite3.c	/^#define JT_CROSS /;"	d	file:
JT_ERROR	./sqlite3/sqlite3.c	/^#define JT_ERROR /;"	d	file:
JT_INNER	./sqlite3/sqlite3.c	/^#define JT_INNER /;"	d	file:
JT_LEFT	./sqlite3/sqlite3.c	/^#define JT_LEFT /;"	d	file:
JT_NATURAL	./sqlite3/sqlite3.c	/^#define JT_NATURAL /;"	d	file:
JT_OUTER	./sqlite3/sqlite3.c	/^#define JT_OUTER /;"	d	file:
JT_RIGHT	./sqlite3/sqlite3.c	/^#define JT_RIGHT /;"	d	file:
JournalFile	./sqlite3/sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	./sqlite3/sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	./sqlite3/sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KBAG_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct KBAG_Struct {$/;"	s
KBAG_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) KBAG_Struct;$/;"	t	typeref:struct:KBAG_Struct
KeyClass	./sqlite3/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	./sqlite3/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	./sqlite3/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	./sqlite3/sqlite3.c	/^#define LARGEST_INT64 /;"	d	file:
LCS_ITERATOR_FINISHED	./sqlite3/sqlite3.c	/^#define LCS_ITERATOR_FINISHED /;"	d	file:
LIBNAME	./compression/Makefile	/^LIBNAME = ..\/libs\/libimg3_compression.a$/;"	m
LIBNAME	./html/Makefile	/^LIBNAME = ..\/libs\/libimg3_html.a$/;"	m
LIBNAME	./openssl/Makefile	/^LIBNAME = ..\/libs\/libimg3_openssl.a$/;"	m
LIBNAME	./sections/Makefile	/^LIBNAME = ..\/libs\/libimg3_sections.a$/;"	m
LIBNAME	./sqlite3/Makefile	/^LIBNAME = ..\/libs\/libimg3_sqlite3.a$/;"	m
LIBS	./Makefile	/^LIBS		= -L$(LIBSDIR) -limg3_compression -limg3_html -limg3_openssl -limg3_sections -limg3_sqlite3 -lcrypto -lpthread$/;"	m
LIBSDIR	./Makefile	/^LIBSDIR     = libs\/$/;"	m
LIKEFUNC	./sqlite3/sqlite3.c	/^#define LIKEFUNC(/;"	d	file:
LIST_ARCHIVE_FILES	./includes/IMG3_typedefs.h	/^	DECRYPT_IMG3_FILE, UPDATE_IMG3_DATABASE, LIST_ARCHIVE_FILES, EXTRACT_FILE, PATCH_KERNEL$/;"	e	enum:ParserOperation
LOCAL_FILE_HEADER_EXTRA	./compression/include/IMG3_ZipInterface.h	/^#define LOCAL_FILE_HEADER_EXTRA	/;"	d
LOCAL_FILE_HEADER_MARKER	./compression/include/IMG3_ZipInterface.h	/^#define LOCAL_FILE_HEADER_MARKER	/;"	d
LOCKFILE_FAIL_IMMEDIATELY	./sqlite3/sqlite3.c	/^# define LOCKFILE_FAIL_IMMEDIATELY /;"	d	file:
LOCK_TIMEOUT	./sqlite3/sqlite3.c	/^#define LOCK_TIMEOUT /;"	d	file:
LOGMAX	./sqlite3/sqlite3.c	/^#define LOGMAX /;"	d	file:
LONGDOUBLE_TYPE	./sqlite3/sqlite3.c	/^# define LONGDOUBLE_TYPE /;"	d	file:
LcsIterator	./sqlite3/sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	./sqlite3/sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	./sqlite3/sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	./sqlite3/sqlite3.c	/^struct LimitVal {$/;"	s	file:
LinearPickNext	./sqlite3/sqlite3.c	/^static RtreeCell *LinearPickNext($/;"	f	file:
LinearPickSeeds	./sqlite3/sqlite3.c	/^static void LinearPickSeeds($/;"	f	file:
ListArchiveFiles	./IMG3_Functions.cpp	/^int32_t ListArchiveFiles( char *archiveFileName )$/;"	f
LoadDoclistCtx	./sqlite3/sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	./sqlite3/sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LockFile	./sqlite3/sqlite3.c	/^#define LockFile(/;"	d	file:
LockFileEx	./sqlite3/sqlite3.c	/^#define LockFileEx(/;"	d	file:
Lookaside	./sqlite3/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	./sqlite3/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	./sqlite3/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	./sqlite3/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
LzssCompress	./compression/IMG3_LzssInterface.cpp	/^int32_t IMG3_LzssInterface::LzssCompress(uint8_t *inbuff, size_t insize, uint8_t **outbuff, size_t *outsize)$/;"	f	class:IMG3_LzssInterface
LzssDecompress	./compression/IMG3_LzssInterface.cpp	/^int32_t IMG3_LzssInterface::LzssDecompress(uint8_t *inbuff, size_t insize, uint8_t **outbuff, size_t *outsize)$/;"	f	class:IMG3_LzssInterface
M	./sqlite3/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASTER_NAME	./sqlite3/sqlite3.c	/^#define MASTER_NAME /;"	d	file:
MASTER_ROOT	./sqlite3/sqlite3.c	/^#define MASTER_ROOT /;"	d	file:
MAX	./sqlite3/sqlite3.c	/^# define MAX(/;"	d	file:
MAX_6BYTE	./sqlite3/sqlite3.c	/^#   define MAX_6BYTE /;"	d	file:
MAX_IV_SIZE	./sections/include/IMG3_FileSection.h	/^#define MAX_IV_SIZE /;"	d
MAX_KEY_SIZE	./sections/include/IMG3_FileSection.h	/^#define MAX_KEY_SIZE /;"	d
MAX_PATH	./sections/include/IMG3_FileSection.h	/^#define MAX_PATH /;"	d
MAX_PATHNAME	./sqlite3/sqlite3.c	/^#define MAX_PATHNAME /;"	d	file:
MAX_ROWID	./sqlite3/sqlite3.c	/^#   define MAX_ROWID /;"	d	file:
MAX_SECTOR_SIZE	./sqlite3/sqlite3.c	/^#define MAX_SECTOR_SIZE /;"	d	file:
MAX_SQL_COMMAND_LENGTH	./sqlite3/include/IMG3_Sqlite3.h	/^#define MAX_SQL_COMMAND_LENGTH /;"	d
MAX_TAG_ATTRS_LENGTH	./html/include/IMG3_HtmlTag.h	/^#define MAX_TAG_ATTRS_LENGTH	/;"	d
MAX_TAG_ATTR_LENGTH	./html/include/IMG3_HtmlTag.h	/^#define MAX_TAG_ATTR_LENGTH	/;"	d
MAX_TAG_DATA_LENGTH	./html/include/IMG3_HtmlTag.h	/^#define MAX_TAG_DATA_LENGTH	/;"	d
MAX_TAG_LENGTH	./html/include/IMG3_HtmlTag.h	/^#define MAX_TAG_LENGTH	/;"	d
MAX_TAG_VALUE_LENGTH	./html/include/IMG3_HtmlTag.h	/^#define MAX_TAG_VALUE_LENGTH	/;"	d
MEM5LINK	./sqlite3/sqlite3.c	/^#define MEM5LINK(/;"	d	file:
MEMCELLSIZE	./sqlite3/sqlite3.c	/^#define MEMCELLSIZE /;"	d	file:
MEMDB	./sqlite3/sqlite3.c	/^# define MEMDB /;"	d	file:
MEMTYPE_DB	./sqlite3/sqlite3.c	/^#define MEMTYPE_DB /;"	d	file:
MEMTYPE_HEAP	./sqlite3/sqlite3.c	/^#define MEMTYPE_HEAP /;"	d	file:
MEMTYPE_LOOKASIDE	./sqlite3/sqlite3.c	/^#define MEMTYPE_LOOKASIDE /;"	d	file:
MEMTYPE_PCACHE	./sqlite3/sqlite3.c	/^#define MEMTYPE_PCACHE /;"	d	file:
MEMTYPE_SCRATCH	./sqlite3/sqlite3.c	/^#define MEMTYPE_SCRATCH /;"	d	file:
MEM_Agg	./sqlite3/sqlite3.c	/^#define MEM_Agg /;"	d	file:
MEM_Blob	./sqlite3/sqlite3.c	/^#define MEM_Blob /;"	d	file:
MEM_Dyn	./sqlite3/sqlite3.c	/^#define MEM_Dyn /;"	d	file:
MEM_Ephem	./sqlite3/sqlite3.c	/^#define MEM_Ephem /;"	d	file:
MEM_Frame	./sqlite3/sqlite3.c	/^#define MEM_Frame /;"	d	file:
MEM_Int	./sqlite3/sqlite3.c	/^#define MEM_Int /;"	d	file:
MEM_Invalid	./sqlite3/sqlite3.c	/^#define MEM_Invalid /;"	d	file:
MEM_Null	./sqlite3/sqlite3.c	/^#define MEM_Null /;"	d	file:
MEM_Real	./sqlite3/sqlite3.c	/^#define MEM_Real /;"	d	file:
MEM_RowSet	./sqlite3/sqlite3.c	/^#define MEM_RowSet /;"	d	file:
MEM_Static	./sqlite3/sqlite3.c	/^#define MEM_Static /;"	d	file:
MEM_Str	./sqlite3/sqlite3.c	/^#define MEM_Str /;"	d	file:
MEM_Term	./sqlite3/sqlite3.c	/^#define MEM_Term /;"	d	file:
MEM_TypeMask	./sqlite3/sqlite3.c	/^#define MEM_TypeMask /;"	d	file:
MEM_Zero	./sqlite3/sqlite3.c	/^  #define MEM_Zero /;"	d	file:
MEM_Zero	./sqlite3/sqlite3.c	/^  #undef MEM_Zero$/;"	d	file:
MEM_Zero	./sqlite3/sqlite3.c	/^#define MEM_Zero /;"	d	file:
MERGE_AND	./sqlite3/sqlite3.c	/^#define MERGE_AND /;"	d	file:
MERGE_NEAR	./sqlite3/sqlite3.c	/^#define MERGE_NEAR /;"	d	file:
MERGE_NOT	./sqlite3/sqlite3.c	/^#define MERGE_NOT /;"	d	file:
MERGE_OR	./sqlite3/sqlite3.c	/^#define MERGE_OR /;"	d	file:
MERGE_PHRASE	./sqlite3/sqlite3.c	/^#define MERGE_PHRASE /;"	d	file:
MERGE_POS_NEAR	./sqlite3/sqlite3.c	/^#define MERGE_POS_NEAR /;"	d	file:
MERGE_POS_OR	./sqlite3/sqlite3.c	/^#define MERGE_POS_OR /;"	d	file:
MERGE_POS_PHRASE	./sqlite3/sqlite3.c	/^#define MERGE_POS_PHRASE /;"	d	file:
MIN	./sqlite3/sqlite3.c	/^# define MIN(/;"	d	file:
MX_CELL	./sqlite3/sqlite3.c	/^#define MX_CELL(/;"	d	file:
MX_CELL_SIZE	./sqlite3/sqlite3.c	/^#define MX_CELL_SIZE(/;"	d	file:
MX_CLOSE_ATTEMPT	./sqlite3/sqlite3.c	/^#define MX_CLOSE_ATTEMPT /;"	d	file:
MX_DELETION_ATTEMPTS	./sqlite3/sqlite3.c	/^#define MX_DELETION_ATTEMPTS /;"	d	file:
MX_SMALL	./sqlite3/sqlite3.c	/^#define MX_SMALL /;"	d	file:
MapFileToMemory	./IMG3_Functions.cpp	/^static uint8_t * MapFileToMemory( const char *fileName, uint32_t *fileSize, uint32_t *mapSize )$/;"	f	file:
MatchInfo	./sqlite3/sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	./sqlite3/sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Mem	./sqlite3/sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	./sqlite3/sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	./sqlite3/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	./sqlite3/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	./sqlite3/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	./sqlite3/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	./sqlite3/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	./sqlite3/sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	./sqlite3/sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	./sqlite3/sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	./sqlite3/sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	./sqlite3/sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	./sqlite3/sqlite3.c	/^#define MemSetTypeFlag(/;"	d	file:
Module	./sqlite3/sqlite3.c	/^struct Module {$/;"	s	file:
Module	./sqlite3/sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	./sqlite3/sqlite3.c	/^#define NB /;"	d	file:
NCELL	./sqlite3/sqlite3.c	/^#define NCELL(/;"	d	file:
NCSIZE	./sqlite3/sqlite3.c	/^#define NCSIZE /;"	d	file:
NDEBUG	./sqlite3/sqlite3.c	/^# define NDEBUG /;"	d	file:
NDELAY	./sqlite3/sqlite3.c	/^# define NDELAY /;"	d	file:
NEVER	./sqlite3/sqlite3.c	/^# define NEVER(/;"	d	file:
NN	./sqlite3/sqlite3.c	/^#define NN /;"	d	file:
NO_LOCK	./sqlite3/sqlite3.c	/^#define NO_LOCK /;"	d	file:
NUMBER_OF_SUPPORTED_FILES	./includes/IMG3_includes.h	/^#define NUMBER_OF_SUPPORTED_FILES	/;"	d
N_HASH	./sqlite3/sqlite3.c	/^#define N_HASH /;"	d	file:
N_SORT_BUCKET	./sqlite3/sqlite3.c	/^#define N_SORT_BUCKET /;"	d	file:
N_STATEMENT	./sqlite3/sqlite3.c	/^  #define N_STATEMENT /;"	d	file:
NameContext	./sqlite3/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	./sqlite3/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
OBJECTS	./compression/Makefile	/^OBJECTS = IMG3_ZipInterface.o IMG3_LzssInterface.o $/;"	m
OBJECTS	./html/Makefile	/^OBJECTS = IMG3_HtmlTag.o IMG3_HtmlParser.o$/;"	m
OBJECTS	./openssl/Makefile	/^OBJECTS = IMG3_OpensslInterface.o$/;"	m
OBJECTS	./sections/Makefile	/^OBJECTS = IMG3_FileInterface.o IMG3_FileSection.o$/;"	m
OBJECTS	./sqlite3/Makefile	/^OBJECTS = sqlite3.o IMG3_Sqlite3.o$/;"	m
OBJLIBS	./Makefile	/^OBJLIBS	    = libimg3_compression.a libimg3_html.a libimg3_openssl.a libimg3_sections.a libimg3_sqlite3.a$/;"	m
OBJS	./Makefile	/^OBJS		= IMG3_Functions.o$/;"	m
OE_Abort	./sqlite3/sqlite3.c	/^#define OE_Abort /;"	d	file:
OE_Cascade	./sqlite3/sqlite3.c	/^#define OE_Cascade /;"	d	file:
OE_Default	./sqlite3/sqlite3.c	/^#define OE_Default /;"	d	file:
OE_Fail	./sqlite3/sqlite3.c	/^#define OE_Fail /;"	d	file:
OE_Ignore	./sqlite3/sqlite3.c	/^#define OE_Ignore /;"	d	file:
OE_None	./sqlite3/sqlite3.c	/^#define OE_None /;"	d	file:
OE_Replace	./sqlite3/sqlite3.c	/^#define OE_Replace /;"	d	file:
OE_Restrict	./sqlite3/sqlite3.c	/^#define OE_Restrict /;"	d	file:
OE_Rollback	./sqlite3/sqlite3.c	/^#define OE_Rollback /;"	d	file:
OE_SetDflt	./sqlite3/sqlite3.c	/^#define OE_SetDflt /;"	d	file:
OE_SetNull	./sqlite3/sqlite3.c	/^#define OE_SetNull /;"	d	file:
OMIT_TEMPDB	./sqlite3/sqlite3.c	/^#define OMIT_TEMPDB /;"	d	file:
OPENING_TAG	./html/include/IMG3_HtmlTag.h	/^	OPENING_TAG,$/;"	e	enum:TagType
OPFLAG_APPEND	./sqlite3/sqlite3.c	/^#define OPFLAG_APPEND /;"	d	file:
OPFLAG_CLEARCACHE	./sqlite3/sqlite3.c	/^#define OPFLAG_CLEARCACHE /;"	d	file:
OPFLAG_ISUPDATE	./sqlite3/sqlite3.c	/^#define OPFLAG_ISUPDATE /;"	d	file:
OPFLAG_LASTROWID	./sqlite3/sqlite3.c	/^#define OPFLAG_LASTROWID /;"	d	file:
OPFLAG_NCHANGE	./sqlite3/sqlite3.c	/^#define OPFLAG_NCHANGE /;"	d	file:
OPFLAG_USESEEKRESULT	./sqlite3/sqlite3.c	/^#define OPFLAG_USESEEKRESULT /;"	d	file:
OPFLG_IN1	./sqlite3/sqlite3.c	/^#define OPFLG_IN1 /;"	d	file:
OPFLG_IN2	./sqlite3/sqlite3.c	/^#define OPFLG_IN2 /;"	d	file:
OPFLG_IN3	./sqlite3/sqlite3.c	/^#define OPFLG_IN3 /;"	d	file:
OPFLG_INITIALIZER	./sqlite3/sqlite3.c	/^#define OPFLG_INITIALIZER /;"	d	file:
OPFLG_JUMP	./sqlite3/sqlite3.c	/^#define OPFLG_JUMP /;"	d	file:
OPFLG_OUT2	./sqlite3/sqlite3.c	/^#define OPFLG_OUT2 /;"	d	file:
OPFLG_OUT2_PRERELEASE	./sqlite3/sqlite3.c	/^#define OPFLG_OUT2_PRERELEASE /;"	d	file:
OPFLG_OUT3	./sqlite3/sqlite3.c	/^#define OPFLG_OUT3 /;"	d	file:
OP_Add	./sqlite3/sqlite3.c	/^#define OP_Add /;"	d	file:
OP_AddImm	./sqlite3/sqlite3.c	/^#define OP_AddImm /;"	d	file:
OP_Affinity	./sqlite3/sqlite3.c	/^#define OP_Affinity /;"	d	file:
OP_AggFinal	./sqlite3/sqlite3.c	/^#define OP_AggFinal /;"	d	file:
OP_AggStep	./sqlite3/sqlite3.c	/^#define OP_AggStep /;"	d	file:
OP_And	./sqlite3/sqlite3.c	/^#define OP_And /;"	d	file:
OP_AutoCommit	./sqlite3/sqlite3.c	/^#define OP_AutoCommit /;"	d	file:
OP_BitAnd	./sqlite3/sqlite3.c	/^#define OP_BitAnd /;"	d	file:
OP_BitNot	./sqlite3/sqlite3.c	/^#define OP_BitNot /;"	d	file:
OP_BitOr	./sqlite3/sqlite3.c	/^#define OP_BitOr /;"	d	file:
OP_Blob	./sqlite3/sqlite3.c	/^#define OP_Blob /;"	d	file:
OP_Checkpoint	./sqlite3/sqlite3.c	/^#define OP_Checkpoint /;"	d	file:
OP_Clear	./sqlite3/sqlite3.c	/^#define OP_Clear /;"	d	file:
OP_Close	./sqlite3/sqlite3.c	/^#define OP_Close /;"	d	file:
OP_CollSeq	./sqlite3/sqlite3.c	/^#define OP_CollSeq /;"	d	file:
OP_Column	./sqlite3/sqlite3.c	/^#define OP_Column /;"	d	file:
OP_Compare	./sqlite3/sqlite3.c	/^#define OP_Compare /;"	d	file:
OP_Concat	./sqlite3/sqlite3.c	/^#define OP_Concat /;"	d	file:
OP_Copy	./sqlite3/sqlite3.c	/^#define OP_Copy /;"	d	file:
OP_Count	./sqlite3/sqlite3.c	/^#define OP_Count /;"	d	file:
OP_CreateIndex	./sqlite3/sqlite3.c	/^#define OP_CreateIndex /;"	d	file:
OP_CreateTable	./sqlite3/sqlite3.c	/^#define OP_CreateTable /;"	d	file:
OP_Delete	./sqlite3/sqlite3.c	/^#define OP_Delete /;"	d	file:
OP_Destroy	./sqlite3/sqlite3.c	/^#define OP_Destroy /;"	d	file:
OP_Divide	./sqlite3/sqlite3.c	/^#define OP_Divide /;"	d	file:
OP_DropIndex	./sqlite3/sqlite3.c	/^#define OP_DropIndex /;"	d	file:
OP_DropTable	./sqlite3/sqlite3.c	/^#define OP_DropTable /;"	d	file:
OP_DropTrigger	./sqlite3/sqlite3.c	/^#define OP_DropTrigger /;"	d	file:
OP_Eq	./sqlite3/sqlite3.c	/^#define OP_Eq /;"	d	file:
OP_Expire	./sqlite3/sqlite3.c	/^#define OP_Expire /;"	d	file:
OP_Explain	./sqlite3/sqlite3.c	/^#define OP_Explain /;"	d	file:
OP_FkCounter	./sqlite3/sqlite3.c	/^#define OP_FkCounter /;"	d	file:
OP_FkIfZero	./sqlite3/sqlite3.c	/^#define OP_FkIfZero /;"	d	file:
OP_Found	./sqlite3/sqlite3.c	/^#define OP_Found /;"	d	file:
OP_Function	./sqlite3/sqlite3.c	/^#define OP_Function /;"	d	file:
OP_Ge	./sqlite3/sqlite3.c	/^#define OP_Ge /;"	d	file:
OP_Gosub	./sqlite3/sqlite3.c	/^#define OP_Gosub /;"	d	file:
OP_Goto	./sqlite3/sqlite3.c	/^#define OP_Goto /;"	d	file:
OP_Gt	./sqlite3/sqlite3.c	/^#define OP_Gt /;"	d	file:
OP_Halt	./sqlite3/sqlite3.c	/^#define OP_Halt /;"	d	file:
OP_HaltIfNull	./sqlite3/sqlite3.c	/^#define OP_HaltIfNull /;"	d	file:
OP_IdxDelete	./sqlite3/sqlite3.c	/^#define OP_IdxDelete /;"	d	file:
OP_IdxGE	./sqlite3/sqlite3.c	/^#define OP_IdxGE /;"	d	file:
OP_IdxInsert	./sqlite3/sqlite3.c	/^#define OP_IdxInsert /;"	d	file:
OP_IdxLT	./sqlite3/sqlite3.c	/^#define OP_IdxLT /;"	d	file:
OP_IdxRowid	./sqlite3/sqlite3.c	/^#define OP_IdxRowid /;"	d	file:
OP_If	./sqlite3/sqlite3.c	/^#define OP_If /;"	d	file:
OP_IfNeg	./sqlite3/sqlite3.c	/^#define OP_IfNeg /;"	d	file:
OP_IfNot	./sqlite3/sqlite3.c	/^#define OP_IfNot /;"	d	file:
OP_IfPos	./sqlite3/sqlite3.c	/^#define OP_IfPos /;"	d	file:
OP_IfZero	./sqlite3/sqlite3.c	/^#define OP_IfZero /;"	d	file:
OP_IncrVacuum	./sqlite3/sqlite3.c	/^#define OP_IncrVacuum /;"	d	file:
OP_Insert	./sqlite3/sqlite3.c	/^#define OP_Insert /;"	d	file:
OP_InsertInt	./sqlite3/sqlite3.c	/^#define OP_InsertInt /;"	d	file:
OP_Int64	./sqlite3/sqlite3.c	/^#define OP_Int64 /;"	d	file:
OP_Integer	./sqlite3/sqlite3.c	/^#define OP_Integer /;"	d	file:
OP_IntegrityCk	./sqlite3/sqlite3.c	/^#define OP_IntegrityCk /;"	d	file:
OP_IsNull	./sqlite3/sqlite3.c	/^#define OP_IsNull /;"	d	file:
OP_IsUnique	./sqlite3/sqlite3.c	/^#define OP_IsUnique /;"	d	file:
OP_JournalMode	./sqlite3/sqlite3.c	/^#define OP_JournalMode /;"	d	file:
OP_Jump	./sqlite3/sqlite3.c	/^#define OP_Jump /;"	d	file:
OP_Last	./sqlite3/sqlite3.c	/^#define OP_Last /;"	d	file:
OP_Le	./sqlite3/sqlite3.c	/^#define OP_Le /;"	d	file:
OP_LoadAnalysis	./sqlite3/sqlite3.c	/^#define OP_LoadAnalysis /;"	d	file:
OP_Lt	./sqlite3/sqlite3.c	/^#define OP_Lt /;"	d	file:
OP_MakeRecord	./sqlite3/sqlite3.c	/^#define OP_MakeRecord /;"	d	file:
OP_MaxPgcnt	./sqlite3/sqlite3.c	/^#define OP_MaxPgcnt /;"	d	file:
OP_MemMax	./sqlite3/sqlite3.c	/^#define OP_MemMax /;"	d	file:
OP_Move	./sqlite3/sqlite3.c	/^#define OP_Move /;"	d	file:
OP_Multiply	./sqlite3/sqlite3.c	/^#define OP_Multiply /;"	d	file:
OP_MustBeInt	./sqlite3/sqlite3.c	/^#define OP_MustBeInt /;"	d	file:
OP_Ne	./sqlite3/sqlite3.c	/^#define OP_Ne /;"	d	file:
OP_NewRowid	./sqlite3/sqlite3.c	/^#define OP_NewRowid /;"	d	file:
OP_Next	./sqlite3/sqlite3.c	/^#define OP_Next /;"	d	file:
OP_Noop	./sqlite3/sqlite3.c	/^#define OP_Noop /;"	d	file:
OP_Not	./sqlite3/sqlite3.c	/^#define OP_Not /;"	d	file:
OP_NotExists	./sqlite3/sqlite3.c	/^#define OP_NotExists /;"	d	file:
OP_NotFound	./sqlite3/sqlite3.c	/^#define OP_NotFound /;"	d	file:
OP_NotNull	./sqlite3/sqlite3.c	/^#define OP_NotNull /;"	d	file:
OP_NotUsed_139	./sqlite3/sqlite3.c	/^#define OP_NotUsed_139 /;"	d	file:
OP_NotUsed_140	./sqlite3/sqlite3.c	/^#define OP_NotUsed_140 /;"	d	file:
OP_Null	./sqlite3/sqlite3.c	/^#define OP_Null /;"	d	file:
OP_NullRow	./sqlite3/sqlite3.c	/^#define OP_NullRow /;"	d	file:
OP_OpenAutoindex	./sqlite3/sqlite3.c	/^#define OP_OpenAutoindex /;"	d	file:
OP_OpenEphemeral	./sqlite3/sqlite3.c	/^#define OP_OpenEphemeral /;"	d	file:
OP_OpenPseudo	./sqlite3/sqlite3.c	/^#define OP_OpenPseudo /;"	d	file:
OP_OpenRead	./sqlite3/sqlite3.c	/^#define OP_OpenRead /;"	d	file:
OP_OpenWrite	./sqlite3/sqlite3.c	/^#define OP_OpenWrite /;"	d	file:
OP_Or	./sqlite3/sqlite3.c	/^#define OP_Or /;"	d	file:
OP_Pagecount	./sqlite3/sqlite3.c	/^#define OP_Pagecount /;"	d	file:
OP_Param	./sqlite3/sqlite3.c	/^#define OP_Param /;"	d	file:
OP_ParseSchema	./sqlite3/sqlite3.c	/^#define OP_ParseSchema /;"	d	file:
OP_Permutation	./sqlite3/sqlite3.c	/^#define OP_Permutation /;"	d	file:
OP_Prev	./sqlite3/sqlite3.c	/^#define OP_Prev /;"	d	file:
OP_Program	./sqlite3/sqlite3.c	/^#define OP_Program /;"	d	file:
OP_ReadCookie	./sqlite3/sqlite3.c	/^#define OP_ReadCookie /;"	d	file:
OP_Real	./sqlite3/sqlite3.c	/^#define OP_Real /;"	d	file:
OP_RealAffinity	./sqlite3/sqlite3.c	/^#define OP_RealAffinity /;"	d	file:
OP_Remainder	./sqlite3/sqlite3.c	/^#define OP_Remainder /;"	d	file:
OP_ResetCount	./sqlite3/sqlite3.c	/^#define OP_ResetCount /;"	d	file:
OP_ResultRow	./sqlite3/sqlite3.c	/^#define OP_ResultRow /;"	d	file:
OP_Return	./sqlite3/sqlite3.c	/^#define OP_Return /;"	d	file:
OP_Rewind	./sqlite3/sqlite3.c	/^#define OP_Rewind /;"	d	file:
OP_RowData	./sqlite3/sqlite3.c	/^#define OP_RowData /;"	d	file:
OP_RowKey	./sqlite3/sqlite3.c	/^#define OP_RowKey /;"	d	file:
OP_RowSetAdd	./sqlite3/sqlite3.c	/^#define OP_RowSetAdd /;"	d	file:
OP_RowSetRead	./sqlite3/sqlite3.c	/^#define OP_RowSetRead /;"	d	file:
OP_RowSetTest	./sqlite3/sqlite3.c	/^#define OP_RowSetTest /;"	d	file:
OP_Rowid	./sqlite3/sqlite3.c	/^#define OP_Rowid /;"	d	file:
OP_SCopy	./sqlite3/sqlite3.c	/^#define OP_SCopy /;"	d	file:
OP_Savepoint	./sqlite3/sqlite3.c	/^#define OP_Savepoint /;"	d	file:
OP_Seek	./sqlite3/sqlite3.c	/^#define OP_Seek /;"	d	file:
OP_SeekGe	./sqlite3/sqlite3.c	/^#define OP_SeekGe /;"	d	file:
OP_SeekGt	./sqlite3/sqlite3.c	/^#define OP_SeekGt /;"	d	file:
OP_SeekLe	./sqlite3/sqlite3.c	/^#define OP_SeekLe /;"	d	file:
OP_SeekLt	./sqlite3/sqlite3.c	/^#define OP_SeekLt /;"	d	file:
OP_Sequence	./sqlite3/sqlite3.c	/^#define OP_Sequence /;"	d	file:
OP_SetCookie	./sqlite3/sqlite3.c	/^#define OP_SetCookie /;"	d	file:
OP_ShiftLeft	./sqlite3/sqlite3.c	/^#define OP_ShiftLeft /;"	d	file:
OP_ShiftRight	./sqlite3/sqlite3.c	/^#define OP_ShiftRight /;"	d	file:
OP_Sort	./sqlite3/sqlite3.c	/^#define OP_Sort /;"	d	file:
OP_String	./sqlite3/sqlite3.c	/^#define OP_String /;"	d	file:
OP_String8	./sqlite3/sqlite3.c	/^#define OP_String8 /;"	d	file:
OP_Subtract	./sqlite3/sqlite3.c	/^#define OP_Subtract /;"	d	file:
OP_TableLock	./sqlite3/sqlite3.c	/^#define OP_TableLock /;"	d	file:
OP_ToBlob	./sqlite3/sqlite3.c	/^#define OP_ToBlob /;"	d	file:
OP_ToInt	./sqlite3/sqlite3.c	/^#define OP_ToInt /;"	d	file:
OP_ToNumeric	./sqlite3/sqlite3.c	/^#define OP_ToNumeric /;"	d	file:
OP_ToReal	./sqlite3/sqlite3.c	/^#define OP_ToReal /;"	d	file:
OP_ToText	./sqlite3/sqlite3.c	/^#define OP_ToText /;"	d	file:
OP_Trace	./sqlite3/sqlite3.c	/^#define OP_Trace /;"	d	file:
OP_Transaction	./sqlite3/sqlite3.c	/^#define OP_Transaction /;"	d	file:
OP_VBegin	./sqlite3/sqlite3.c	/^#define OP_VBegin /;"	d	file:
OP_VColumn	./sqlite3/sqlite3.c	/^#define OP_VColumn /;"	d	file:
OP_VCreate	./sqlite3/sqlite3.c	/^#define OP_VCreate /;"	d	file:
OP_VDestroy	./sqlite3/sqlite3.c	/^#define OP_VDestroy /;"	d	file:
OP_VFilter	./sqlite3/sqlite3.c	/^#define OP_VFilter /;"	d	file:
OP_VNext	./sqlite3/sqlite3.c	/^#define OP_VNext /;"	d	file:
OP_VOpen	./sqlite3/sqlite3.c	/^#define OP_VOpen /;"	d	file:
OP_VRename	./sqlite3/sqlite3.c	/^#define OP_VRename /;"	d	file:
OP_VUpdate	./sqlite3/sqlite3.c	/^#define OP_VUpdate /;"	d	file:
OP_Vacuum	./sqlite3/sqlite3.c	/^#define OP_Vacuum /;"	d	file:
OP_Variable	./sqlite3/sqlite3.c	/^#define OP_Variable /;"	d	file:
OP_VerifyCookie	./sqlite3/sqlite3.c	/^#define OP_VerifyCookie /;"	d	file:
OP_Yield	./sqlite3/sqlite3.c	/^#define OP_Yield /;"	d	file:
OS2_MUTEX_INITIALIZER	./sqlite3/sqlite3.c	/^#define OS2_MUTEX_INITIALIZER /;"	d	file:
OSTRACE	./sqlite3/sqlite3.c	/^#define OSTRACE(/;"	d	file:
OS_VXWORKS	./sqlite3/sqlite3.c	/^#    define OS_VXWORKS /;"	d	file:
O_BINARY	./sqlite3/sqlite3.c	/^# define O_BINARY /;"	d	file:
O_LARGEFILE	./sqlite3/sqlite3.c	/^# define O_LARGEFILE /;"	d	file:
O_LARGEFILE	./sqlite3/sqlite3.c	/^# undef O_LARGEFILE$/;"	d	file:
O_NOFOLLOW	./sqlite3/sqlite3.c	/^# define O_NOFOLLOW /;"	d	file:
Op	./sqlite3/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpenCounter	./sqlite3/sqlite3.c	/^#define OpenCounter(/;"	d	file:
P4_COLLSEQ	./sqlite3/sqlite3.c	/^#define P4_COLLSEQ /;"	d	file:
P4_DYNAMIC	./sqlite3/sqlite3.c	/^#define P4_DYNAMIC /;"	d	file:
P4_FUNCDEF	./sqlite3/sqlite3.c	/^#define P4_FUNCDEF /;"	d	file:
P4_INT32	./sqlite3/sqlite3.c	/^#define P4_INT32 /;"	d	file:
P4_INT64	./sqlite3/sqlite3.c	/^#define P4_INT64 /;"	d	file:
P4_INTARRAY	./sqlite3/sqlite3.c	/^#define P4_INTARRAY /;"	d	file:
P4_KEYINFO	./sqlite3/sqlite3.c	/^#define P4_KEYINFO /;"	d	file:
P4_KEYINFO_HANDOFF	./sqlite3/sqlite3.c	/^#define P4_KEYINFO_HANDOFF /;"	d	file:
P4_KEYINFO_STATIC	./sqlite3/sqlite3.c	/^#define P4_KEYINFO_STATIC /;"	d	file:
P4_MEM	./sqlite3/sqlite3.c	/^#define P4_MEM /;"	d	file:
P4_MPRINTF	./sqlite3/sqlite3.c	/^#define P4_MPRINTF /;"	d	file:
P4_NOTUSED	./sqlite3/sqlite3.c	/^#define P4_NOTUSED /;"	d	file:
P4_REAL	./sqlite3/sqlite3.c	/^#define P4_REAL /;"	d	file:
P4_STATIC	./sqlite3/sqlite3.c	/^#define P4_STATIC /;"	d	file:
P4_SUBPROGRAM	./sqlite3/sqlite3.c	/^#define P4_SUBPROGRAM /;"	d	file:
P4_TRANSIENT	./sqlite3/sqlite3.c	/^#define P4_TRANSIENT /;"	d	file:
P4_VDBEFUNC	./sqlite3/sqlite3.c	/^#define P4_VDBEFUNC /;"	d	file:
P4_VTAB	./sqlite3/sqlite3.c	/^#define P4_VTAB /;"	d	file:
PAGERID	./sqlite3/sqlite3.c	/^#define PAGERID(/;"	d	file:
PAGERTRACE	./sqlite3/sqlite3.c	/^#define PAGERTRACE(/;"	d	file:
PAGER_ERROR	./sqlite3/sqlite3.c	/^#define PAGER_ERROR /;"	d	file:
PAGER_INCR	./sqlite3/sqlite3.c	/^# define PAGER_INCR(/;"	d	file:
PAGER_JOURNALMODE_DELETE	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_DELETE /;"	d	file:
PAGER_JOURNALMODE_MEMORY	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_MEMORY /;"	d	file:
PAGER_JOURNALMODE_OFF	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_OFF /;"	d	file:
PAGER_JOURNALMODE_PERSIST	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_PERSIST /;"	d	file:
PAGER_JOURNALMODE_QUERY	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_QUERY /;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_TRUNCATE /;"	d	file:
PAGER_JOURNALMODE_WAL	./sqlite3/sqlite3.c	/^#define PAGER_JOURNALMODE_WAL /;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	./sqlite3/sqlite3.c	/^#define PAGER_LOCKINGMODE_EXCLUSIVE /;"	d	file:
PAGER_LOCKINGMODE_NORMAL	./sqlite3/sqlite3.c	/^#define PAGER_LOCKINGMODE_NORMAL /;"	d	file:
PAGER_LOCKINGMODE_QUERY	./sqlite3/sqlite3.c	/^#define PAGER_LOCKINGMODE_QUERY /;"	d	file:
PAGER_MAX_PGNO	./sqlite3/sqlite3.c	/^#define PAGER_MAX_PGNO /;"	d	file:
PAGER_MEMORY	./sqlite3/sqlite3.c	/^#define PAGER_MEMORY /;"	d	file:
PAGER_MJ_PGNO	./sqlite3/sqlite3.c	/^#define PAGER_MJ_PGNO(/;"	d	file:
PAGER_NO_READLOCK	./sqlite3/sqlite3.c	/^#define PAGER_NO_READLOCK /;"	d	file:
PAGER_OMIT_JOURNAL	./sqlite3/sqlite3.c	/^#define PAGER_OMIT_JOURNAL /;"	d	file:
PAGER_OPEN	./sqlite3/sqlite3.c	/^#define PAGER_OPEN /;"	d	file:
PAGER_READER	./sqlite3/sqlite3.c	/^#define PAGER_READER /;"	d	file:
PAGER_WRITER_CACHEMOD	./sqlite3/sqlite3.c	/^#define PAGER_WRITER_CACHEMOD /;"	d	file:
PAGER_WRITER_DBMOD	./sqlite3/sqlite3.c	/^#define PAGER_WRITER_DBMOD /;"	d	file:
PAGER_WRITER_FINISHED	./sqlite3/sqlite3.c	/^#define PAGER_WRITER_FINISHED /;"	d	file:
PAGER_WRITER_LOCKED	./sqlite3/sqlite3.c	/^#define PAGER_WRITER_LOCKED /;"	d	file:
PAGE_TO_PGHDR1	./sqlite3/sqlite3.c	/^#define PAGE_TO_PGHDR1(/;"	d	file:
PARSING_TAG_ATTRIBUTES	./html/include/IMG3_HtmlParser.h	/^	PARSING_TAG_ATTRIBUTES,$/;"	e	enum:ParseState
PARSING_TAG_VALUE	./html/include/IMG3_HtmlParser.h	/^	PARSING_TAG_VALUE$/;"	e	enum:ParseState
PATCH_KERNEL	./includes/IMG3_typedefs.h	/^	DECRYPT_IMG3_FILE, UPDATE_IMG3_DATABASE, LIST_ARCHIVE_FILES, EXTRACT_FILE, PATCH_KERNEL$/;"	e	enum:ParserOperation
PCache	./sqlite3/sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	./sqlite3/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	./sqlite3/sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	./sqlite3/sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	./sqlite3/sqlite3.c	/^# define PENDING_BYTE /;"	d	file:
PENDING_BYTE_PAGE	./sqlite3/sqlite3.c	/^# define PENDING_BYTE_PAGE(/;"	d	file:
PENDING_LOCK	./sqlite3/sqlite3.c	/^#define PENDING_LOCK /;"	d	file:
PGHDR1_TO_PAGE	./sqlite3/sqlite3.c	/^#define PGHDR1_TO_PAGE(/;"	d	file:
PGHDR_DIRTY	./sqlite3/sqlite3.c	/^#define PGHDR_DIRTY /;"	d	file:
PGHDR_DONT_WRITE	./sqlite3/sqlite3.c	/^#define PGHDR_DONT_WRITE /;"	d	file:
PGHDR_NEED_READ	./sqlite3/sqlite3.c	/^#define PGHDR_NEED_READ /;"	d	file:
PGHDR_NEED_SYNC	./sqlite3/sqlite3.c	/^#define PGHDR_NEED_SYNC /;"	d	file:
PGHDR_REUSE_UNLIKELY	./sqlite3/sqlite3.c	/^#define PGHDR_REUSE_UNLIKELY /;"	d	file:
PGroup	./sqlite3/sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	./sqlite3/sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	./sqlite3/sqlite3.c	/^#define POSITION_LIST_END /;"	d	file:
POS_COLUMN	./sqlite3/sqlite3.c	/^#define POS_COLUMN /;"	d	file:
POS_END	./sqlite3/sqlite3.c	/^#define POS_END /;"	d	file:
PRINT_SYSTEM_ERROR	./includes/IMG3_defines.h	/^#define PRINT_SYSTEM_ERROR(/;"	d
PROXY_CONCHVERSION	./sqlite3/sqlite3.c	/^#define PROXY_CONCHVERSION /;"	d	file:
PROXY_HEADERLEN	./sqlite3/sqlite3.c	/^#define PROXY_HEADERLEN /;"	d	file:
PROXY_HOSTIDLEN	./sqlite3/sqlite3.c	/^#define PROXY_HOSTIDLEN /;"	d	file:
PROXY_MAXCONCHLEN	./sqlite3/sqlite3.c	/^#define PROXY_MAXCONCHLEN /;"	d	file:
PROXY_PATHINDEX	./sqlite3/sqlite3.c	/^#define PROXY_PATHINDEX /;"	d	file:
PTF_INTKEY	./sqlite3/sqlite3.c	/^#define PTF_INTKEY /;"	d	file:
PTF_LEAF	./sqlite3/sqlite3.c	/^#define PTF_LEAF /;"	d	file:
PTF_LEAFDATA	./sqlite3/sqlite3.c	/^#define PTF_LEAFDATA /;"	d	file:
PTF_ZERODATA	./sqlite3/sqlite3.c	/^#define PTF_ZERODATA /;"	d	file:
PTRMAP_BTREE	./sqlite3/sqlite3.c	/^#define PTRMAP_BTREE /;"	d	file:
PTRMAP_FREEPAGE	./sqlite3/sqlite3.c	/^#define PTRMAP_FREEPAGE /;"	d	file:
PTRMAP_ISPAGE	./sqlite3/sqlite3.c	/^#define PTRMAP_ISPAGE(/;"	d	file:
PTRMAP_OVERFLOW1	./sqlite3/sqlite3.c	/^#define PTRMAP_OVERFLOW1 /;"	d	file:
PTRMAP_OVERFLOW2	./sqlite3/sqlite3.c	/^#define PTRMAP_OVERFLOW2 /;"	d	file:
PTRMAP_PAGENO	./sqlite3/sqlite3.c	/^#define PTRMAP_PAGENO(/;"	d	file:
PTRMAP_PTROFFSET	./sqlite3/sqlite3.c	/^#define PTRMAP_PTROFFSET(/;"	d	file:
PTRMAP_ROOTPAGE	./sqlite3/sqlite3.c	/^#define PTRMAP_ROOTPAGE /;"	d	file:
Pager	./sqlite3/sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	./sqlite3/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	./sqlite3/sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	./sqlite3/sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	./sqlite3/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	./sqlite3/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseArguments	./IMG3_Main.cpp	/^int32_t ParseArguments(int argc, char *argv[]) {$/;"	f
ParseContext	./sqlite3/sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	./sqlite3/sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
ParseFile	./sections/IMG3_FileInterface.cpp	/^int32_t IMG3_FileInterface::ParseFile(uint8_t *fileData, uint32_t fileLength)$/;"	f	class:IMG3_FileInterface
ParseHtmlTags	./html/IMG3_HtmlParser.cpp	/^bool IMG3_HtmlParser::ParseHtmlTags(uint8_t *buffer, uint32_t bufferLength)$/;"	f	class:IMG3_HtmlParser
ParseSection	./sections/IMG3_FileSection.cpp	/^int32_t IMG3_FileSection::ParseSection(uint8_t *section)$/;"	f	class:IMG3_FileSection
ParseState	./html/include/IMG3_HtmlParser.h	/^typedef enum ParseState {$/;"	g
ParseState	./html/include/IMG3_HtmlParser.h	/^} ParseState;$/;"	t	typeref:enum:ParseState
ParserOperation	./includes/IMG3_typedefs.h	/^typedef enum ParserOperation {$/;"	g
ParserOperation	./includes/IMG3_typedefs.h	/^} ParserOperation;$/;"	t	typeref:enum:ParserOperation
PatchKernelFile	./IMG3_Functions.cpp	/^int32_t PatchKernelFile( char *archiveFileName, char *outputFileName, char *patchFileName, char *deviceName, char *deviceVersion ) {$/;"	f
PendingList	./sqlite3/sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	./sqlite3/sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	./sqlite3/sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	./sqlite3/sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	./sqlite3/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	./sqlite3/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	./sqlite3/sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	./sqlite3/sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	./sqlite3/sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PickNext	./sqlite3/sqlite3.c	/^  #define PickNext /;"	d	file:
PickSeeds	./sqlite3/sqlite3.c	/^  #define PickSeeds /;"	d	file:
PrintCentralDirectoryEnd	./compression/IMG3_ZipInterface.cpp	/^void IMG3_ZipInterface::PrintCentralDirectoryEnd(ZIP_CentralDirectoryEnd *ptr)$/;"	f	class:IMG3_ZipInterface
PrintCentralDirectoryListing	./compression/IMG3_ZipInterface.cpp	/^void IMG3_ZipInterface::PrintCentralDirectoryListing(ZIP_CentralDirectoryHeader *hdr)$/;"	f	class:IMG3_ZipInterface
PrintTag	./html/IMG3_HtmlTag.cpp	/^void IMG3_HtmlTag::PrintTag()$/;"	f	class:IMG3_HtmlTag
PrintUsage	./IMG3_Main.cpp	/^void PrintUsage(char *progName, char *command) {$/;"	f
QuadraticPickNext	./sqlite3/sqlite3.c	/^static RtreeCell *QuadraticPickNext($/;"	f	file:
QuadraticPickSeeds	./sqlite3/sqlite3.c	/^static void QuadraticPickSeeds($/;"	f	file:
READMARK_NOT_USED	./sqlite3/sqlite3.c	/^#define READMARK_NOT_USED /;"	d	file:
READ_LOCK	./sqlite3/sqlite3.c	/^#define READ_LOCK /;"	d	file:
READ_UTF16BE	./sqlite3/sqlite3.c	/^#define READ_UTF16BE(/;"	d	file:
READ_UTF16LE	./sqlite3/sqlite3.c	/^#define READ_UTF16LE(/;"	d	file:
READ_UTF8	./sqlite3/sqlite3.c	/^#define READ_UTF8(/;"	d	file:
REARGUARD	./sqlite3/sqlite3.c	/^#define REARGUARD /;"	d	file:
REGISTER_TRACE	./sqlite3/sqlite3.c	/^#  define REGISTER_TRACE(/;"	d	file:
RESERVED_BYTE	./sqlite3/sqlite3.c	/^#define RESERVED_BYTE /;"	d	file:
RESERVED_LOCK	./sqlite3/sqlite3.c	/^#define RESERVED_LOCK /;"	d	file:
ROUND8	./sqlite3/sqlite3.c	/^#define ROUND8(/;"	d	file:
ROUNDDOWN8	./sqlite3/sqlite3.c	/^#define ROUNDDOWN8(/;"	d	file:
ROWSET_ALLOCATION_SIZE	./sqlite3/sqlite3.c	/^#define ROWSET_ALLOCATION_SIZE /;"	d	file:
ROWSET_ENTRY_PER_CHUNK	./sqlite3/sqlite3.c	/^#define ROWSET_ENTRY_PER_CHUNK /;"	d	file:
RTREE_COORD_INT32	./sqlite3/sqlite3.c	/^#define RTREE_COORD_INT32 /;"	d	file:
RTREE_COORD_REAL32	./sqlite3/sqlite3.c	/^#define RTREE_COORD_REAL32 /;"	d	file:
RTREE_EQ	./sqlite3/sqlite3.c	/^#define RTREE_EQ /;"	d	file:
RTREE_GE	./sqlite3/sqlite3.c	/^#define RTREE_GE /;"	d	file:
RTREE_GEOMETRY_MAGIC	./sqlite3/sqlite3.c	/^#define RTREE_GEOMETRY_MAGIC /;"	d	file:
RTREE_GT	./sqlite3/sqlite3.c	/^#define RTREE_GT /;"	d	file:
RTREE_LE	./sqlite3/sqlite3.c	/^#define RTREE_LE /;"	d	file:
RTREE_LT	./sqlite3/sqlite3.c	/^#define RTREE_LT /;"	d	file:
RTREE_MATCH	./sqlite3/sqlite3.c	/^#define RTREE_MATCH /;"	d	file:
RTREE_MAXCELLS	./sqlite3/sqlite3.c	/^#define RTREE_MAXCELLS /;"	d	file:
RTREE_MAX_DEPTH	./sqlite3/sqlite3.c	/^#define RTREE_MAX_DEPTH /;"	d	file:
RTREE_MAX_DIMENSIONS	./sqlite3/sqlite3.c	/^#define RTREE_MAX_DIMENSIONS /;"	d	file:
RTREE_MINCELLS	./sqlite3/sqlite3.c	/^#define RTREE_MINCELLS(/;"	d	file:
RTREE_REINSERT	./sqlite3/sqlite3.c	/^#define RTREE_REINSERT(/;"	d	file:
Reinsert	./sqlite3/sqlite3.c	/^static int Reinsert($/;"	f	file:
RemoveClosingTag	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::RemoveClosingTag(uint32_t tagId)$/;"	f	class:IMG3_HtmlParser
RemoveOpeningTag	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::RemoveOpeningTag(uint32_t tagId)$/;"	f	class:IMG3_HtmlParser
RetrieveDataBetweenTags	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::RetrieveDataBetweenTags()$/;"	f	class:IMG3_HtmlParser
RetrieveKeyAndIV	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::RetrieveKeyAndIV(char *device, char *version, char *section, char **key, char **iv)$/;"	f	class:IMG3_Sqlite3
RowSet	./sqlite3/sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	./sqlite3/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	./sqlite3/sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	./sqlite3/sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	./sqlite3/sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	./sqlite3/sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	./sqlite3/sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	./sqlite3/sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	./sqlite3/sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	./sqlite3/sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	./sqlite3/sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	./sqlite3/sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	./sqlite3/sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	./sqlite3/sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeGeomCallback	./sqlite3/sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	./sqlite3/sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	./sqlite3/sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	./sqlite3/sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	./sqlite3/sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	./sqlite3/sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
SAVEPOINT_BEGIN	./sqlite3/sqlite3.c	/^#define SAVEPOINT_BEGIN /;"	d	file:
SAVEPOINT_RELEASE	./sqlite3/sqlite3.c	/^#define SAVEPOINT_RELEASE /;"	d	file:
SAVEPOINT_ROLLBACK	./sqlite3/sqlite3.c	/^#define SAVEPOINT_ROLLBACK /;"	d	file:
SAVE_SZ	./sqlite3/sqlite3.c	/^# define SAVE_SZ /;"	d	file:
SCANNING_FOR_CLOSING_TAG_END	./html/include/IMG3_HtmlParser.h	/^	SCANNING_FOR_CLOSING_TAG_END,$/;"	e	enum:ParseState
SCANNING_FOR_CLOSING_TAG_START	./html/include/IMG3_HtmlParser.h	/^	SCANNING_FOR_CLOSING_TAG_START,$/;"	e	enum:ParseState
SCANNING_FOR_OPENING_TAG_END	./html/include/IMG3_HtmlParser.h	/^	SCANNING_FOR_OPENING_TAG_END,$/;"	e	enum:ParseState
SCANNING_FOR_OPENING_TAG_START	./html/include/IMG3_HtmlParser.h	/^	SCANNING_FOR_OPENING_TAG_START,$/;"	e	enum:ParseState
SCANNING_FOR_TAG_END	./html/include/IMG3_HtmlParser.h	/^	SCANNING_FOR_TAG_END,$/;"	e	enum:ParseState
SCHEMA_TABLE	./sqlite3/sqlite3.c	/^#define SCHEMA_TABLE(/;"	d	file:
SEPO_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct SEPO_Struct {$/;"	s
SEPO_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) SEPO_Struct;$/;"	t	typeref:struct:SEPO_Struct
SETBIT	./sqlite3/sqlite3.c	/^#define SETBIT(/;"	d	file:
SET_BINARY_MODE	./compression/include/IMG3_ZipInterface.h	/^#  define SET_BINARY_MODE(/;"	d
SET_FULLSYNC	./sqlite3/sqlite3.c	/^# define SET_FULLSYNC(/;"	d	file:
SF_Aggregate	./sqlite3/sqlite3.c	/^#define SF_Aggregate /;"	d	file:
SF_Distinct	./sqlite3/sqlite3.c	/^#define SF_Distinct /;"	d	file:
SF_Expanded	./sqlite3/sqlite3.c	/^#define SF_Expanded /;"	d	file:
SF_HasTypeInfo	./sqlite3/sqlite3.c	/^#define SF_HasTypeInfo /;"	d	file:
SF_Resolved	./sqlite3/sqlite3.c	/^#define SF_Resolved /;"	d	file:
SF_UsesEphemeral	./sqlite3/sqlite3.c	/^#define SF_UsesEphemeral /;"	d	file:
SHARED_FIRST	./sqlite3/sqlite3.c	/^#define SHARED_FIRST /;"	d	file:
SHARED_LOCK	./sqlite3/sqlite3.c	/^#define SHARED_LOCK /;"	d	file:
SHARED_SIZE	./sqlite3/sqlite3.c	/^#define SHARED_SIZE /;"	d	file:
SHSH_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct SHSH_Struct {$/;"	s
SHSH_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) SHSH_Struct;$/;"	t	typeref:struct:SHSH_Struct
SLOT_2_0	./sqlite3/sqlite3.c	/^#define SLOT_2_0 /;"	d	file:
SLOT_4_2_0	./sqlite3/sqlite3.c	/^#define SLOT_4_2_0 /;"	d	file:
SMALLEST_INT64	./sqlite3/sqlite3.c	/^#define SMALLEST_INT64 /;"	d	file:
SQLITE3_MUTEX_INITIALIZER	./sqlite3/sqlite3.c	/^#define SQLITE3_MUTEX_INITIALIZER /;"	d	file:
SQLITE3_TEXT	./sqlite3/include/sqlite3.h	/^#define SQLITE3_TEXT /;"	d
SQLITE3_TEXT	./sqlite3/sqlite3.c	/^#define SQLITE3_TEXT /;"	d	file:
SQLITE_ABORT	./sqlite3/include/sqlite3.h	/^#define SQLITE_ABORT /;"	d
SQLITE_ABORT	./sqlite3/sqlite3.c	/^#define SQLITE_ABORT /;"	d	file:
SQLITE_ACCESS_EXISTS	./sqlite3/include/sqlite3.h	/^#define SQLITE_ACCESS_EXISTS /;"	d
SQLITE_ACCESS_EXISTS	./sqlite3/sqlite3.c	/^#define SQLITE_ACCESS_EXISTS /;"	d	file:
SQLITE_ACCESS_READ	./sqlite3/include/sqlite3.h	/^#define SQLITE_ACCESS_READ /;"	d
SQLITE_ACCESS_READ	./sqlite3/sqlite3.c	/^#define SQLITE_ACCESS_READ /;"	d	file:
SQLITE_ACCESS_READWRITE	./sqlite3/include/sqlite3.h	/^#define SQLITE_ACCESS_READWRITE /;"	d
SQLITE_ACCESS_READWRITE	./sqlite3/sqlite3.c	/^#define SQLITE_ACCESS_READWRITE /;"	d	file:
SQLITE_AFF_INTEGER	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_INTEGER /;"	d	file:
SQLITE_AFF_MASK	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_MASK /;"	d	file:
SQLITE_AFF_NONE	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_NONE /;"	d	file:
SQLITE_AFF_NUMERIC	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_NUMERIC /;"	d	file:
SQLITE_AFF_REAL	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_REAL /;"	d	file:
SQLITE_AFF_TEXT	./sqlite3/sqlite3.c	/^#define SQLITE_AFF_TEXT /;"	d	file:
SQLITE_ALTER_TABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_ALTER_TABLE /;"	d
SQLITE_ALTER_TABLE	./sqlite3/sqlite3.c	/^#define SQLITE_ALTER_TABLE /;"	d	file:
SQLITE_AMALGAMATION	./sqlite3/sqlite3.c	/^#define SQLITE_AMALGAMATION /;"	d	file:
SQLITE_ANALYZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_ANALYZE /;"	d
SQLITE_ANALYZE	./sqlite3/sqlite3.c	/^#define SQLITE_ANALYZE /;"	d	file:
SQLITE_ANY	./sqlite3/include/sqlite3.h	/^#define SQLITE_ANY /;"	d
SQLITE_ANY	./sqlite3/sqlite3.c	/^#define SQLITE_ANY /;"	d	file:
SQLITE_API	./sqlite3/include/sqlite3.h	/^# define SQLITE_API$/;"	d
SQLITE_API	./sqlite3/sqlite3.c	/^# define SQLITE_API$/;"	d	file:
SQLITE_ASCII	./sqlite3/sqlite3.c	/^# define SQLITE_ASCII /;"	d	file:
SQLITE_ATTACH	./sqlite3/include/sqlite3.h	/^#define SQLITE_ATTACH /;"	d
SQLITE_ATTACH	./sqlite3/sqlite3.c	/^#define SQLITE_ATTACH /;"	d	file:
SQLITE_AUTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_AUTH /;"	d
SQLITE_AUTH	./sqlite3/sqlite3.c	/^#define SQLITE_AUTH /;"	d	file:
SQLITE_AutoIndex	./sqlite3/sqlite3.c	/^#define SQLITE_AutoIndex /;"	d	file:
SQLITE_BIGENDIAN	./sqlite3/sqlite3.c	/^# define SQLITE_BIGENDIAN /;"	d	file:
SQLITE_BIG_DBL	./sqlite3/sqlite3.c	/^#   define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BIG_DBL	./sqlite3/sqlite3.c	/^# define SQLITE_BIG_DBL /;"	d	file:
SQLITE_BLOB	./sqlite3/include/sqlite3.h	/^#define SQLITE_BLOB /;"	d
SQLITE_BLOB	./sqlite3/sqlite3.c	/^#define SQLITE_BLOB /;"	d	file:
SQLITE_BUSY	./sqlite3/include/sqlite3.h	/^#define SQLITE_BUSY /;"	d
SQLITE_BUSY	./sqlite3/sqlite3.c	/^#define SQLITE_BUSY /;"	d	file:
SQLITE_BUSY_RECOVERY	./sqlite3/include/sqlite3.h	/^#define SQLITE_BUSY_RECOVERY /;"	d
SQLITE_BUSY_RECOVERY	./sqlite3/sqlite3.c	/^#define SQLITE_BUSY_RECOVERY /;"	d	file:
SQLITE_CANTOPEN	./sqlite3/include/sqlite3.h	/^#define SQLITE_CANTOPEN /;"	d
SQLITE_CANTOPEN	./sqlite3/sqlite3.c	/^#define SQLITE_CANTOPEN /;"	d	file:
SQLITE_CANTOPEN_BKPT	./sqlite3/sqlite3.c	/^#define SQLITE_CANTOPEN_BKPT /;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	./sqlite3/include/sqlite3.h	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d
SQLITE_CANTOPEN_NOTEMPDIR	./sqlite3/sqlite3.c	/^#define SQLITE_CANTOPEN_NOTEMPDIR /;"	d	file:
SQLITE_COLL_BINARY	./sqlite3/sqlite3.c	/^#define SQLITE_COLL_BINARY /;"	d	file:
SQLITE_COLL_NOCASE	./sqlite3/sqlite3.c	/^#define SQLITE_COLL_NOCASE /;"	d	file:
SQLITE_COLL_REVERSE	./sqlite3/sqlite3.c	/^#define SQLITE_COLL_REVERSE /;"	d	file:
SQLITE_COLL_USER	./sqlite3/sqlite3.c	/^#define SQLITE_COLL_USER /;"	d	file:
SQLITE_CONFIG_GETMALLOC	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_GETMALLOC /;"	d
SQLITE_CONFIG_GETMALLOC	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_GETMALLOC /;"	d	file:
SQLITE_CONFIG_GETMUTEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_GETMUTEX /;"	d
SQLITE_CONFIG_GETMUTEX	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_GETMUTEX /;"	d	file:
SQLITE_CONFIG_GETPCACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_GETPCACHE /;"	d
SQLITE_CONFIG_GETPCACHE	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_GETPCACHE /;"	d	file:
SQLITE_CONFIG_HEAP	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_HEAP /;"	d
SQLITE_CONFIG_HEAP	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_HEAP /;"	d	file:
SQLITE_CONFIG_LOG	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_LOG /;"	d
SQLITE_CONFIG_LOG	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_LOG /;"	d	file:
SQLITE_CONFIG_LOOKASIDE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d
SQLITE_CONFIG_LOOKASIDE	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_LOOKASIDE /;"	d	file:
SQLITE_CONFIG_MALLOC	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_MALLOC /;"	d
SQLITE_CONFIG_MALLOC	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_MALLOC /;"	d	file:
SQLITE_CONFIG_MEMSTATUS	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d
SQLITE_CONFIG_MEMSTATUS	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_MEMSTATUS /;"	d	file:
SQLITE_CONFIG_MULTITHREAD	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d
SQLITE_CONFIG_MULTITHREAD	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_MULTITHREAD /;"	d	file:
SQLITE_CONFIG_MUTEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_MUTEX /;"	d
SQLITE_CONFIG_MUTEX	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_MUTEX /;"	d	file:
SQLITE_CONFIG_PAGECACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_PAGECACHE /;"	d
SQLITE_CONFIG_PAGECACHE	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_PAGECACHE /;"	d	file:
SQLITE_CONFIG_PCACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_PCACHE /;"	d
SQLITE_CONFIG_PCACHE	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_PCACHE /;"	d	file:
SQLITE_CONFIG_SCRATCH	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_SCRATCH /;"	d
SQLITE_CONFIG_SCRATCH	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_SCRATCH /;"	d	file:
SQLITE_CONFIG_SERIALIZED	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_SERIALIZED /;"	d
SQLITE_CONFIG_SERIALIZED	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_SERIALIZED /;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d
SQLITE_CONFIG_SINGLETHREAD	./sqlite3/sqlite3.c	/^#define SQLITE_CONFIG_SINGLETHREAD /;"	d	file:
SQLITE_CONSTRAINT	./sqlite3/include/sqlite3.h	/^#define SQLITE_CONSTRAINT /;"	d
SQLITE_CONSTRAINT	./sqlite3/sqlite3.c	/^#define SQLITE_CONSTRAINT /;"	d	file:
SQLITE_COPY	./sqlite3/include/sqlite3.h	/^#define SQLITE_COPY /;"	d
SQLITE_COPY	./sqlite3/sqlite3.c	/^#define SQLITE_COPY /;"	d	file:
SQLITE_CORE	./sqlite3/sqlite3.c	/^  #define SQLITE_CORE /;"	d	file:
SQLITE_CORE	./sqlite3/sqlite3.c	/^# define SQLITE_CORE /;"	d	file:
SQLITE_CORE	./sqlite3/sqlite3.c	/^#define SQLITE_CORE /;"	d	file:
SQLITE_CORRUPT	./sqlite3/include/sqlite3.h	/^#define SQLITE_CORRUPT /;"	d
SQLITE_CORRUPT	./sqlite3/sqlite3.c	/^#define SQLITE_CORRUPT /;"	d	file:
SQLITE_CORRUPT_BKPT	./sqlite3/sqlite3.c	/^#define SQLITE_CORRUPT_BKPT /;"	d	file:
SQLITE_CREATE_INDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_INDEX /;"	d
SQLITE_CREATE_INDEX	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_INDEX /;"	d	file:
SQLITE_CREATE_TABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TABLE /;"	d
SQLITE_CREATE_TABLE	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_INDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d
SQLITE_CREATE_TEMP_INDEX	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TEMP_INDEX /;"	d	file:
SQLITE_CREATE_TEMP_TABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d
SQLITE_CREATE_TEMP_TABLE	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TABLE /;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d
SQLITE_CREATE_TEMP_TRIGGER	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TEMP_TRIGGER /;"	d	file:
SQLITE_CREATE_TEMP_VIEW	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d
SQLITE_CREATE_TEMP_VIEW	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TEMP_VIEW /;"	d	file:
SQLITE_CREATE_TRIGGER	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_TRIGGER /;"	d
SQLITE_CREATE_TRIGGER	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_TRIGGER /;"	d	file:
SQLITE_CREATE_VIEW	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_VIEW /;"	d
SQLITE_CREATE_VIEW	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_VIEW /;"	d	file:
SQLITE_CREATE_VTABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_CREATE_VTABLE /;"	d
SQLITE_CREATE_VTABLE	./sqlite3/sqlite3.c	/^#define SQLITE_CREATE_VTABLE /;"	d	file:
SQLITE_CkptFullFSync	./sqlite3/sqlite3.c	/^#define SQLITE_CkptFullFSync /;"	d	file:
SQLITE_ColumnCache	./sqlite3/sqlite3.c	/^#define SQLITE_ColumnCache /;"	d	file:
SQLITE_CountRows	./sqlite3/sqlite3.c	/^#define SQLITE_CountRows /;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d
SQLITE_DBCONFIG_LOOKASIDE	./sqlite3/sqlite3.c	/^#define SQLITE_DBCONFIG_LOOKASIDE /;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d
SQLITE_DBSTATUS_CACHE_USED	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_CACHE_USED /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_HIT /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE /;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_LOOKASIDE_USED /;"	d	file:
SQLITE_DBSTATUS_MAX	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBSTATUS_MAX /;"	d
SQLITE_DBSTATUS_MAX	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_MAX /;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d
SQLITE_DBSTATUS_SCHEMA_USED	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_SCHEMA_USED /;"	d	file:
SQLITE_DBSTATUS_STMT_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d
SQLITE_DBSTATUS_STMT_USED	./sqlite3/sqlite3.c	/^#define SQLITE_DBSTATUS_STMT_USED /;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	./sqlite3/sqlite3.c	/^  #define SQLITE_DEFAULT_AUTOVACUUM /;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_CACHE_SIZE /;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_FILE_FORMAT /;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_FILE_PERMISSIONS /;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	./sqlite3/sqlite3.c	/^  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT /;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_MEMSTATUS /;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	./sqlite3/sqlite3.c	/^# undef SQLITE_DEFAULT_PAGE_SIZE$/;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS /;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS /;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_SECTOR_SIZE /;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_TEMP_CACHE_SIZE /;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	./sqlite3/sqlite3.c	/^# define SQLITE_DEFAULT_WAL_AUTOCHECKPOINT /;"	d	file:
SQLITE_DELETE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DELETE /;"	d
SQLITE_DELETE	./sqlite3/sqlite3.c	/^#define SQLITE_DELETE /;"	d	file:
SQLITE_DENY	./sqlite3/include/sqlite3.h	/^#define SQLITE_DENY /;"	d
SQLITE_DENY	./sqlite3/sqlite3.c	/^#define SQLITE_DENY /;"	d	file:
SQLITE_DEPRECATED	./sqlite3/include/sqlite3.h	/^#define SQLITE_DEPRECATED$/;"	d
SQLITE_DEPRECATED	./sqlite3/sqlite3.c	/^#define SQLITE_DEPRECATED$/;"	d	file:
SQLITE_DETACH	./sqlite3/include/sqlite3.h	/^#define SQLITE_DETACH /;"	d
SQLITE_DETACH	./sqlite3/sqlite3.c	/^#define SQLITE_DETACH /;"	d	file:
SQLITE_DONE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DONE /;"	d
SQLITE_DONE	./sqlite3/sqlite3.c	/^#define SQLITE_DONE /;"	d	file:
SQLITE_DROP_INDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_INDEX /;"	d
SQLITE_DROP_INDEX	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_INDEX /;"	d	file:
SQLITE_DROP_TABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TABLE /;"	d
SQLITE_DROP_TABLE	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_INDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TEMP_INDEX /;"	d
SQLITE_DROP_TEMP_INDEX	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TEMP_INDEX /;"	d	file:
SQLITE_DROP_TEMP_TABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TEMP_TABLE /;"	d
SQLITE_DROP_TEMP_TABLE	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TEMP_TABLE /;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d
SQLITE_DROP_TEMP_TRIGGER	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TEMP_TRIGGER /;"	d	file:
SQLITE_DROP_TEMP_VIEW	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TEMP_VIEW /;"	d
SQLITE_DROP_TEMP_VIEW	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TEMP_VIEW /;"	d	file:
SQLITE_DROP_TRIGGER	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_TRIGGER /;"	d
SQLITE_DROP_TRIGGER	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_TRIGGER /;"	d	file:
SQLITE_DROP_VIEW	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_VIEW /;"	d
SQLITE_DROP_VIEW	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_VIEW /;"	d	file:
SQLITE_DROP_VTABLE	./sqlite3/include/sqlite3.h	/^#define SQLITE_DROP_VTABLE /;"	d
SQLITE_DROP_VTABLE	./sqlite3/sqlite3.c	/^#define SQLITE_DROP_VTABLE /;"	d	file:
SQLITE_DYNAMIC	./sqlite3/sqlite3.c	/^#define SQLITE_DYNAMIC /;"	d	file:
SQLITE_EBCDIC	./sqlite3/sqlite3.c	/^# define SQLITE_EBCDIC /;"	d	file:
SQLITE_EMPTY	./sqlite3/include/sqlite3.h	/^#define SQLITE_EMPTY /;"	d
SQLITE_EMPTY	./sqlite3/sqlite3.c	/^#define SQLITE_EMPTY /;"	d	file:
SQLITE_ENABLE_FTS3	./sqlite3/sqlite3.c	/^# define SQLITE_ENABLE_FTS3$/;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	./sqlite3/sqlite3.c	/^#    define SQLITE_ENABLE_LOCKING_STYLE /;"	d	file:
SQLITE_ERROR	./sqlite3/include/sqlite3.h	/^#define SQLITE_ERROR /;"	d
SQLITE_ERROR	./sqlite3/sqlite3.c	/^#define SQLITE_ERROR /;"	d	file:
SQLITE_EXPERIMENTAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_EXPERIMENTAL$/;"	d
SQLITE_EXPERIMENTAL	./sqlite3/sqlite3.c	/^#define SQLITE_EXPERIMENTAL$/;"	d	file:
SQLITE_EXTENSION_INIT1	./sqlite3/include/sqlite3ext.h	/^#define SQLITE_EXTENSION_INIT1 /;"	d
SQLITE_EXTENSION_INIT1	./sqlite3/sqlite3.c	/^#define SQLITE_EXTENSION_INIT1 /;"	d	file:
SQLITE_EXTENSION_INIT2	./sqlite3/include/sqlite3ext.h	/^#define SQLITE_EXTENSION_INIT2(/;"	d
SQLITE_EXTENSION_INIT2	./sqlite3/sqlite3.c	/^#define SQLITE_EXTENSION_INIT2(/;"	d	file:
SQLITE_EXTERN	./sqlite3/include/sqlite3.h	/^# define SQLITE_EXTERN /;"	d
SQLITE_EXTERN	./sqlite3/sqlite3.c	/^# define SQLITE_EXTERN /;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	./sqlite3/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_COUNT /;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	./sqlite3/sqlite3.c	/^#define SQLITE_FAULTINJECTOR_MALLOC /;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d
SQLITE_FCNTL_CHUNK_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_CHUNK_SIZE /;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_DB_UNCHANGED /;"	d	file:
SQLITE_FCNTL_FILE_POINTER	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_FILE_POINTER /;"	d	file:
SQLITE_FCNTL_LOCKSTATE	./sqlite3/include/sqlite3.h	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d
SQLITE_FCNTL_LOCKSTATE	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_LOCKSTATE /;"	d	file:
SQLITE_FCNTL_SIZE_HINT	./sqlite3/include/sqlite3.h	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d
SQLITE_FCNTL_SIZE_HINT	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_SIZE_HINT /;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	./sqlite3/sqlite3.c	/^#define SQLITE_FCNTL_SYNC_OMITTED /;"	d	file:
SQLITE_FILE_HEADER	./sqlite3/sqlite3.c	/^#  define SQLITE_FILE_HEADER /;"	d	file:
SQLITE_FLOAT	./sqlite3/include/sqlite3.h	/^#define SQLITE_FLOAT /;"	d
SQLITE_FLOAT	./sqlite3/sqlite3.c	/^#define SQLITE_FLOAT /;"	d	file:
SQLITE_FORMAT	./sqlite3/include/sqlite3.h	/^#define SQLITE_FORMAT /;"	d
SQLITE_FORMAT	./sqlite3/sqlite3.c	/^#define SQLITE_FORMAT /;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	./sqlite3/sqlite3.c	/^#define SQLITE_FSFLAGS_IS_MSDOS /;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	./sqlite3/sqlite3.c	/^#define SQLITE_FTS3_DEFAULT_NEAR_PARAM /;"	d	file:
SQLITE_FULL	./sqlite3/include/sqlite3.h	/^#define SQLITE_FULL /;"	d
SQLITE_FULL	./sqlite3/sqlite3.c	/^#define SQLITE_FULL /;"	d	file:
SQLITE_FUNCTION	./sqlite3/include/sqlite3.h	/^#define SQLITE_FUNCTION /;"	d
SQLITE_FUNCTION	./sqlite3/sqlite3.c	/^#define SQLITE_FUNCTION /;"	d	file:
SQLITE_FUNC_CASE	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_CASE /;"	d	file:
SQLITE_FUNC_COALESCE	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_COALESCE /;"	d	file:
SQLITE_FUNC_COUNT	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_COUNT /;"	d	file:
SQLITE_FUNC_EPHEM	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_EPHEM /;"	d	file:
SQLITE_FUNC_LIKE	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_LIKE /;"	d	file:
SQLITE_FUNC_NEEDCOLL	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_NEEDCOLL /;"	d	file:
SQLITE_FUNC_PRIVATE	./sqlite3/sqlite3.c	/^#define SQLITE_FUNC_PRIVATE /;"	d	file:
SQLITE_FactorOutConst	./sqlite3/sqlite3.c	/^#define SQLITE_FactorOutConst /;"	d	file:
SQLITE_ForeignKeys	./sqlite3/sqlite3.c	/^#define SQLITE_ForeignKeys /;"	d	file:
SQLITE_FullColNames	./sqlite3/sqlite3.c	/^#define SQLITE_FullColNames /;"	d	file:
SQLITE_FullFSync	./sqlite3/sqlite3.c	/^#define SQLITE_FullFSync /;"	d	file:
SQLITE_GET_LOCKPROXYFILE	./sqlite3/include/sqlite3.h	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d
SQLITE_GET_LOCKPROXYFILE	./sqlite3/sqlite3.c	/^#define SQLITE_GET_LOCKPROXYFILE /;"	d	file:
SQLITE_GroupByOrder	./sqlite3/sqlite3.c	/^#define SQLITE_GroupByOrder /;"	d	file:
SQLITE_HAVE_ISNAN	./sqlite3/sqlite3.c	/^# undef SQLITE_HAVE_ISNAN$/;"	d	file:
SQLITE_IGNORE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IGNORE /;"	d
SQLITE_IGNORE	./sqlite3/sqlite3.c	/^#define SQLITE_IGNORE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d
SQLITE_INDEX_CONSTRAINT_EQ	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_EQ /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d
SQLITE_INDEX_CONSTRAINT_GE	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d
SQLITE_INDEX_CONSTRAINT_GT	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_GT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d
SQLITE_INDEX_CONSTRAINT_LE	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LE /;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d
SQLITE_INDEX_CONSTRAINT_LT	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_LT /;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	./sqlite3/include/sqlite3.h	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_CONSTRAINT_MATCH /;"	d	file:
SQLITE_INDEX_SAMPLES	./sqlite3/sqlite3.c	/^#define SQLITE_INDEX_SAMPLES /;"	d	file:
SQLITE_INSERT	./sqlite3/include/sqlite3.h	/^#define SQLITE_INSERT /;"	d
SQLITE_INSERT	./sqlite3/sqlite3.c	/^#define SQLITE_INSERT /;"	d	file:
SQLITE_INTEGER	./sqlite3/include/sqlite3.h	/^#define SQLITE_INTEGER /;"	d
SQLITE_INTEGER	./sqlite3/sqlite3.c	/^#define SQLITE_INTEGER /;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	./sqlite3/sqlite3.c	/^# define SQLITE_INTEGRITY_CHECK_ERROR_MAX /;"	d	file:
SQLITE_INTERNAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_INTERNAL /;"	d
SQLITE_INTERNAL	./sqlite3/sqlite3.c	/^#define SQLITE_INTERNAL /;"	d	file:
SQLITE_INTERRUPT	./sqlite3/include/sqlite3.h	/^#define SQLITE_INTERRUPT /;"	d
SQLITE_INTERRUPT	./sqlite3/sqlite3.c	/^#define SQLITE_INTERRUPT /;"	d	file:
SQLITE_INT_TO_PTR	./sqlite3/sqlite3.c	/^# define SQLITE_INT_TO_PTR(/;"	d	file:
SQLITE_IOCAP_ATOMIC	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC /;"	d
SQLITE_IOCAP_ATOMIC	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC /;"	d	file:
SQLITE_IOCAP_ATOMIC16K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d
SQLITE_IOCAP_ATOMIC16K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC16K /;"	d	file:
SQLITE_IOCAP_ATOMIC1K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d
SQLITE_IOCAP_ATOMIC1K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC1K /;"	d	file:
SQLITE_IOCAP_ATOMIC2K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d
SQLITE_IOCAP_ATOMIC2K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC2K /;"	d	file:
SQLITE_IOCAP_ATOMIC32K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d
SQLITE_IOCAP_ATOMIC32K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC32K /;"	d	file:
SQLITE_IOCAP_ATOMIC4K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d
SQLITE_IOCAP_ATOMIC4K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC4K /;"	d	file:
SQLITE_IOCAP_ATOMIC512	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d
SQLITE_IOCAP_ATOMIC512	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC512 /;"	d	file:
SQLITE_IOCAP_ATOMIC64K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d
SQLITE_IOCAP_ATOMIC64K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC64K /;"	d	file:
SQLITE_IOCAP_ATOMIC8K	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d
SQLITE_IOCAP_ATOMIC8K	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_ATOMIC8K /;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d
SQLITE_IOCAP_SAFE_APPEND	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_SAFE_APPEND /;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d
SQLITE_IOCAP_SEQUENTIAL	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_SEQUENTIAL /;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	./sqlite3/sqlite3.c	/^#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN /;"	d	file:
SQLITE_IOERR	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR /;"	d
SQLITE_IOERR	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR /;"	d	file:
SQLITE_IOERR_ACCESS	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_ACCESS /;"	d
SQLITE_IOERR_ACCESS	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_ACCESS /;"	d	file:
SQLITE_IOERR_BLOCKED	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_BLOCKED /;"	d
SQLITE_IOERR_BLOCKED	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_BLOCKED /;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_CHECKRESERVEDLOCK /;"	d	file:
SQLITE_IOERR_CLOSE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_CLOSE /;"	d
SQLITE_IOERR_CLOSE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_CLOSE /;"	d	file:
SQLITE_IOERR_DELETE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_DELETE /;"	d
SQLITE_IOERR_DELETE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_DELETE /;"	d	file:
SQLITE_IOERR_DIR_CLOSE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d
SQLITE_IOERR_DIR_CLOSE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_DIR_CLOSE /;"	d	file:
SQLITE_IOERR_DIR_FSYNC	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d
SQLITE_IOERR_DIR_FSYNC	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_DIR_FSYNC /;"	d	file:
SQLITE_IOERR_FSTAT	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_FSTAT /;"	d
SQLITE_IOERR_FSTAT	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_FSTAT /;"	d	file:
SQLITE_IOERR_FSYNC	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_FSYNC /;"	d
SQLITE_IOERR_FSYNC	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_FSYNC /;"	d	file:
SQLITE_IOERR_LOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_LOCK /;"	d
SQLITE_IOERR_LOCK	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_LOCK /;"	d	file:
SQLITE_IOERR_NOMEM	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_NOMEM /;"	d
SQLITE_IOERR_NOMEM	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_NOMEM /;"	d	file:
SQLITE_IOERR_RDLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_RDLOCK /;"	d
SQLITE_IOERR_RDLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_RDLOCK /;"	d	file:
SQLITE_IOERR_READ	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_READ /;"	d
SQLITE_IOERR_READ	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_READ /;"	d	file:
SQLITE_IOERR_SHMLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_SHMLOCK /;"	d
SQLITE_IOERR_SHMLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_SHMLOCK /;"	d	file:
SQLITE_IOERR_SHMOPEN	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_SHMOPEN /;"	d
SQLITE_IOERR_SHMOPEN	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_SHMOPEN /;"	d	file:
SQLITE_IOERR_SHMSIZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_SHMSIZE /;"	d
SQLITE_IOERR_SHMSIZE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_SHMSIZE /;"	d	file:
SQLITE_IOERR_SHORT_READ	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_SHORT_READ /;"	d
SQLITE_IOERR_SHORT_READ	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_SHORT_READ /;"	d	file:
SQLITE_IOERR_TRUNCATE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_TRUNCATE /;"	d
SQLITE_IOERR_TRUNCATE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_TRUNCATE /;"	d	file:
SQLITE_IOERR_UNLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_UNLOCK /;"	d
SQLITE_IOERR_UNLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_UNLOCK /;"	d	file:
SQLITE_IOERR_WRITE	./sqlite3/include/sqlite3.h	/^#define SQLITE_IOERR_WRITE /;"	d
SQLITE_IOERR_WRITE	./sqlite3/sqlite3.c	/^#define SQLITE_IOERR_WRITE /;"	d	file:
SQLITE_IgnoreChecks	./sqlite3/sqlite3.c	/^#define SQLITE_IgnoreChecks /;"	d	file:
SQLITE_IndexCover	./sqlite3/sqlite3.c	/^#define SQLITE_IndexCover /;"	d	file:
SQLITE_IndexSearch	./sqlite3/sqlite3.c	/^#define SQLITE_IndexSearch /;"	d	file:
SQLITE_IndexSort	./sqlite3/sqlite3.c	/^#define SQLITE_IndexSort /;"	d	file:
SQLITE_InternChanges	./sqlite3/sqlite3.c	/^#define SQLITE_InternChanges /;"	d	file:
SQLITE_JUMPIFNULL	./sqlite3/sqlite3.c	/^#define SQLITE_JUMPIFNULL /;"	d	file:
SQLITE_LAST_ERRNO	./sqlite3/include/sqlite3.h	/^#define SQLITE_LAST_ERRNO /;"	d
SQLITE_LAST_ERRNO	./sqlite3/sqlite3.c	/^#define SQLITE_LAST_ERRNO /;"	d	file:
SQLITE_LIMIT_ATTACHED	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_ATTACHED /;"	d
SQLITE_LIMIT_ATTACHED	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_ATTACHED /;"	d	file:
SQLITE_LIMIT_COLUMN	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_COLUMN /;"	d
SQLITE_LIMIT_COLUMN	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_COLUMN /;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d
SQLITE_LIMIT_COMPOUND_SELECT	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_COMPOUND_SELECT /;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d
SQLITE_LIMIT_EXPR_DEPTH	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_EXPR_DEPTH /;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d
SQLITE_LIMIT_FUNCTION_ARG	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_FUNCTION_ARG /;"	d	file:
SQLITE_LIMIT_LENGTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_LENGTH /;"	d
SQLITE_LIMIT_LENGTH	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_LENGTH /;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d
SQLITE_LIMIT_SQL_LENGTH	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_SQL_LENGTH /;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_TRIGGER_DEPTH /;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_VARIABLE_NUMBER /;"	d	file:
SQLITE_LIMIT_VDBE_OP	./sqlite3/include/sqlite3.h	/^#define SQLITE_LIMIT_VDBE_OP /;"	d
SQLITE_LIMIT_VDBE_OP	./sqlite3/sqlite3.c	/^#define SQLITE_LIMIT_VDBE_OP /;"	d	file:
SQLITE_LITTLEENDIAN	./sqlite3/sqlite3.c	/^# define SQLITE_LITTLEENDIAN /;"	d	file:
SQLITE_LOCKED	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCKED /;"	d
SQLITE_LOCKED	./sqlite3/sqlite3.c	/^#define SQLITE_LOCKED /;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d
SQLITE_LOCKED_SHAREDCACHE	./sqlite3/sqlite3.c	/^#define SQLITE_LOCKED_SHAREDCACHE /;"	d	file:
SQLITE_LOCK_EXCLUSIVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d
SQLITE_LOCK_EXCLUSIVE	./sqlite3/sqlite3.c	/^#define SQLITE_LOCK_EXCLUSIVE /;"	d	file:
SQLITE_LOCK_NONE	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCK_NONE /;"	d
SQLITE_LOCK_NONE	./sqlite3/sqlite3.c	/^#define SQLITE_LOCK_NONE /;"	d	file:
SQLITE_LOCK_PENDING	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCK_PENDING /;"	d
SQLITE_LOCK_PENDING	./sqlite3/sqlite3.c	/^#define SQLITE_LOCK_PENDING /;"	d	file:
SQLITE_LOCK_RESERVED	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCK_RESERVED /;"	d
SQLITE_LOCK_RESERVED	./sqlite3/sqlite3.c	/^#define SQLITE_LOCK_RESERVED /;"	d	file:
SQLITE_LOCK_SHARED	./sqlite3/include/sqlite3.h	/^#define SQLITE_LOCK_SHARED /;"	d
SQLITE_LOCK_SHARED	./sqlite3/sqlite3.c	/^#define SQLITE_LOCK_SHARED /;"	d	file:
SQLITE_LegacyFileFmt	./sqlite3/sqlite3.c	/^#define SQLITE_LegacyFileFmt /;"	d	file:
SQLITE_LoadExtension	./sqlite3/sqlite3.c	/^#define SQLITE_LoadExtension /;"	d	file:
SQLITE_MAGIC_BUSY	./sqlite3/sqlite3.c	/^#define SQLITE_MAGIC_BUSY /;"	d	file:
SQLITE_MAGIC_CLOSED	./sqlite3/sqlite3.c	/^#define SQLITE_MAGIC_CLOSED /;"	d	file:
SQLITE_MAGIC_ERROR	./sqlite3/sqlite3.c	/^#define SQLITE_MAGIC_ERROR /;"	d	file:
SQLITE_MAGIC_OPEN	./sqlite3/sqlite3.c	/^#define SQLITE_MAGIC_OPEN /;"	d	file:
SQLITE_MAGIC_SICK	./sqlite3/sqlite3.c	/^#define SQLITE_MAGIC_SICK /;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	./sqlite3/sqlite3.c	/^# define SQLITE_MALLOC_SOFT_LIMIT /;"	d	file:
SQLITE_MAX_ATTACHED	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_ATTACHED /;"	d	file:
SQLITE_MAX_COLUMN	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_COLUMN /;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_COMPOUND_SELECT /;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_DEFAULT_PAGE_SIZE /;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	./sqlite3/sqlite3.c	/^# undef SQLITE_MAX_DEFAULT_PAGE_SIZE$/;"	d	file:
SQLITE_MAX_EXPR_DEPTH	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_EXPR_DEPTH /;"	d	file:
SQLITE_MAX_FILE_FORMAT	./sqlite3/sqlite3.c	/^#define SQLITE_MAX_FILE_FORMAT /;"	d	file:
SQLITE_MAX_FUNCTION_ARG	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_FUNCTION_ARG /;"	d	file:
SQLITE_MAX_LENGTH	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_LENGTH /;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_LIKE_PATTERN_LENGTH /;"	d	file:
SQLITE_MAX_PAGE_COUNT	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_PAGE_COUNT /;"	d	file:
SQLITE_MAX_PAGE_SIZE	./sqlite3/sqlite3.c	/^# undef SQLITE_MAX_PAGE_SIZE$/;"	d	file:
SQLITE_MAX_PAGE_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_MAX_PAGE_SIZE /;"	d	file:
SQLITE_MAX_SQL_LENGTH	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_SQL_LENGTH /;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_TRIGGER_DEPTH /;"	d	file:
SQLITE_MAX_U32	./sqlite3/sqlite3.c	/^#define SQLITE_MAX_U32 /;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_VARIABLE_NUMBER /;"	d	file:
SQLITE_MAX_VDBE_OP	./sqlite3/sqlite3.c	/^# define SQLITE_MAX_VDBE_OP /;"	d	file:
SQLITE_MISMATCH	./sqlite3/include/sqlite3.h	/^#define SQLITE_MISMATCH /;"	d
SQLITE_MISMATCH	./sqlite3/sqlite3.c	/^#define SQLITE_MISMATCH /;"	d	file:
SQLITE_MISUSE	./sqlite3/include/sqlite3.h	/^#define SQLITE_MISUSE /;"	d
SQLITE_MISUSE	./sqlite3/sqlite3.c	/^#define SQLITE_MISUSE /;"	d	file:
SQLITE_MISUSE_BKPT	./sqlite3/sqlite3.c	/^#define SQLITE_MISUSE_BKPT /;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	./sqlite3/sqlite3.c	/^# undef SQLITE_MIXED_ENDIAN_64BIT_FLOAT$/;"	d	file:
SQLITE_MUTEX_FAST	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_FAST /;"	d
SQLITE_MUTEX_FAST	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_FAST /;"	d	file:
SQLITE_MUTEX_NOOP	./sqlite3/sqlite3.c	/^#    define SQLITE_MUTEX_NOOP$/;"	d	file:
SQLITE_MUTEX_NREF	./sqlite3/sqlite3.c	/^# define SQLITE_MUTEX_NREF /;"	d	file:
SQLITE_MUTEX_OMIT	./sqlite3/sqlite3.c	/^# define SQLITE_MUTEX_OMIT$/;"	d	file:
SQLITE_MUTEX_OS2	./sqlite3/sqlite3.c	/^#    define SQLITE_MUTEX_OS2$/;"	d	file:
SQLITE_MUTEX_PTHREADS	./sqlite3/sqlite3.c	/^#    define SQLITE_MUTEX_PTHREADS$/;"	d	file:
SQLITE_MUTEX_RECURSIVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_RECURSIVE /;"	d
SQLITE_MUTEX_RECURSIVE	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_RECURSIVE /;"	d	file:
SQLITE_MUTEX_STATIC_LRU	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d
SQLITE_MUTEX_STATIC_LRU	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU /;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d
SQLITE_MUTEX_STATIC_LRU2	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_LRU2 /;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d
SQLITE_MUTEX_STATIC_MASTER	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MASTER /;"	d	file:
SQLITE_MUTEX_STATIC_MEM	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d
SQLITE_MUTEX_STATIC_MEM	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM /;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d
SQLITE_MUTEX_STATIC_MEM2	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_MEM2 /;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d
SQLITE_MUTEX_STATIC_OPEN	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_OPEN /;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PMEM /;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	./sqlite3/include/sqlite3.h	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d
SQLITE_MUTEX_STATIC_PRNG	./sqlite3/sqlite3.c	/^#define SQLITE_MUTEX_STATIC_PRNG /;"	d	file:
SQLITE_MUTEX_W32	./sqlite3/sqlite3.c	/^#    define SQLITE_MUTEX_W32$/;"	d	file:
SQLITE_NOLFS	./sqlite3/include/sqlite3.h	/^#define SQLITE_NOLFS /;"	d
SQLITE_NOLFS	./sqlite3/sqlite3.c	/^#define SQLITE_NOLFS /;"	d	file:
SQLITE_NOMEM	./sqlite3/include/sqlite3.h	/^#define SQLITE_NOMEM /;"	d
SQLITE_NOMEM	./sqlite3/sqlite3.c	/^#define SQLITE_NOMEM /;"	d	file:
SQLITE_NOTADB	./sqlite3/include/sqlite3.h	/^#define SQLITE_NOTADB /;"	d
SQLITE_NOTADB	./sqlite3/sqlite3.c	/^#define SQLITE_NOTADB /;"	d	file:
SQLITE_NOTFOUND	./sqlite3/include/sqlite3.h	/^#define SQLITE_NOTFOUND /;"	d
SQLITE_NOTFOUND	./sqlite3/sqlite3.c	/^#define SQLITE_NOTFOUND /;"	d	file:
SQLITE_NULL	./sqlite3/include/sqlite3.h	/^#define SQLITE_NULL /;"	d
SQLITE_NULL	./sqlite3/sqlite3.c	/^#define SQLITE_NULL /;"	d	file:
SQLITE_NULLEQ	./sqlite3/sqlite3.c	/^#define SQLITE_NULLEQ /;"	d	file:
SQLITE_N_BTREE_META	./sqlite3/sqlite3.c	/^#define SQLITE_N_BTREE_META /;"	d	file:
SQLITE_N_COLCACHE	./sqlite3/sqlite3.c	/^# define SQLITE_N_COLCACHE /;"	d	file:
SQLITE_N_KEYWORD	./sqlite3/sqlite3.c	/^#define SQLITE_N_KEYWORD /;"	d	file:
SQLITE_N_LIMIT	./sqlite3/sqlite3.c	/^#define SQLITE_N_LIMIT /;"	d	file:
SQLITE_NoReadlock	./sqlite3/sqlite3.c	/^#define SQLITE_NoReadlock /;"	d	file:
SQLITE_NullCallback	./sqlite3/sqlite3.c	/^#define SQLITE_NullCallback /;"	d	file:
SQLITE_OK	./sqlite3/include/sqlite3.h	/^#define SQLITE_OK /;"	d
SQLITE_OK	./sqlite3/sqlite3.c	/^#define SQLITE_OK /;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	./sqlite3/sqlite3.c	/^# define SQLITE_OMIT_DATETIME_FUNCS /;"	d	file:
SQLITE_OMIT_TRACE	./sqlite3/sqlite3.c	/^# define SQLITE_OMIT_TRACE /;"	d	file:
SQLITE_OPEN_AUTOPROXY	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_AUTOPROXY /;"	d
SQLITE_OPEN_AUTOPROXY	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_AUTOPROXY /;"	d	file:
SQLITE_OPEN_CREATE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_CREATE /;"	d
SQLITE_OPEN_CREATE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_CREATE /;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d
SQLITE_OPEN_DELETEONCLOSE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_DELETEONCLOSE /;"	d	file:
SQLITE_OPEN_EXCLUSIVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d
SQLITE_OPEN_EXCLUSIVE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_EXCLUSIVE /;"	d	file:
SQLITE_OPEN_FULLMUTEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_FULLMUTEX /;"	d
SQLITE_OPEN_FULLMUTEX	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_FULLMUTEX /;"	d	file:
SQLITE_OPEN_MAIN_DB	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_MAIN_DB /;"	d
SQLITE_OPEN_MAIN_DB	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_MAIN_DB /;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d
SQLITE_OPEN_MAIN_JOURNAL	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_MAIN_JOURNAL /;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d
SQLITE_OPEN_MASTER_JOURNAL	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_MASTER_JOURNAL /;"	d	file:
SQLITE_OPEN_NOMUTEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_NOMUTEX /;"	d
SQLITE_OPEN_NOMUTEX	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_NOMUTEX /;"	d	file:
SQLITE_OPEN_PRIVATECACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d
SQLITE_OPEN_PRIVATECACHE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_PRIVATECACHE /;"	d	file:
SQLITE_OPEN_READONLY	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_READONLY /;"	d
SQLITE_OPEN_READONLY	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_READONLY /;"	d	file:
SQLITE_OPEN_READWRITE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_READWRITE /;"	d
SQLITE_OPEN_READWRITE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_READWRITE /;"	d	file:
SQLITE_OPEN_SHAREDCACHE	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d
SQLITE_OPEN_SHAREDCACHE	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_SHAREDCACHE /;"	d	file:
SQLITE_OPEN_SUBJOURNAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d
SQLITE_OPEN_SUBJOURNAL	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_SUBJOURNAL /;"	d	file:
SQLITE_OPEN_TEMP_DB	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_TEMP_DB /;"	d
SQLITE_OPEN_TEMP_DB	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_TEMP_DB /;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d
SQLITE_OPEN_TEMP_JOURNAL	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_TEMP_JOURNAL /;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d
SQLITE_OPEN_TRANSIENT_DB	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_TRANSIENT_DB /;"	d	file:
SQLITE_OPEN_WAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_OPEN_WAL /;"	d
SQLITE_OPEN_WAL	./sqlite3/sqlite3.c	/^#define SQLITE_OPEN_WAL /;"	d	file:
SQLITE_OS2_THREADS	./sqlite3/sqlite3.c	/^# define SQLITE_OS2_THREADS /;"	d	file:
SQLITE_OS_OS2	./sqlite3/sqlite3.c	/^#     define SQLITE_OS_OS2 /;"	d	file:
SQLITE_OS_OS2	./sqlite3/sqlite3.c	/^#   define SQLITE_OS_OS2 /;"	d	file:
SQLITE_OS_OS2	./sqlite3/sqlite3.c	/^#   undef SQLITE_OS_OS2$/;"	d	file:
SQLITE_OS_OS2	./sqlite3/sqlite3.c	/^#  define SQLITE_OS_OS2 /;"	d	file:
SQLITE_OS_OTHER	./sqlite3/sqlite3.c	/^#   undef SQLITE_OS_OTHER$/;"	d	file:
SQLITE_OS_OTHER	./sqlite3/sqlite3.c	/^# define SQLITE_OS_OTHER /;"	d	file:
SQLITE_OS_UNIX	./sqlite3/sqlite3.c	/^#     define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_UNIX	./sqlite3/sqlite3.c	/^#   define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_UNIX	./sqlite3/sqlite3.c	/^#   undef SQLITE_OS_UNIX$/;"	d	file:
SQLITE_OS_UNIX	./sqlite3/sqlite3.c	/^#  define SQLITE_OS_UNIX /;"	d	file:
SQLITE_OS_WIN	./sqlite3/sqlite3.c	/^#     define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WIN	./sqlite3/sqlite3.c	/^#   define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WIN	./sqlite3/sqlite3.c	/^#   undef SQLITE_OS_WIN$/;"	d	file:
SQLITE_OS_WIN	./sqlite3/sqlite3.c	/^#  define SQLITE_OS_WIN /;"	d	file:
SQLITE_OS_WINCE	./sqlite3/sqlite3.c	/^# define SQLITE_OS_WINCE /;"	d	file:
SQLITE_OptMask	./sqlite3/sqlite3.c	/^#define SQLITE_OptMask /;"	d	file:
SQLITE_PERM	./sqlite3/include/sqlite3.h	/^#define SQLITE_PERM /;"	d
SQLITE_PERM	./sqlite3/sqlite3.c	/^#define SQLITE_PERM /;"	d	file:
SQLITE_PRAGMA	./sqlite3/include/sqlite3.h	/^#define SQLITE_PRAGMA /;"	d
SQLITE_PRAGMA	./sqlite3/sqlite3.c	/^#define SQLITE_PRAGMA /;"	d	file:
SQLITE_PRINT_BUF_SIZE	./sqlite3/sqlite3.c	/^#   define SQLITE_PRINT_BUF_SIZE /;"	d	file:
SQLITE_PRIVATE	./sqlite3/sqlite3.c	/^# define SQLITE_PRIVATE /;"	d	file:
SQLITE_PROTOCOL	./sqlite3/include/sqlite3.h	/^#define SQLITE_PROTOCOL /;"	d
SQLITE_PROTOCOL	./sqlite3/sqlite3.c	/^#define SQLITE_PROTOCOL /;"	d	file:
SQLITE_PTR_TO_INT	./sqlite3/sqlite3.c	/^# define SQLITE_PTR_TO_INT(/;"	d	file:
SQLITE_PreferBuiltin	./sqlite3/sqlite3.c	/^#define SQLITE_PreferBuiltin /;"	d	file:
SQLITE_QueryFlattener	./sqlite3/sqlite3.c	/^#define SQLITE_QueryFlattener /;"	d	file:
SQLITE_RANGE	./sqlite3/include/sqlite3.h	/^#define SQLITE_RANGE /;"	d
SQLITE_RANGE	./sqlite3/sqlite3.c	/^#define SQLITE_RANGE /;"	d	file:
SQLITE_READ	./sqlite3/include/sqlite3.h	/^#define SQLITE_READ /;"	d
SQLITE_READ	./sqlite3/sqlite3.c	/^#define SQLITE_READ /;"	d	file:
SQLITE_READONLY	./sqlite3/include/sqlite3.h	/^#define SQLITE_READONLY /;"	d
SQLITE_READONLY	./sqlite3/sqlite3.c	/^#define SQLITE_READONLY /;"	d	file:
SQLITE_REINDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_REINDEX /;"	d
SQLITE_REINDEX	./sqlite3/sqlite3.c	/^#define SQLITE_REINDEX /;"	d	file:
SQLITE_ROW	./sqlite3/include/sqlite3.h	/^#define SQLITE_ROW /;"	d
SQLITE_ROW	./sqlite3/sqlite3.c	/^#define SQLITE_ROW /;"	d	file:
SQLITE_ReadUncommitted	./sqlite3/sqlite3.c	/^#define SQLITE_ReadUncommitted /;"	d	file:
SQLITE_RecTriggers	./sqlite3/sqlite3.c	/^#define SQLITE_RecTriggers /;"	d	file:
SQLITE_RecoveryMode	./sqlite3/sqlite3.c	/^#define SQLITE_RecoveryMode /;"	d	file:
SQLITE_ReverseOrder	./sqlite3/sqlite3.c	/^#define SQLITE_ReverseOrder /;"	d	file:
SQLITE_SAVEPOINT	./sqlite3/include/sqlite3.h	/^#define SQLITE_SAVEPOINT /;"	d
SQLITE_SAVEPOINT	./sqlite3/sqlite3.c	/^#define SQLITE_SAVEPOINT /;"	d	file:
SQLITE_SCHEMA	./sqlite3/include/sqlite3.h	/^#define SQLITE_SCHEMA /;"	d
SQLITE_SCHEMA	./sqlite3/sqlite3.c	/^#define SQLITE_SCHEMA /;"	d	file:
SQLITE_SELECT	./sqlite3/include/sqlite3.h	/^#define SQLITE_SELECT /;"	d
SQLITE_SELECT	./sqlite3/sqlite3.c	/^#define SQLITE_SELECT /;"	d	file:
SQLITE_SET_LOCKPROXYFILE	./sqlite3/include/sqlite3.h	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d
SQLITE_SET_LOCKPROXYFILE	./sqlite3/sqlite3.c	/^#define SQLITE_SET_LOCKPROXYFILE /;"	d	file:
SQLITE_SHM_EXCLUSIVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_SHM_EXCLUSIVE /;"	d
SQLITE_SHM_EXCLUSIVE	./sqlite3/sqlite3.c	/^#define SQLITE_SHM_EXCLUSIVE /;"	d	file:
SQLITE_SHM_LOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_SHM_LOCK /;"	d
SQLITE_SHM_LOCK	./sqlite3/sqlite3.c	/^#define SQLITE_SHM_LOCK /;"	d	file:
SQLITE_SHM_NLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_SHM_NLOCK /;"	d
SQLITE_SHM_NLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_SHM_NLOCK /;"	d	file:
SQLITE_SHM_SHARED	./sqlite3/include/sqlite3.h	/^#define SQLITE_SHM_SHARED /;"	d
SQLITE_SHM_SHARED	./sqlite3/sqlite3.c	/^#define SQLITE_SHM_SHARED /;"	d	file:
SQLITE_SHM_UNLOCK	./sqlite3/include/sqlite3.h	/^#define SQLITE_SHM_UNLOCK /;"	d
SQLITE_SHM_UNLOCK	./sqlite3/sqlite3.c	/^#define SQLITE_SHM_UNLOCK /;"	d	file:
SQLITE_SKIP_UTF8	./sqlite3/sqlite3.c	/^#define SQLITE_SKIP_UTF8(/;"	d	file:
SQLITE_SOURCE_ID	./sqlite3/include/sqlite3.h	/^#define SQLITE_SOURCE_ID /;"	d
SQLITE_SOURCE_ID	./sqlite3/sqlite3.c	/^#define SQLITE_SOURCE_ID /;"	d	file:
SQLITE_SO_ASC	./sqlite3/sqlite3.c	/^#define SQLITE_SO_ASC /;"	d	file:
SQLITE_SO_DESC	./sqlite3/sqlite3.c	/^#define SQLITE_SO_DESC /;"	d	file:
SQLITE_STATIC	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATIC /;"	d
SQLITE_STATIC	./sqlite3/sqlite3.c	/^#define SQLITE_STATIC /;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d
SQLITE_STATUS_MALLOC_COUNT	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_COUNT /;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d
SQLITE_STATUS_MALLOC_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_MALLOC_SIZE /;"	d	file:
SQLITE_STATUS_MEMORY_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_MEMORY_USED /;"	d
SQLITE_STATUS_MEMORY_USED	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_MEMORY_USED /;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_OVERFLOW /;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d
SQLITE_STATUS_PAGECACHE_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_SIZE /;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d
SQLITE_STATUS_PAGECACHE_USED	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_PAGECACHE_USED /;"	d	file:
SQLITE_STATUS_PARSER_STACK	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_PARSER_STACK /;"	d
SQLITE_STATUS_PARSER_STACK	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_PARSER_STACK /;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_OVERFLOW /;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d
SQLITE_STATUS_SCRATCH_SIZE	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_SIZE /;"	d	file:
SQLITE_STATUS_SCRATCH_USED	./sqlite3/include/sqlite3.h	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d
SQLITE_STATUS_SCRATCH_USED	./sqlite3/sqlite3.c	/^#define SQLITE_STATUS_SCRATCH_USED /;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	./sqlite3/include/sqlite3.h	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d
SQLITE_STMTSTATUS_AUTOINDEX	./sqlite3/sqlite3.c	/^#define SQLITE_STMTSTATUS_AUTOINDEX /;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	./sqlite3/include/sqlite3.h	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	./sqlite3/sqlite3.c	/^#define SQLITE_STMTSTATUS_FULLSCAN_STEP /;"	d	file:
SQLITE_STMTSTATUS_SORT	./sqlite3/include/sqlite3.h	/^#define SQLITE_STMTSTATUS_SORT /;"	d
SQLITE_STMTSTATUS_SORT	./sqlite3/sqlite3.c	/^#define SQLITE_STMTSTATUS_SORT /;"	d	file:
SQLITE_STOREP2	./sqlite3/sqlite3.c	/^#define SQLITE_STOREP2 /;"	d	file:
SQLITE_SYNC_DATAONLY	./sqlite3/include/sqlite3.h	/^#define SQLITE_SYNC_DATAONLY /;"	d
SQLITE_SYNC_DATAONLY	./sqlite3/sqlite3.c	/^#define SQLITE_SYNC_DATAONLY /;"	d	file:
SQLITE_SYNC_FULL	./sqlite3/include/sqlite3.h	/^#define SQLITE_SYNC_FULL /;"	d
SQLITE_SYNC_FULL	./sqlite3/sqlite3.c	/^#define SQLITE_SYNC_FULL /;"	d	file:
SQLITE_SYNC_NORMAL	./sqlite3/include/sqlite3.h	/^#define SQLITE_SYNC_NORMAL /;"	d
SQLITE_SYNC_NORMAL	./sqlite3/sqlite3.c	/^#define SQLITE_SYNC_NORMAL /;"	d	file:
SQLITE_SYSTEM_MALLOC	./sqlite3/sqlite3.c	/^# define SQLITE_SYSTEM_MALLOC /;"	d	file:
SQLITE_ShortColNames	./sqlite3/sqlite3.c	/^#define SQLITE_ShortColNames /;"	d	file:
SQLITE_SqlTrace	./sqlite3/sqlite3.c	/^#define SQLITE_SqlTrace /;"	d	file:
SQLITE_TEMPNAME_SIZE	./sqlite3/sqlite3.c	/^# define SQLITE_TEMPNAME_SIZE /;"	d	file:
SQLITE_TEMP_FILE_PREFIX	./sqlite3/sqlite3.c	/^# define SQLITE_TEMP_FILE_PREFIX /;"	d	file:
SQLITE_TEMP_STORE	./sqlite3/sqlite3.c	/^# define SQLITE_TEMP_STORE /;"	d	file:
SQLITE_TESTCTRL_ALWAYS	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d
SQLITE_TESTCTRL_ALWAYS	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_ALWAYS /;"	d	file:
SQLITE_TESTCTRL_ASSERT	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_ASSERT /;"	d
SQLITE_TESTCTRL_ASSERT	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_ASSERT /;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS /;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d
SQLITE_TESTCTRL_BITVEC_TEST	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_BITVEC_TEST /;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_FAULT_INSTALL /;"	d	file:
SQLITE_TESTCTRL_FIRST	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_FIRST /;"	d
SQLITE_TESTCTRL_FIRST	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_FIRST /;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d
SQLITE_TESTCTRL_ISKEYWORD	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_ISKEYWORD /;"	d	file:
SQLITE_TESTCTRL_LAST	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_LAST /;"	d
SQLITE_TESTCTRL_LAST	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_LAST /;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_OPTIMIZATIONS /;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d
SQLITE_TESTCTRL_PENDING_BYTE	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_PENDING_BYTE /;"	d	file:
SQLITE_TESTCTRL_PGHDRSZ	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_PGHDRSZ /;"	d
SQLITE_TESTCTRL_PGHDRSZ	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_PGHDRSZ /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d
SQLITE_TESTCTRL_PRNG_RESET	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESET /;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_RESTORE /;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d
SQLITE_TESTCTRL_PRNG_SAVE	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_PRNG_SAVE /;"	d	file:
SQLITE_TESTCTRL_RESERVE	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_RESERVE /;"	d
SQLITE_TESTCTRL_RESERVE	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_RESERVE /;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	./sqlite3/include/sqlite3.h	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	./sqlite3/sqlite3.c	/^#define SQLITE_TESTCTRL_SCRATCHMALLOC /;"	d	file:
SQLITE_TEXT	./sqlite3/include/sqlite3.h	/^# define SQLITE_TEXT /;"	d
SQLITE_TEXT	./sqlite3/include/sqlite3.h	/^# undef SQLITE_TEXT$/;"	d
SQLITE_TEXT	./sqlite3/sqlite3.c	/^# define SQLITE_TEXT /;"	d	file:
SQLITE_TEXT	./sqlite3/sqlite3.c	/^# undef SQLITE_TEXT$/;"	d	file:
SQLITE_THREADSAFE	./sqlite3/sqlite3.c	/^# define SQLITE_THREADSAFE /;"	d	file:
SQLITE_TOOBIG	./sqlite3/include/sqlite3.h	/^#define SQLITE_TOOBIG /;"	d
SQLITE_TOOBIG	./sqlite3/sqlite3.c	/^#define SQLITE_TOOBIG /;"	d	file:
SQLITE_TRANSACTION	./sqlite3/include/sqlite3.h	/^#define SQLITE_TRANSACTION /;"	d
SQLITE_TRANSACTION	./sqlite3/sqlite3.c	/^#define SQLITE_TRANSACTION /;"	d	file:
SQLITE_TRANSIENT	./sqlite3/include/sqlite3.h	/^#define SQLITE_TRANSIENT /;"	d
SQLITE_TRANSIENT	./sqlite3/sqlite3.c	/^#define SQLITE_TRANSIENT /;"	d	file:
SQLITE_UNIX_THREADS	./sqlite3/sqlite3.c	/^# define SQLITE_UNIX_THREADS /;"	d	file:
SQLITE_UPDATE	./sqlite3/include/sqlite3.h	/^#define SQLITE_UPDATE /;"	d
SQLITE_UPDATE	./sqlite3/sqlite3.c	/^#define SQLITE_UPDATE /;"	d	file:
SQLITE_UTF16	./sqlite3/include/sqlite3.h	/^#define SQLITE_UTF16 /;"	d
SQLITE_UTF16	./sqlite3/sqlite3.c	/^#define SQLITE_UTF16 /;"	d	file:
SQLITE_UTF16BE	./sqlite3/include/sqlite3.h	/^#define SQLITE_UTF16BE /;"	d
SQLITE_UTF16BE	./sqlite3/sqlite3.c	/^#define SQLITE_UTF16BE /;"	d	file:
SQLITE_UTF16LE	./sqlite3/include/sqlite3.h	/^#define SQLITE_UTF16LE /;"	d
SQLITE_UTF16LE	./sqlite3/sqlite3.c	/^#define SQLITE_UTF16LE /;"	d	file:
SQLITE_UTF16NATIVE	./sqlite3/sqlite3.c	/^# define SQLITE_UTF16NATIVE /;"	d	file:
SQLITE_UTF16_ALIGNED	./sqlite3/include/sqlite3.h	/^#define SQLITE_UTF16_ALIGNED /;"	d
SQLITE_UTF16_ALIGNED	./sqlite3/sqlite3.c	/^#define SQLITE_UTF16_ALIGNED /;"	d	file:
SQLITE_UTF8	./sqlite3/include/sqlite3.h	/^#define SQLITE_UTF8 /;"	d
SQLITE_UTF8	./sqlite3/sqlite3.c	/^#define SQLITE_UTF8 /;"	d	file:
SQLITE_VERSION	./sqlite3/include/sqlite3.h	/^# undef SQLITE_VERSION$/;"	d
SQLITE_VERSION	./sqlite3/include/sqlite3.h	/^#define SQLITE_VERSION /;"	d
SQLITE_VERSION	./sqlite3/sqlite3.c	/^# undef SQLITE_VERSION$/;"	d	file:
SQLITE_VERSION	./sqlite3/sqlite3.c	/^#define SQLITE_VERSION /;"	d	file:
SQLITE_VERSION_NUMBER	./sqlite3/include/sqlite3.h	/^# undef SQLITE_VERSION_NUMBER$/;"	d
SQLITE_VERSION_NUMBER	./sqlite3/include/sqlite3.h	/^#define SQLITE_VERSION_NUMBER /;"	d
SQLITE_VERSION_NUMBER	./sqlite3/sqlite3.c	/^# undef SQLITE_VERSION_NUMBER$/;"	d	file:
SQLITE_VERSION_NUMBER	./sqlite3/sqlite3.c	/^#define SQLITE_VERSION_NUMBER /;"	d	file:
SQLITE_VdbeListing	./sqlite3/sqlite3.c	/^#define SQLITE_VdbeListing /;"	d	file:
SQLITE_VdbeTrace	./sqlite3/sqlite3.c	/^#define SQLITE_VdbeTrace /;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	./sqlite3/sqlite3.c	/^#define SQLITE_W32_MUTEX_INITIALIZER /;"	d	file:
SQLITE_W32_THREADS	./sqlite3/sqlite3.c	/^# define SQLITE_W32_THREADS /;"	d	file:
SQLITE_WHOLE_FILE_LOCKING	./sqlite3/sqlite3.c	/^#define SQLITE_WHOLE_FILE_LOCKING /;"	d	file:
SQLITE_WSD	./sqlite3/sqlite3.c	/^  #define SQLITE_WSD /;"	d	file:
SQLITE_WriteSchema	./sqlite3/sqlite3.c	/^#define SQLITE_WriteSchema /;"	d	file:
SQL_CONTENT_INSERT	./sqlite3/sqlite3.c	/^#define SQL_CONTENT_INSERT /;"	d	file:
SQL_DELETE_ALL_CONTENT	./sqlite3/sqlite3.c	/^#define SQL_DELETE_ALL_CONTENT /;"	d	file:
SQL_DELETE_ALL_DOCSIZE	./sqlite3/sqlite3.c	/^#define SQL_DELETE_ALL_DOCSIZE /;"	d	file:
SQL_DELETE_ALL_SEGDIR	./sqlite3/sqlite3.c	/^#define SQL_DELETE_ALL_SEGDIR /;"	d	file:
SQL_DELETE_ALL_SEGMENTS	./sqlite3/sqlite3.c	/^#define SQL_DELETE_ALL_SEGMENTS /;"	d	file:
SQL_DELETE_ALL_STAT	./sqlite3/sqlite3.c	/^#define SQL_DELETE_ALL_STAT /;"	d	file:
SQL_DELETE_CONTENT	./sqlite3/sqlite3.c	/^#define SQL_DELETE_CONTENT /;"	d	file:
SQL_DELETE_DOCSIZE	./sqlite3/sqlite3.c	/^#define SQL_DELETE_DOCSIZE /;"	d	file:
SQL_DELETE_SEGDIR_BY_LEVEL	./sqlite3/sqlite3.c	/^#define SQL_DELETE_SEGDIR_BY_LEVEL /;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	./sqlite3/sqlite3.c	/^#define SQL_DELETE_SEGMENTS_RANGE /;"	d	file:
SQL_INSERT_SEGDIR	./sqlite3/sqlite3.c	/^#define SQL_INSERT_SEGDIR /;"	d	file:
SQL_INSERT_SEGMENTS	./sqlite3/sqlite3.c	/^#define SQL_INSERT_SEGMENTS /;"	d	file:
SQL_IS_EMPTY	./sqlite3/sqlite3.c	/^#define SQL_IS_EMPTY /;"	d	file:
SQL_NEXT_SEGMENTS_ID	./sqlite3/sqlite3.c	/^#define SQL_NEXT_SEGMENTS_ID /;"	d	file:
SQL_NEXT_SEGMENT_INDEX	./sqlite3/sqlite3.c	/^#define SQL_NEXT_SEGMENT_INDEX /;"	d	file:
SQL_REPLACE_DOCSIZE	./sqlite3/sqlite3.c	/^#define SQL_REPLACE_DOCSIZE /;"	d	file:
SQL_REPLACE_DOCTOTAL	./sqlite3/sqlite3.c	/^#define SQL_REPLACE_DOCTOTAL /;"	d	file:
SQL_SELECT_ALL_LEVEL	./sqlite3/sqlite3.c	/^#define SQL_SELECT_ALL_LEVEL /;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	./sqlite3/sqlite3.c	/^#define SQL_SELECT_CONTENT_BY_ROWID /;"	d	file:
SQL_SELECT_DOCSIZE	./sqlite3/sqlite3.c	/^#define SQL_SELECT_DOCSIZE /;"	d	file:
SQL_SELECT_DOCTOTAL	./sqlite3/sqlite3.c	/^#define SQL_SELECT_DOCTOTAL /;"	d	file:
SQL_SELECT_LEVEL	./sqlite3/sqlite3.c	/^#define SQL_SELECT_LEVEL /;"	d	file:
SQL_SELECT_LEVEL_COUNT	./sqlite3/sqlite3.c	/^#define SQL_SELECT_LEVEL_COUNT /;"	d	file:
SQL_SELECT_SEGDIR_COUNT_MAX	./sqlite3/sqlite3.c	/^#define SQL_SELECT_SEGDIR_COUNT_MAX /;"	d	file:
SRT_Coroutine	./sqlite3/sqlite3.c	/^#define SRT_Coroutine /;"	d	file:
SRT_Discard	./sqlite3/sqlite3.c	/^#define SRT_Discard /;"	d	file:
SRT_EphemTab	./sqlite3/sqlite3.c	/^#define SRT_EphemTab /;"	d	file:
SRT_Except	./sqlite3/sqlite3.c	/^#define SRT_Except /;"	d	file:
SRT_Exists	./sqlite3/sqlite3.c	/^#define SRT_Exists /;"	d	file:
SRT_Mem	./sqlite3/sqlite3.c	/^#define SRT_Mem /;"	d	file:
SRT_Output	./sqlite3/sqlite3.c	/^#define SRT_Output /;"	d	file:
SRT_Set	./sqlite3/sqlite3.c	/^#define SRT_Set /;"	d	file:
SRT_Table	./sqlite3/sqlite3.c	/^#define SRT_Table /;"	d	file:
SRT_Union	./sqlite3/sqlite3.c	/^#define SRT_Union /;"	d	file:
STRICMP	./sqlite3/sqlite3.c	/^#define STRICMP(/;"	d	file:
STR_FUNCTION	./sqlite3/sqlite3.c	/^#define STR_FUNCTION(/;"	d	file:
SWAP	./sqlite3/sqlite3.c	/^#define SWAP(/;"	d	file:
Savepoint	./sqlite3/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	./sqlite3/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
Schema	./sqlite3/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	./sqlite3/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	./sqlite3/sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	./sqlite3/sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
SegmentNode	./sqlite3/sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	./sqlite3/sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	./sqlite3/sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	./sqlite3/sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	./sqlite3/sqlite3.c	/^struct Select {$/;"	s	file:
Select	./sqlite3/sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	./sqlite3/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	./sqlite3/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SetAttributes	./html/IMG3_HtmlTag.cpp	/^int32_t IMG3_HtmlTag::SetAttributes(char *attrStr, uint32_t length)$/;"	f	class:IMG3_HtmlTag
SetData	./html/IMG3_HtmlTag.cpp	/^int32_t IMG3_HtmlTag::SetData(char *tagData, uint32_t length)$/;"	f	class:IMG3_HtmlTag
SetKeyAndIV	./openssl/IMG3_OpensslInterface.cpp	/^int32_t IMG3_OpensslInterface::SetKeyAndIV(char *newKey, char *newIV)$/;"	f	class:IMG3_OpensslInterface
SetType	./html/IMG3_HtmlTag.cpp	/^int32_t IMG3_HtmlTag::SetType(TagType tagType)$/;"	f	class:IMG3_HtmlTag
SetValue	./html/IMG3_HtmlTag.cpp	/^int32_t IMG3_HtmlTag::SetValue(char *tagValue, uint32_t length)$/;"	f	class:IMG3_HtmlTag
ShmRegion	./sqlite3/sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	./sqlite3/sqlite3.c	/^#define SimulateDiskfullError(/;"	d	file:
SimulateIOError	./sqlite3/sqlite3.c	/^#define SimulateIOError(/;"	d	file:
SimulateIOErrorBenign	./sqlite3/sqlite3.c	/^#define SimulateIOErrorBenign(/;"	d	file:
SizeofArray	./sqlite3/sqlite3.c	/^#define SizeofArray(/;"	d	file:
SnippetFragment	./sqlite3/sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	./sqlite3/sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	./sqlite3/sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	./sqlite3/sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	./sqlite3/sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	./sqlite3/sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	./sqlite3/sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	./sqlite3/sqlite3.c	/^static void SortByDistance($/;"	f	file:
SortTagsById	./html/IMG3_HtmlParser.cpp	/^void IMG3_HtmlParser::SortTagsById()$/;"	f	class:IMG3_HtmlParser
SplitNode	./sqlite3/sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	./sqlite3/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcList	./sqlite3/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	./sqlite3/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	./sqlite3/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
StrAccum	./sqlite3/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	./sqlite3/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	./sqlite3/sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	./sqlite3/sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	./sqlite3/sqlite3.c	/^#define Stringify(/;"	d	file:
SubProgram	./sqlite3/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	./sqlite3/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	./sqlite3/sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	./sqlite3/sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	./sqlite3/sqlite3.c	/^#define TEMP_MASTER_NAME /;"	d	file:
TERM_ANDINFO	./sqlite3/sqlite3.c	/^#define TERM_ANDINFO /;"	d	file:
TERM_CODED	./sqlite3/sqlite3.c	/^#define TERM_CODED /;"	d	file:
TERM_COPIED	./sqlite3/sqlite3.c	/^#define TERM_COPIED /;"	d	file:
TERM_DYNAMIC	./sqlite3/sqlite3.c	/^#define TERM_DYNAMIC /;"	d	file:
TERM_ORINFO	./sqlite3/sqlite3.c	/^#define TERM_ORINFO /;"	d	file:
TERM_OR_OK	./sqlite3/sqlite3.c	/^#define TERM_OR_OK /;"	d	file:
TERM_VIRTUAL	./sqlite3/sqlite3.c	/^#define TERM_VIRTUAL /;"	d	file:
TESTBIT	./sqlite3/sqlite3.c	/^#define TESTBIT(/;"	d	file:
TESTONLY	./sqlite3/sqlite3.c	/^# define TESTONLY(/;"	d	file:
TF_Autoincrement	./sqlite3/sqlite3.c	/^#define TF_Autoincrement /;"	d	file:
TF_Ephemeral	./sqlite3/sqlite3.c	/^#define TF_Ephemeral /;"	d	file:
TF_HasPrimaryKey	./sqlite3/sqlite3.c	/^#define TF_HasPrimaryKey /;"	d	file:
TF_NeedMetadata	./sqlite3/sqlite3.c	/^#define TF_NeedMetadata /;"	d	file:
TF_Readonly	./sqlite3/sqlite3.c	/^#define TF_Readonly /;"	d	file:
TF_Virtual	./sqlite3/sqlite3.c	/^#define TF_Virtual /;"	d	file:
TIMER_ELAPSED	./sqlite3/sqlite3.c	/^#define TIMER_ELAPSED /;"	d	file:
TIMER_END	./sqlite3/sqlite3.c	/^#define TIMER_END /;"	d	file:
TIMER_END	./sqlite3/sqlite3.c	/^#define TIMER_END$/;"	d	file:
TIMER_START	./sqlite3/sqlite3.c	/^#define TIMER_START /;"	d	file:
TIMER_START	./sqlite3/sqlite3.c	/^#define TIMER_START$/;"	d	file:
TK_ABORT	./sqlite3/sqlite3.c	/^#define TK_ABORT /;"	d	file:
TK_ACTION	./sqlite3/sqlite3.c	/^#define TK_ACTION /;"	d	file:
TK_ADD	./sqlite3/sqlite3.c	/^#define TK_ADD /;"	d	file:
TK_AFTER	./sqlite3/sqlite3.c	/^#define TK_AFTER /;"	d	file:
TK_AGG_COLUMN	./sqlite3/sqlite3.c	/^#define TK_AGG_COLUMN /;"	d	file:
TK_AGG_FUNCTION	./sqlite3/sqlite3.c	/^#define TK_AGG_FUNCTION /;"	d	file:
TK_ALL	./sqlite3/sqlite3.c	/^#define TK_ALL /;"	d	file:
TK_ALTER	./sqlite3/sqlite3.c	/^#define TK_ALTER /;"	d	file:
TK_ANALYZE	./sqlite3/sqlite3.c	/^#define TK_ANALYZE /;"	d	file:
TK_AND	./sqlite3/sqlite3.c	/^#define TK_AND /;"	d	file:
TK_ANY	./sqlite3/sqlite3.c	/^#define TK_ANY /;"	d	file:
TK_AS	./sqlite3/sqlite3.c	/^#define TK_AS /;"	d	file:
TK_ASC	./sqlite3/sqlite3.c	/^#define TK_ASC /;"	d	file:
TK_ATTACH	./sqlite3/sqlite3.c	/^#define TK_ATTACH /;"	d	file:
TK_AUTOINCR	./sqlite3/sqlite3.c	/^#define TK_AUTOINCR /;"	d	file:
TK_BEFORE	./sqlite3/sqlite3.c	/^#define TK_BEFORE /;"	d	file:
TK_BEGIN	./sqlite3/sqlite3.c	/^#define TK_BEGIN /;"	d	file:
TK_BETWEEN	./sqlite3/sqlite3.c	/^#define TK_BETWEEN /;"	d	file:
TK_BITAND	./sqlite3/sqlite3.c	/^#define TK_BITAND /;"	d	file:
TK_BITNOT	./sqlite3/sqlite3.c	/^#define TK_BITNOT /;"	d	file:
TK_BITOR	./sqlite3/sqlite3.c	/^#define TK_BITOR /;"	d	file:
TK_BLOB	./sqlite3/sqlite3.c	/^#define TK_BLOB /;"	d	file:
TK_BY	./sqlite3/sqlite3.c	/^#define TK_BY /;"	d	file:
TK_CASCADE	./sqlite3/sqlite3.c	/^#define TK_CASCADE /;"	d	file:
TK_CASE	./sqlite3/sqlite3.c	/^#define TK_CASE /;"	d	file:
TK_CAST	./sqlite3/sqlite3.c	/^#define TK_CAST /;"	d	file:
TK_CHECK	./sqlite3/sqlite3.c	/^#define TK_CHECK /;"	d	file:
TK_COLLATE	./sqlite3/sqlite3.c	/^#define TK_COLLATE /;"	d	file:
TK_COLUMN	./sqlite3/sqlite3.c	/^#define TK_COLUMN /;"	d	file:
TK_COLUMNKW	./sqlite3/sqlite3.c	/^#define TK_COLUMNKW /;"	d	file:
TK_COMMA	./sqlite3/sqlite3.c	/^#define TK_COMMA /;"	d	file:
TK_COMMIT	./sqlite3/sqlite3.c	/^#define TK_COMMIT /;"	d	file:
TK_CONCAT	./sqlite3/sqlite3.c	/^#define TK_CONCAT /;"	d	file:
TK_CONFLICT	./sqlite3/sqlite3.c	/^#define TK_CONFLICT /;"	d	file:
TK_CONSTRAINT	./sqlite3/sqlite3.c	/^#define TK_CONSTRAINT /;"	d	file:
TK_CONST_FUNC	./sqlite3/sqlite3.c	/^#define TK_CONST_FUNC /;"	d	file:
TK_CREATE	./sqlite3/sqlite3.c	/^#define TK_CREATE /;"	d	file:
TK_CTIME_KW	./sqlite3/sqlite3.c	/^#define TK_CTIME_KW /;"	d	file:
TK_DATABASE	./sqlite3/sqlite3.c	/^#define TK_DATABASE /;"	d	file:
TK_DEFAULT	./sqlite3/sqlite3.c	/^#define TK_DEFAULT /;"	d	file:
TK_DEFERRABLE	./sqlite3/sqlite3.c	/^#define TK_DEFERRABLE /;"	d	file:
TK_DEFERRED	./sqlite3/sqlite3.c	/^#define TK_DEFERRED /;"	d	file:
TK_DELETE	./sqlite3/sqlite3.c	/^#define TK_DELETE /;"	d	file:
TK_DESC	./sqlite3/sqlite3.c	/^#define TK_DESC /;"	d	file:
TK_DETACH	./sqlite3/sqlite3.c	/^#define TK_DETACH /;"	d	file:
TK_DISTINCT	./sqlite3/sqlite3.c	/^#define TK_DISTINCT /;"	d	file:
TK_DOT	./sqlite3/sqlite3.c	/^#define TK_DOT /;"	d	file:
TK_DROP	./sqlite3/sqlite3.c	/^#define TK_DROP /;"	d	file:
TK_EACH	./sqlite3/sqlite3.c	/^#define TK_EACH /;"	d	file:
TK_ELSE	./sqlite3/sqlite3.c	/^#define TK_ELSE /;"	d	file:
TK_END	./sqlite3/sqlite3.c	/^#define TK_END /;"	d	file:
TK_END_OF_FILE	./sqlite3/sqlite3.c	/^#define TK_END_OF_FILE /;"	d	file:
TK_EQ	./sqlite3/sqlite3.c	/^#define TK_EQ /;"	d	file:
TK_ESCAPE	./sqlite3/sqlite3.c	/^#define TK_ESCAPE /;"	d	file:
TK_EXCEPT	./sqlite3/sqlite3.c	/^#define TK_EXCEPT /;"	d	file:
TK_EXCLUSIVE	./sqlite3/sqlite3.c	/^#define TK_EXCLUSIVE /;"	d	file:
TK_EXISTS	./sqlite3/sqlite3.c	/^#define TK_EXISTS /;"	d	file:
TK_EXPLAIN	./sqlite3/sqlite3.c	/^#define TK_EXPLAIN /;"	d	file:
TK_FAIL	./sqlite3/sqlite3.c	/^#define TK_FAIL /;"	d	file:
TK_FLOAT	./sqlite3/sqlite3.c	/^#define TK_FLOAT /;"	d	file:
TK_FOR	./sqlite3/sqlite3.c	/^#define TK_FOR /;"	d	file:
TK_FOREIGN	./sqlite3/sqlite3.c	/^#define TK_FOREIGN /;"	d	file:
TK_FROM	./sqlite3/sqlite3.c	/^#define TK_FROM /;"	d	file:
TK_FUNCTION	./sqlite3/sqlite3.c	/^#define TK_FUNCTION /;"	d	file:
TK_GE	./sqlite3/sqlite3.c	/^#define TK_GE /;"	d	file:
TK_GROUP	./sqlite3/sqlite3.c	/^#define TK_GROUP /;"	d	file:
TK_GT	./sqlite3/sqlite3.c	/^#define TK_GT /;"	d	file:
TK_HAVING	./sqlite3/sqlite3.c	/^#define TK_HAVING /;"	d	file:
TK_ID	./sqlite3/sqlite3.c	/^#define TK_ID /;"	d	file:
TK_IF	./sqlite3/sqlite3.c	/^#define TK_IF /;"	d	file:
TK_IGNORE	./sqlite3/sqlite3.c	/^#define TK_IGNORE /;"	d	file:
TK_ILLEGAL	./sqlite3/sqlite3.c	/^#define TK_ILLEGAL /;"	d	file:
TK_IMMEDIATE	./sqlite3/sqlite3.c	/^#define TK_IMMEDIATE /;"	d	file:
TK_IN	./sqlite3/sqlite3.c	/^#define TK_IN /;"	d	file:
TK_INDEX	./sqlite3/sqlite3.c	/^#define TK_INDEX /;"	d	file:
TK_INDEXED	./sqlite3/sqlite3.c	/^#define TK_INDEXED /;"	d	file:
TK_INITIALLY	./sqlite3/sqlite3.c	/^#define TK_INITIALLY /;"	d	file:
TK_INSERT	./sqlite3/sqlite3.c	/^#define TK_INSERT /;"	d	file:
TK_INSTEAD	./sqlite3/sqlite3.c	/^#define TK_INSTEAD /;"	d	file:
TK_INTEGER	./sqlite3/sqlite3.c	/^#define TK_INTEGER /;"	d	file:
TK_INTERSECT	./sqlite3/sqlite3.c	/^#define TK_INTERSECT /;"	d	file:
TK_INTO	./sqlite3/sqlite3.c	/^#define TK_INTO /;"	d	file:
TK_IS	./sqlite3/sqlite3.c	/^#define TK_IS /;"	d	file:
TK_ISNOT	./sqlite3/sqlite3.c	/^#define TK_ISNOT /;"	d	file:
TK_ISNULL	./sqlite3/sqlite3.c	/^#define TK_ISNULL /;"	d	file:
TK_JOIN	./sqlite3/sqlite3.c	/^#define TK_JOIN /;"	d	file:
TK_JOIN_KW	./sqlite3/sqlite3.c	/^#define TK_JOIN_KW /;"	d	file:
TK_KEY	./sqlite3/sqlite3.c	/^#define TK_KEY /;"	d	file:
TK_LE	./sqlite3/sqlite3.c	/^#define TK_LE /;"	d	file:
TK_LIKE_KW	./sqlite3/sqlite3.c	/^#define TK_LIKE_KW /;"	d	file:
TK_LIMIT	./sqlite3/sqlite3.c	/^#define TK_LIMIT /;"	d	file:
TK_LP	./sqlite3/sqlite3.c	/^#define TK_LP /;"	d	file:
TK_LSHIFT	./sqlite3/sqlite3.c	/^#define TK_LSHIFT /;"	d	file:
TK_LT	./sqlite3/sqlite3.c	/^#define TK_LT /;"	d	file:
TK_MATCH	./sqlite3/sqlite3.c	/^#define TK_MATCH /;"	d	file:
TK_MINUS	./sqlite3/sqlite3.c	/^#define TK_MINUS /;"	d	file:
TK_NE	./sqlite3/sqlite3.c	/^#define TK_NE /;"	d	file:
TK_NO	./sqlite3/sqlite3.c	/^#define TK_NO /;"	d	file:
TK_NOT	./sqlite3/sqlite3.c	/^#define TK_NOT /;"	d	file:
TK_NOTNULL	./sqlite3/sqlite3.c	/^#define TK_NOTNULL /;"	d	file:
TK_NULL	./sqlite3/sqlite3.c	/^#define TK_NULL /;"	d	file:
TK_OF	./sqlite3/sqlite3.c	/^#define TK_OF /;"	d	file:
TK_OFFSET	./sqlite3/sqlite3.c	/^#define TK_OFFSET /;"	d	file:
TK_ON	./sqlite3/sqlite3.c	/^#define TK_ON /;"	d	file:
TK_OR	./sqlite3/sqlite3.c	/^#define TK_OR /;"	d	file:
TK_ORDER	./sqlite3/sqlite3.c	/^#define TK_ORDER /;"	d	file:
TK_PLAN	./sqlite3/sqlite3.c	/^#define TK_PLAN /;"	d	file:
TK_PLUS	./sqlite3/sqlite3.c	/^#define TK_PLUS /;"	d	file:
TK_PRAGMA	./sqlite3/sqlite3.c	/^#define TK_PRAGMA /;"	d	file:
TK_PRIMARY	./sqlite3/sqlite3.c	/^#define TK_PRIMARY /;"	d	file:
TK_QUERY	./sqlite3/sqlite3.c	/^#define TK_QUERY /;"	d	file:
TK_RAISE	./sqlite3/sqlite3.c	/^#define TK_RAISE /;"	d	file:
TK_REFERENCES	./sqlite3/sqlite3.c	/^#define TK_REFERENCES /;"	d	file:
TK_REGISTER	./sqlite3/sqlite3.c	/^#define TK_REGISTER /;"	d	file:
TK_REINDEX	./sqlite3/sqlite3.c	/^#define TK_REINDEX /;"	d	file:
TK_RELEASE	./sqlite3/sqlite3.c	/^#define TK_RELEASE /;"	d	file:
TK_REM	./sqlite3/sqlite3.c	/^#define TK_REM /;"	d	file:
TK_RENAME	./sqlite3/sqlite3.c	/^#define TK_RENAME /;"	d	file:
TK_REPLACE	./sqlite3/sqlite3.c	/^#define TK_REPLACE /;"	d	file:
TK_RESTRICT	./sqlite3/sqlite3.c	/^#define TK_RESTRICT /;"	d	file:
TK_ROLLBACK	./sqlite3/sqlite3.c	/^#define TK_ROLLBACK /;"	d	file:
TK_ROW	./sqlite3/sqlite3.c	/^#define TK_ROW /;"	d	file:
TK_RP	./sqlite3/sqlite3.c	/^#define TK_RP /;"	d	file:
TK_RSHIFT	./sqlite3/sqlite3.c	/^#define TK_RSHIFT /;"	d	file:
TK_SAVEPOINT	./sqlite3/sqlite3.c	/^#define TK_SAVEPOINT /;"	d	file:
TK_SELECT	./sqlite3/sqlite3.c	/^#define TK_SELECT /;"	d	file:
TK_SEMI	./sqlite3/sqlite3.c	/^#define TK_SEMI /;"	d	file:
TK_SET	./sqlite3/sqlite3.c	/^#define TK_SET /;"	d	file:
TK_SLASH	./sqlite3/sqlite3.c	/^#define TK_SLASH /;"	d	file:
TK_SPACE	./sqlite3/sqlite3.c	/^#define TK_SPACE /;"	d	file:
TK_STAR	./sqlite3/sqlite3.c	/^#define TK_STAR /;"	d	file:
TK_STRING	./sqlite3/sqlite3.c	/^#define TK_STRING /;"	d	file:
TK_TABLE	./sqlite3/sqlite3.c	/^#define TK_TABLE /;"	d	file:
TK_TEMP	./sqlite3/sqlite3.c	/^#define TK_TEMP /;"	d	file:
TK_THEN	./sqlite3/sqlite3.c	/^#define TK_THEN /;"	d	file:
TK_TO	./sqlite3/sqlite3.c	/^#define TK_TO /;"	d	file:
TK_TO_BLOB	./sqlite3/sqlite3.c	/^#define TK_TO_BLOB /;"	d	file:
TK_TO_INT	./sqlite3/sqlite3.c	/^#define TK_TO_INT /;"	d	file:
TK_TO_NUMERIC	./sqlite3/sqlite3.c	/^#define TK_TO_NUMERIC /;"	d	file:
TK_TO_REAL	./sqlite3/sqlite3.c	/^#define TK_TO_REAL /;"	d	file:
TK_TO_TEXT	./sqlite3/sqlite3.c	/^#define TK_TO_TEXT /;"	d	file:
TK_TRANSACTION	./sqlite3/sqlite3.c	/^#define TK_TRANSACTION /;"	d	file:
TK_TRIGGER	./sqlite3/sqlite3.c	/^#define TK_TRIGGER /;"	d	file:
TK_UMINUS	./sqlite3/sqlite3.c	/^#define TK_UMINUS /;"	d	file:
TK_UNCLOSED_STRING	./sqlite3/sqlite3.c	/^#define TK_UNCLOSED_STRING /;"	d	file:
TK_UNION	./sqlite3/sqlite3.c	/^#define TK_UNION /;"	d	file:
TK_UNIQUE	./sqlite3/sqlite3.c	/^#define TK_UNIQUE /;"	d	file:
TK_UPDATE	./sqlite3/sqlite3.c	/^#define TK_UPDATE /;"	d	file:
TK_UPLUS	./sqlite3/sqlite3.c	/^#define TK_UPLUS /;"	d	file:
TK_USING	./sqlite3/sqlite3.c	/^#define TK_USING /;"	d	file:
TK_VACUUM	./sqlite3/sqlite3.c	/^#define TK_VACUUM /;"	d	file:
TK_VALUES	./sqlite3/sqlite3.c	/^#define TK_VALUES /;"	d	file:
TK_VARIABLE	./sqlite3/sqlite3.c	/^#define TK_VARIABLE /;"	d	file:
TK_VIEW	./sqlite3/sqlite3.c	/^#define TK_VIEW /;"	d	file:
TK_VIRTUAL	./sqlite3/sqlite3.c	/^#define TK_VIRTUAL /;"	d	file:
TK_WHEN	./sqlite3/sqlite3.c	/^#define TK_WHEN /;"	d	file:
TK_WHERE	./sqlite3/sqlite3.c	/^#define TK_WHERE /;"	d	file:
TOKEN	./sqlite3/sqlite3.c	/^#define TOKEN /;"	d	file:
TRACE	./sqlite3/sqlite3.c	/^# define TRACE(/;"	d	file:
TRACE_IDX_INPUTS	./sqlite3/sqlite3.c	/^#define TRACE_IDX_INPUTS(/;"	d	file:
TRACE_IDX_INPUTS	./sqlite3/sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	./sqlite3/sqlite3.c	/^#define TRACE_IDX_OUTPUTS(/;"	d	file:
TRACE_IDX_OUTPUTS	./sqlite3/sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRANS_NONE	./sqlite3/sqlite3.c	/^#define TRANS_NONE /;"	d	file:
TRANS_READ	./sqlite3/sqlite3.c	/^#define TRANS_READ /;"	d	file:
TRANS_WRITE	./sqlite3/sqlite3.c	/^#define TRANS_WRITE /;"	d	file:
TRIGGER_AFTER	./sqlite3/sqlite3.c	/^#define TRIGGER_AFTER /;"	d	file:
TRIGGER_BEFORE	./sqlite3/sqlite3.c	/^#define TRIGGER_BEFORE /;"	d	file:
TYPE_Struct	./sections/include/IMG3_FileSection.h	/^typedef struct TYPE_Struct {$/;"	s
TYPE_Struct	./sections/include/IMG3_FileSection.h	/^}__attribute__((__packed__)) TYPE_Struct;$/;"	t	typeref:struct:TYPE_Struct
TabResult	./sqlite3/sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	./sqlite3/sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	./sqlite3/sqlite3.c	/^struct Table {$/;"	s	file:
Table	./sqlite3/sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	./sqlite3/sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	./sqlite3/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TagIsOfInterest	./html/IMG3_HtmlParser.cpp	/^bool IMG3_HtmlParser::TagIsOfInterest(char *tag)$/;"	f	class:IMG3_HtmlParser
TagType	./html/include/IMG3_HtmlTag.h	/^typedef enum TagType {$/;"	g
TagType	./html/include/IMG3_HtmlTag.h	/^} TagType;$/;"	t	typeref:enum:TagType
TermOffset	./sqlite3/sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	./sqlite3/sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	./sqlite3/sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	./sqlite3/sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	./sqlite3/sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	./sqlite3/sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	./sqlite3/sqlite3.c	/^struct Token {$/;"	s	file:
Token	./sqlite3/sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TrigEvent	./sqlite3/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	./sqlite3/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	./sqlite3/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	./sqlite3/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	./sqlite3/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	./sqlite3/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	./sqlite3/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UINT16_TYPE	./sqlite3/sqlite3.c	/^#  define UINT16_TYPE /;"	d	file:
UINT32_TYPE	./sqlite3/sqlite3.c	/^#  define UINT32_TYPE /;"	d	file:
UINT8_TYPE	./sqlite3/sqlite3.c	/^#  define UINT8_TYPE /;"	d	file:
UNDEFINED_TAG	./html/include/IMG3_HtmlTag.h	/^	UNDEFINED_TAG$/;"	e	enum:TagType
UNIXVFS	./sqlite3/sqlite3.c	/^  #define UNIXVFS(/;"	d	file:
UNIX_SHM_BASE	./sqlite3/sqlite3.c	/^#define UNIX_SHM_BASE /;"	d	file:
UNIX_SHM_DMS	./sqlite3/sqlite3.c	/^#define UNIX_SHM_DMS /;"	d	file:
UNKNOWN_LOCK	./sqlite3/sqlite3.c	/^#define UNKNOWN_LOCK /;"	d	file:
UNPACKED_IGNORE_ROWID	./sqlite3/sqlite3.c	/^#define UNPACKED_IGNORE_ROWID /;"	d	file:
UNPACKED_INCRKEY	./sqlite3/sqlite3.c	/^#define UNPACKED_INCRKEY /;"	d	file:
UNPACKED_NEED_DESTROY	./sqlite3/sqlite3.c	/^#define UNPACKED_NEED_DESTROY /;"	d	file:
UNPACKED_NEED_FREE	./sqlite3/sqlite3.c	/^#define UNPACKED_NEED_FREE /;"	d	file:
UNPACKED_PREFIX_MATCH	./sqlite3/sqlite3.c	/^#define UNPACKED_PREFIX_MATCH /;"	d	file:
UNPACKED_PREFIX_SEARCH	./sqlite3/sqlite3.c	/^#define UNPACKED_PREFIX_SEARCH /;"	d	file:
UNUSED_PARAMETER	./sqlite3/sqlite3.c	/^# define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER	./sqlite3/sqlite3.c	/^#define UNUSED_PARAMETER(/;"	d	file:
UNUSED_PARAMETER2	./sqlite3/sqlite3.c	/^#define UNUSED_PARAMETER2(/;"	d	file:
UPDATE_IMG3_DATABASE	./includes/IMG3_typedefs.h	/^	DECRYPT_IMG3_FILE, UPDATE_IMG3_DATABASE, LIST_ARCHIVE_FILES, EXTRACT_FILE, PATCH_KERNEL$/;"	e	enum:ParserOperation
UPDATE_MAX_BLOBSIZE	./sqlite3/sqlite3.c	/^# define UPDATE_MAX_BLOBSIZE(/;"	d	file:
UnixUnusedFd	./sqlite3/sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	./sqlite3/sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnlockFile	./sqlite3/sqlite3.c	/^#define UnlockFile(/;"	d	file:
UnmapFileFromMemory	./IMG3_Functions.cpp	/^static void UnmapFileFromMemory( uint8_t *data, uint32_t fileSize )$/;"	f	file:
UnpackedRecord	./sqlite3/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	./sqlite3/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpdateDatabase	./sqlite3/IMG3_Sqlite3.cpp	/^int32_t IMG3_Sqlite3::UpdateDatabase(char *device, char *build, char *version, list<DecryptionInfo *> *infoList)$/;"	f	class:IMG3_Sqlite3
UpdateIMG3Database	./IMG3_Functions.cpp	/^int32_t UpdateIMG3Database( char *archiveFileName, char *deviceName, char *deviceVersion, char *deviceBuild )$/;"	f
UpperToLower	./sqlite3/sqlite3.c	/^#define UpperToLower /;"	d	file:
VARIANT_GUTTMAN_LINEAR_SPLIT	./sqlite3/sqlite3.c	/^#define VARIANT_GUTTMAN_LINEAR_SPLIT /;"	d	file:
VARIANT_GUTTMAN_QUADRATIC_SPLIT	./sqlite3/sqlite3.c	/^#define VARIANT_GUTTMAN_QUADRATIC_SPLIT /;"	d	file:
VARIANT_GUTTMAN_SPLIT	./sqlite3/sqlite3.c	/^#define VARIANT_GUTTMAN_SPLIT /;"	d	file:
VARIANT_RSTARTREE_CHOOSESUBTREE	./sqlite3/sqlite3.c	/^#define VARIANT_RSTARTREE_CHOOSESUBTREE /;"	d	file:
VARIANT_RSTARTREE_REINSERT	./sqlite3/sqlite3.c	/^#define VARIANT_RSTARTREE_REINSERT /;"	d	file:
VARIANT_RSTARTREE_SPLIT	./sqlite3/sqlite3.c	/^#define VARIANT_RSTARTREE_SPLIT /;"	d	file:
VDBE_MAGIC_DEAD	./sqlite3/sqlite3.c	/^#define VDBE_MAGIC_DEAD /;"	d	file:
VDBE_MAGIC_HALT	./sqlite3/sqlite3.c	/^#define VDBE_MAGIC_HALT /;"	d	file:
VDBE_MAGIC_INIT	./sqlite3/sqlite3.c	/^#define VDBE_MAGIC_INIT /;"	d	file:
VDBE_MAGIC_RUN	./sqlite3/sqlite3.c	/^#define VDBE_MAGIC_RUN /;"	d	file:
VTable	./sqlite3/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	./sqlite3/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	./sqlite3/sqlite3.c	/^# define VVA_ONLY(/;"	d	file:
Vdbe	./sqlite3/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	./sqlite3/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeComment	./sqlite3/sqlite3.c	/^# define VdbeComment(/;"	d	file:
VdbeCursor	./sqlite3/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	./sqlite3/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	./sqlite3/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	./sqlite3/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	./sqlite3/sqlite3.c	/^#define VdbeFrameMem(/;"	d	file:
VdbeFunc	./sqlite3/sqlite3.c	/^struct VdbeFunc {$/;"	s	file:
VdbeFunc	./sqlite3/sqlite3.c	/^typedef struct VdbeFunc VdbeFunc;$/;"	t	typeref:struct:VdbeFunc	file:
VdbeNoopComment	./sqlite3/sqlite3.c	/^# define VdbeNoopComment(/;"	d	file:
VdbeOp	./sqlite3/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	./sqlite3/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	./sqlite3/sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	./sqlite3/sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	./sqlite3/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	./sqlite3/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
WALINDEX_HDR_SIZE	./sqlite3/sqlite3.c	/^#define WALINDEX_HDR_SIZE /;"	d	file:
WALINDEX_LOCK_OFFSET	./sqlite3/sqlite3.c	/^#define WALINDEX_LOCK_OFFSET /;"	d	file:
WALINDEX_LOCK_RESERVED	./sqlite3/sqlite3.c	/^#define WALINDEX_LOCK_RESERVED /;"	d	file:
WALINDEX_MAX_VERSION	./sqlite3/sqlite3.c	/^#define WALINDEX_MAX_VERSION /;"	d	file:
WALINDEX_PGSZ	./sqlite3/sqlite3.c	/^#define WALINDEX_PGSZ /;"	d	file:
WALTRACE	./sqlite3/sqlite3.c	/^# define WALTRACE(/;"	d	file:
WAL_ALL_BUT_WRITE	./sqlite3/sqlite3.c	/^#define WAL_ALL_BUT_WRITE /;"	d	file:
WAL_CKPT_LOCK	./sqlite3/sqlite3.c	/^#define WAL_CKPT_LOCK /;"	d	file:
WAL_EXCLUSIVE_MODE	./sqlite3/sqlite3.c	/^#define WAL_EXCLUSIVE_MODE /;"	d	file:
WAL_FRAME_HDRSIZE	./sqlite3/sqlite3.c	/^#define WAL_FRAME_HDRSIZE /;"	d	file:
WAL_HDRSIZE	./sqlite3/sqlite3.c	/^#define WAL_HDRSIZE /;"	d	file:
WAL_HEAPMEMORY_MODE	./sqlite3/sqlite3.c	/^#define WAL_HEAPMEMORY_MODE /;"	d	file:
WAL_MAGIC	./sqlite3/sqlite3.c	/^#define WAL_MAGIC /;"	d	file:
WAL_MAX_VERSION	./sqlite3/sqlite3.c	/^#define WAL_MAX_VERSION /;"	d	file:
WAL_NORMAL_MODE	./sqlite3/sqlite3.c	/^#define WAL_NORMAL_MODE /;"	d	file:
WAL_NREADER	./sqlite3/sqlite3.c	/^#define WAL_NREADER /;"	d	file:
WAL_READ_LOCK	./sqlite3/sqlite3.c	/^#define WAL_READ_LOCK(/;"	d	file:
WAL_RECOVER_LOCK	./sqlite3/sqlite3.c	/^#define WAL_RECOVER_LOCK /;"	d	file:
WAL_RETRY	./sqlite3/sqlite3.c	/^#define WAL_RETRY /;"	d	file:
WAL_SAVEPOINT_NDATA	./sqlite3/sqlite3.c	/^#define WAL_SAVEPOINT_NDATA /;"	d	file:
WAL_WRITE_LOCK	./sqlite3/sqlite3.c	/^#define WAL_WRITE_LOCK /;"	d	file:
WHERETRACE	./sqlite3/sqlite3.c	/^# define WHERETRACE(/;"	d	file:
WHERE_BOTH_LIMIT	./sqlite3/sqlite3.c	/^#define WHERE_BOTH_LIMIT /;"	d	file:
WHERE_BTM_LIMIT	./sqlite3/sqlite3.c	/^#define WHERE_BTM_LIMIT /;"	d	file:
WHERE_COLUMN_EQ	./sqlite3/sqlite3.c	/^#define WHERE_COLUMN_EQ /;"	d	file:
WHERE_COLUMN_IN	./sqlite3/sqlite3.c	/^#define WHERE_COLUMN_IN /;"	d	file:
WHERE_COLUMN_NULL	./sqlite3/sqlite3.c	/^#define WHERE_COLUMN_NULL /;"	d	file:
WHERE_COLUMN_RANGE	./sqlite3/sqlite3.c	/^#define WHERE_COLUMN_RANGE /;"	d	file:
WHERE_DUPLICATES_OK	./sqlite3/sqlite3.c	/^#define WHERE_DUPLICATES_OK /;"	d	file:
WHERE_FORCE_TABLE	./sqlite3/sqlite3.c	/^#define WHERE_FORCE_TABLE /;"	d	file:
WHERE_IDX_ONLY	./sqlite3/sqlite3.c	/^#define WHERE_IDX_ONLY /;"	d	file:
WHERE_INDEXED	./sqlite3/sqlite3.c	/^#define WHERE_INDEXED /;"	d	file:
WHERE_IN_ABLE	./sqlite3/sqlite3.c	/^#define WHERE_IN_ABLE /;"	d	file:
WHERE_MULTI_OR	./sqlite3/sqlite3.c	/^#define WHERE_MULTI_OR /;"	d	file:
WHERE_NOT_FULLSCAN	./sqlite3/sqlite3.c	/^#define WHERE_NOT_FULLSCAN /;"	d	file:
WHERE_OMIT_CLOSE	./sqlite3/sqlite3.c	/^#define WHERE_OMIT_CLOSE /;"	d	file:
WHERE_OMIT_OPEN	./sqlite3/sqlite3.c	/^#define WHERE_OMIT_OPEN /;"	d	file:
WHERE_ONEPASS_DESIRED	./sqlite3/sqlite3.c	/^#define WHERE_ONEPASS_DESIRED /;"	d	file:
WHERE_ONETABLE_ONLY	./sqlite3/sqlite3.c	/^#define WHERE_ONETABLE_ONLY /;"	d	file:
WHERE_ORDERBY	./sqlite3/sqlite3.c	/^#define WHERE_ORDERBY /;"	d	file:
WHERE_ORDERBY_MAX	./sqlite3/sqlite3.c	/^#define WHERE_ORDERBY_MAX /;"	d	file:
WHERE_ORDERBY_MIN	./sqlite3/sqlite3.c	/^#define WHERE_ORDERBY_MIN /;"	d	file:
WHERE_ORDERBY_NORMAL	./sqlite3/sqlite3.c	/^#define WHERE_ORDERBY_NORMAL /;"	d	file:
WHERE_REVERSE	./sqlite3/sqlite3.c	/^#define WHERE_REVERSE /;"	d	file:
WHERE_ROWID_EQ	./sqlite3/sqlite3.c	/^#define WHERE_ROWID_EQ /;"	d	file:
WHERE_ROWID_RANGE	./sqlite3/sqlite3.c	/^#define WHERE_ROWID_RANGE /;"	d	file:
WHERE_TEMP_INDEX	./sqlite3/sqlite3.c	/^#define WHERE_TEMP_INDEX /;"	d	file:
WHERE_TOP_LIMIT	./sqlite3/sqlite3.c	/^#define WHERE_TOP_LIMIT /;"	d	file:
WHERE_UNIQUE	./sqlite3/sqlite3.c	/^#define WHERE_UNIQUE /;"	d	file:
WHERE_VIRTUALTABLE	./sqlite3/sqlite3.c	/^#define WHERE_VIRTUALTABLE /;"	d	file:
WINCE_DELETION_ATTEMPTS	./sqlite3/sqlite3.c	/^#define WINCE_DELETION_ATTEMPTS /;"	d	file:
WIN_SHM_BASE	./sqlite3/sqlite3.c	/^#define WIN_SHM_BASE /;"	d	file:
WIN_SHM_DMS	./sqlite3/sqlite3.c	/^#define WIN_SHM_DMS /;"	d	file:
WO_ALL	./sqlite3/sqlite3.c	/^#define WO_ALL /;"	d	file:
WO_AND	./sqlite3/sqlite3.c	/^#define WO_AND /;"	d	file:
WO_EQ	./sqlite3/sqlite3.c	/^#define WO_EQ /;"	d	file:
WO_GE	./sqlite3/sqlite3.c	/^#define WO_GE /;"	d	file:
WO_GT	./sqlite3/sqlite3.c	/^#define WO_GT /;"	d	file:
WO_IN	./sqlite3/sqlite3.c	/^#define WO_IN /;"	d	file:
WO_ISNULL	./sqlite3/sqlite3.c	/^#define WO_ISNULL /;"	d	file:
WO_LE	./sqlite3/sqlite3.c	/^#define WO_LE /;"	d	file:
WO_LT	./sqlite3/sqlite3.c	/^#define WO_LT /;"	d	file:
WO_MATCH	./sqlite3/sqlite3.c	/^#define WO_MATCH /;"	d	file:
WO_OR	./sqlite3/sqlite3.c	/^#define WO_OR /;"	d	file:
WO_SINGLE	./sqlite3/sqlite3.c	/^#define WO_SINGLE /;"	d	file:
WRC_Abort	./sqlite3/sqlite3.c	/^#define WRC_Abort /;"	d	file:
WRC_Continue	./sqlite3/sqlite3.c	/^#define WRC_Continue /;"	d	file:
WRC_Prune	./sqlite3/sqlite3.c	/^#define WRC_Prune /;"	d	file:
WRITE_LOCK	./sqlite3/sqlite3.c	/^#define WRITE_LOCK /;"	d	file:
WRITE_UTF16BE	./sqlite3/sqlite3.c	/^#define WRITE_UTF16BE(/;"	d	file:
WRITE_UTF16LE	./sqlite3/sqlite3.c	/^#define WRITE_UTF16LE(/;"	d	file:
WRITE_UTF8	./sqlite3/sqlite3.c	/^#define WRITE_UTF8(/;"	d	file:
Wal	./sqlite3/sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	./sqlite3/sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	./sqlite3/sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	./sqlite3/sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	./sqlite3/sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	./sqlite3/sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	./sqlite3/sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	./sqlite3/sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	./sqlite3/sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
Walker	./sqlite3/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	./sqlite3/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	./sqlite3/sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	./sqlite3/sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	./sqlite3/sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	./sqlite3/sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereCost	./sqlite3/sqlite3.c	/^struct WhereCost {$/;"	s	file:
WhereCost	./sqlite3/sqlite3.c	/^typedef struct WhereCost WhereCost;$/;"	t	typeref:struct:WhereCost	file:
WhereInfo	./sqlite3/sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	./sqlite3/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	./sqlite3/sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	./sqlite3/sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereMaskSet	./sqlite3/sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	./sqlite3/sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrInfo	./sqlite3/sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	./sqlite3/sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WherePlan	./sqlite3/sqlite3.c	/^struct WherePlan {$/;"	s	file:
WherePlan	./sqlite3/sqlite3.c	/^typedef struct WherePlan WherePlan;$/;"	t	typeref:struct:WherePlan	file:
WhereTerm	./sqlite3/sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	./sqlite3/sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
WriteDataToFile	./IMG3_Functions.cpp	/^static int32_t WriteDataToFile( const char *fileName, uint8_t *data, uint32_t dataLength )$/;"	f	file:
Y	./sqlite3/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	./sqlite3/sqlite3.c	/^#define YYACTIONTYPE /;"	d	file:
YYCODETYPE	./sqlite3/sqlite3.c	/^#define YYCODETYPE /;"	d	file:
YYFALLBACK	./sqlite3/sqlite3.c	/^#define YYFALLBACK /;"	d	file:
YYMINORTYPE	./sqlite3/sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon18	file:
YYNOCODE	./sqlite3/sqlite3.c	/^#define YYNOCODE /;"	d	file:
YYNOERRORRECOVERY	./sqlite3/sqlite3.c	/^#define YYNOERRORRECOVERY /;"	d	file:
YYNRULE	./sqlite3/sqlite3.c	/^#define YYNRULE /;"	d	file:
YYNSTATE	./sqlite3/sqlite3.c	/^#define YYNSTATE /;"	d	file:
YYSTACKDEPTH	./sqlite3/sqlite3.c	/^#define YYSTACKDEPTH /;"	d	file:
YYWILDCARD	./sqlite3/sqlite3.c	/^#define YYWILDCARD /;"	d	file:
YY_ACCEPT_ACTION	./sqlite3/sqlite3.c	/^#define YY_ACCEPT_ACTION /;"	d	file:
YY_ACTTAB_COUNT	./sqlite3/sqlite3.c	/^#define YY_ACTTAB_COUNT /;"	d	file:
YY_ERROR_ACTION	./sqlite3/sqlite3.c	/^#define YY_ERROR_ACTION /;"	d	file:
YY_NO_ACTION	./sqlite3/sqlite3.c	/^#define YY_NO_ACTION /;"	d	file:
YY_REDUCE_COUNT	./sqlite3/sqlite3.c	/^#define YY_REDUCE_COUNT /;"	d	file:
YY_REDUCE_MAX	./sqlite3/sqlite3.c	/^#define YY_REDUCE_MAX /;"	d	file:
YY_REDUCE_MIN	./sqlite3/sqlite3.c	/^#define YY_REDUCE_MIN /;"	d	file:
YY_REDUCE_USE_DFLT	./sqlite3/sqlite3.c	/^#define YY_REDUCE_USE_DFLT /;"	d	file:
YY_SHIFT_COUNT	./sqlite3/sqlite3.c	/^#define YY_SHIFT_COUNT /;"	d	file:
YY_SHIFT_MAX	./sqlite3/sqlite3.c	/^#define YY_SHIFT_MAX /;"	d	file:
YY_SHIFT_MIN	./sqlite3/sqlite3.c	/^#define YY_SHIFT_MIN /;"	d	file:
YY_SHIFT_USE_DFLT	./sqlite3/sqlite3.c	/^#define YY_SHIFT_USE_DFLT /;"	d	file:
ZIP_ASSERT_RET	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ASSERT_RET(/;"	d
ZIP_BUFFER_SIZE	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_BUFFER_SIZE /;"	d
ZIP_CentralDirectoryEnd	./compression/include/IMG3_ZipInterface.h	/^typedef struct ZIP_CentralDirectoryEnd {$/;"	s
ZIP_CentralDirectoryEnd	./compression/include/IMG3_ZipInterface.h	/^}__attribute__((__packed__)) ZIP_CentralDirectoryEnd;$/;"	t	typeref:struct:ZIP_CentralDirectoryEnd
ZIP_CentralDirectoryHeader	./compression/include/IMG3_ZipInterface.h	/^typedef struct ZIP_CentralDirectoryHeader {$/;"	s
ZIP_CentralDirectoryHeader	./compression/include/IMG3_ZipInterface.h	/^}__attribute__((__packed__)) ZIP_CentralDirectoryHeader;$/;"	t	typeref:struct:ZIP_CentralDirectoryHeader
ZIP_ERROR_EXTRACTING_CENTRAL_DIRECTORY_LISTINGS_FAILED	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_EXTRACTING_CENTRAL_DIRECTORY_LISTINGS_FAILED	/;"	d
ZIP_ERROR_INDEX_GREATER_THAN_SIZE	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_INDEX_GREATER_THAN_SIZE	/;"	d
ZIP_ERROR_INVALID_PARAMETER	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_INVALID_PARAMETER	/;"	d
ZIP_ERROR_MALFORMED_LIST	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_MALFORMED_LIST	/;"	d
ZIP_ERROR_NONE	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_NONE	/;"	d
ZIP_ERROR_NOT_A_ZIP_FILE	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_NOT_A_ZIP_FILE	/;"	d
ZIP_ERROR_NO_CENTRAL_DIRECTORY_FOUND	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_NO_CENTRAL_DIRECTORY_FOUND	/;"	d
ZIP_ERROR_SYSTEM	./compression/include/IMG3_ZipInterface.h	/^#define ZIP_ERROR_SYSTEM	/;"	d
ZIP_FileNode	./compression/include/IMG3_ZipInterface.h	/^typedef struct ZIP_FileNode {$/;"	s
ZIP_FileNode	./compression/include/IMG3_ZipInterface.h	/^} ZIP_FileNode;$/;"	t	typeref:struct:ZIP_FileNode
ZIP_LocalHeader	./compression/include/IMG3_ZipInterface.h	/^typedef struct ZIP_LocalHeader {$/;"	s
ZIP_LocalHeader	./compression/include/IMG3_ZipInterface.h	/^}__attribute__((__packed__)) ZIP_LocalHeader;$/;"	t	typeref:struct:ZIP_LocalHeader
_BTREE_H_	./sqlite3/sqlite3.c	/^#define _BTREE_H_$/;"	d	file:
_FILE_OFFSET_BITS	./sqlite3/sqlite3.c	/^#   define _FILE_OFFSET_BITS /;"	d	file:
_FTS3_HASH_H_	./sqlite3/sqlite3.c	/^#define _FTS3_HASH_H_$/;"	d	file:
_FTS3_TOKENIZER_H_	./sqlite3/sqlite3.c	/^#define _FTS3_TOKENIZER_H_$/;"	d	file:
_FTSINT_H	./sqlite3/sqlite3.c	/^#define _FTSINT_H$/;"	d	file:
_GNU_SOURCE	./sqlite3/sqlite3.c	/^# define _GNU_SOURCE$/;"	d	file:
_HWTIME_H_	./sqlite3/sqlite3.c	/^#define _HWTIME_H_$/;"	d	file:
_LARGEFILE_SOURCE	./sqlite3/sqlite3.c	/^# define _LARGEFILE_SOURCE /;"	d	file:
_LARGE_FILE	./sqlite3/sqlite3.c	/^# define _LARGE_FILE /;"	d	file:
_OS_COMMON_H_	./sqlite3/sqlite3.c	/^#define _OS_COMMON_H_$/;"	d	file:
_OvflCell	./sqlite3/sqlite3.c	/^  struct _OvflCell {   \/* Cells that will not fit on aData[] *\/$/;"	s	struct:MemPage	file:
_PAGER_H_	./sqlite3/sqlite3.c	/^#define _PAGER_H_$/;"	d	file:
_SHM_RDLCK	./sqlite3/sqlite3.c	/^#define _SHM_RDLCK /;"	d	file:
_SHM_UNLCK	./sqlite3/sqlite3.c	/^#define _SHM_UNLCK /;"	d	file:
_SHM_WRLCK	./sqlite3/sqlite3.c	/^#define _SHM_WRLCK /;"	d	file:
_SQLITE3EXT_H_	./sqlite3/include/sqlite3ext.h	/^#define _SQLITE3EXT_H_$/;"	d
_SQLITE3EXT_H_	./sqlite3/sqlite3.c	/^#define _SQLITE3EXT_H_$/;"	d	file:
_SQLITE3RTREE_H_	./sqlite3/include/sqlite3.h	/^#define _SQLITE3RTREE_H_$/;"	d
_SQLITE3RTREE_H_	./sqlite3/sqlite3.c	/^#define _SQLITE3RTREE_H_$/;"	d	file:
_SQLITE3_H_	./sqlite3/include/sqlite3.h	/^#define _SQLITE3_H_$/;"	d
_SQLITE3_H_	./sqlite3/sqlite3.c	/^#define _SQLITE3_H_$/;"	d	file:
_SQLITEINT_H_	./sqlite3/sqlite3.c	/^#define _SQLITEINT_H_$/;"	d	file:
_SQLITE_HASH_H_	./sqlite3/sqlite3.c	/^#define _SQLITE_HASH_H_$/;"	d	file:
_SQLITE_OS_C_	./sqlite3/sqlite3.c	/^#define _SQLITE_OS_C_ /;"	d	file:
_SQLITE_OS_C_	./sqlite3/sqlite3.c	/^#undef _SQLITE_OS_C_$/;"	d	file:
_SQLITE_OS_H_	./sqlite3/sqlite3.c	/^#define _SQLITE_OS_H_$/;"	d	file:
_SQLITE_VDBE_H_	./sqlite3/sqlite3.c	/^#define _SQLITE_VDBE_H_$/;"	d	file:
_VDBEINT_H_	./sqlite3/sqlite3.c	/^#define _VDBEINT_H_$/;"	d	file:
_WAL_H_	./sqlite3/sqlite3.c	/^#define _WAL_H_$/;"	d	file:
_XOPEN_SOURCE	./sqlite3/sqlite3.c	/^#  define _XOPEN_SOURCE /;"	d	file:
__IMG3_DEFINES_H	./includes/IMG3_defines.h	/^#define __IMG3_DEFINES_H$/;"	d
__IMG3_FUNCTIONS_H_	./includes/IMG3_Functions.h	/^#define __IMG3_FUNCTIONS_H_$/;"	d
__IMG3_GEN_INCLUDES_H_	./includes/IMG3_includes.h	/^#define __IMG3_GEN_INCLUDES_H_$/;"	d
__IMG3_GEN_TYPEDEFS_H_	./includes/IMG3_typedefs.h	/^#define __IMG3_GEN_TYPEDEFS_H_$/;"	d
__IMG3_SQLITE_H_	./sqlite3/include/IMG3_Sqlite3.h	/^#define __IMG3_SQLITE_H_$/;"	d
__declspec	./sqlite3/sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
_fts3ht	./sqlite3/sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	./sqlite3/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_posixUnlock	./sqlite3/sqlite3.c	/^static int _posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
a	./sqlite3/sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	./sqlite3/sqlite3.c	/^  WhereLevel a[1];               \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	./sqlite3/sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	./sqlite3/sqlite3.c	/^  } *a;                  \/* One entry for each expression *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	./sqlite3/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	./sqlite3/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	./sqlite3/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	./sqlite3/sqlite3.c	/^  u8 aAction[2];          \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAlias	./sqlite3/sqlite3.c	/^  int *aAlias;         \/* Register used to hold aliased result *\/$/;"	m	struct:Parse	file:
aBitmap	./sqlite3/sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon16	file:
aBtree	./sqlite3/sqlite3.c	/^  Btree *aBtree[SQLITE_MAX_ATTACHED+1];$/;"	m	struct:BtreeMutexArray	file:
aChar	./sqlite3/sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	./sqlite3/sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	./sqlite3/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	./sqlite3/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	./sqlite3/sqlite3.c	/^  } aCol[1];        \/* One entry for each of nCol column s *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	./sqlite3/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	./sqlite3/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	./sqlite3/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	./sqlite3/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	./sqlite3/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	./sqlite3/include/sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraint	./sqlite3/sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	./sqlite3/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	./sqlite3/include/sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aConstraintUsage	./sqlite3/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	./sqlite3/sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];$/;"	m	struct:RtreeCell	file:
aCounter	./sqlite3/sqlite3.c	/^  int aCounter[3];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	./sqlite3/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	./sqlite3/sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	./sqlite3/sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	./sqlite3/sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	./sqlite3/sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDb	./sqlite3/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	./sqlite3/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	./sqlite3/sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	./sqlite3/sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	./sqlite3/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	./sqlite3/sqlite3.c	/^  char *aDoclist;            \/* Buffer containing doclist *\/$/;"	m	struct:Fts3Expr	file:
aEntry	./sqlite3/sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aExt	./sqlite3/sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	./sqlite3/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFrameCksum	./sqlite3/sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	./sqlite3/sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	./sqlite3/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	./sqlite3/sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	./sqlite3/sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon16	file:
aHash	./sqlite3/sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	./sqlite3/sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon7::__anon8	typeref:struct:WhereLevel::__anon7::__anon8::InLoop	file:
aIndex	./sqlite3/sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aJournalMagic	./sqlite3/sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aLabel	./sqlite3/sqlite3.c	/^  int *aLabel;            \/* Space to hold the labels *\/$/;"	m	struct:Vdbe	file:
aLimit	./sqlite3/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aMatchinfo	./sqlite3/sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	./sqlite3/sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	./sqlite3/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	./sqlite3/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	./sqlite3/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aModule	./sqlite3/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aMutex	./sqlite3/sqlite3.c	/^  BtreeMutexArray aMutex; \/* An array of Btree used here and needing locks *\/$/;"	m	struct:Vdbe	file:
aNode	./sqlite3/sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aOffset	./sqlite3/sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	./sqlite3/sqlite3.c	/^  u32 *aOffset;         \/* Cached offsets to the start of each columns data *\/$/;"	m	struct:VdbeCursor	file:
aOp	./sqlite3/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	./sqlite3/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	./sqlite3/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	./sqlite3/include/sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aOrderBy	./sqlite3/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	./sqlite3/sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aOvfl	./sqlite3/sqlite3.c	/^  } aOvfl[5];$/;"	m	struct:MemPage	typeref:struct:MemPage::_OvflCell	file:
aPadding	./sqlite3/sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	./sqlite3/include/sqlite3.h	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
aParam	./sqlite3/sqlite3.c	/^  double *aParam;                 \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aParam	./sqlite3/sqlite3.c	/^  double aParam[1];$/;"	m	struct:RtreeMatchArg	file:
aPgno	./sqlite3/sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	./sqlite3/sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPool	./sqlite3/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPrefix	./sqlite3/sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	./sqlite3/sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aRegion	./sqlite3/sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	./sqlite3/sqlite3.c	/^  u8 *aRow;             \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aSalt	./sqlite3/sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	./sqlite3/sqlite3.c	/^  IndexSample *aSample;    \/* Array of SQLITE_INDEX_SAMPLES samples *\/$/;"	m	struct:Index	file:
aSavepoint	./sqlite3/sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aSegment	./sqlite3/sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	./sqlite3/sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	./sqlite3/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column.  May be NULL *\/$/;"	m	struct:KeyInfo	file:
aSortOrder	./sqlite3/sqlite3.c	/^  u8 *aSortOrder;  \/* Array of size Index.nColumn. True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aStatic	./sqlite3/sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	./sqlite3/sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	./sqlite3/sqlite3.c	/^  sqlite3_stmt *aStmt[24];$/;"	m	struct:Fts3Table	file:
aTableLock	./sqlite3/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTempReg	./sqlite3/sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	./sqlite3/sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	./sqlite3/sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aType	./sqlite3/sqlite3.c	/^  u32 *aType;           \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	./sqlite3/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	./sqlite3/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	./sqlite3/sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	./sqlite3/sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffer *\/$/;"	m	struct:TermSelect	file:
absFunc	./sqlite3/sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accessPayload	./sqlite3/sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	./sqlite3/sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
activeVdbeCnt	./sqlite3/sqlite3.c	/^  int activeVdbeCnt;            \/* Number of VDBEs currently executing *\/$/;"	m	struct:sqlite3	file:
addAggInfoColumn	./sqlite3/sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	./sqlite3/sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	./sqlite3/sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	./sqlite3/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	./sqlite3/sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	./sqlite3/sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	./sqlite3/sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	./sqlite3/sqlite3.c	/^static int addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	./sqlite3/sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBrk	./sqlite3/sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	./sqlite3/sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrFirst	./sqlite3/sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	./sqlite3/sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon7::__anon8::InLoop	file:
addrNxt	./sqlite3/sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	./sqlite3/sqlite3.c	/^  int addrOpenEphm[3];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
adjustStats	./sqlite3/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
aes_type	./sections/include/IMG3_FileSection.h	/^  uint32_t  aes_type;$/;"	m	struct:KBAG_Struct
affinity	./sqlite3/sqlite3.c	/^  char affinity;         \/* MakeRecord with this affinity for SRT_Set *\/$/;"	m	struct:Select	file:
affinity	./sqlite3/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	./sqlite3/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
affinity	./sqlite3/sqlite3.c	/^  u8 affinity;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
afpCheckReservedLock	./sqlite3/sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	./sqlite3/sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	./sqlite3/sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	./sqlite3/sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	./sqlite3/sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	./sqlite3/sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	./sqlite3/sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	./sqlite3/sqlite3.c	/^#define afpfsByteRangeLock2FSCTL /;"	d	file:
aggregate_context	./sqlite3/include/sqlite3ext.h	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines
aggregate_context	./sqlite3/sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	./sqlite3/include/sqlite3ext.h	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
aggregate_count	./sqlite3/sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	./sqlite3/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:
aiColumn	./sqlite3/sqlite3.c	/^  int *aiColumn;   \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiFreelist	./sqlite3/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	./sqlite3/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	./sqlite3/sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiRowEst	./sqlite3/sqlite3.c	/^  unsigned *aiRowEst; \/* Result of ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	./sqlite3/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	./sqlite3/sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	./sqlite3/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	./sqlite3/sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	./sqlite3/sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	./sqlite3/sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	./sqlite3/sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	./sqlite3/sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	./sqlite3/sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	./sqlite3/sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	./sqlite3/sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	./sqlite3/sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowAgg	./sqlite3/sqlite3.c	/^  u8 allowAgg;         \/* Aggregate functions allowed here *\/$/;"	m	struct:NameContext	file:
allowedOp	./sqlite3/sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
anOutput	./sqlite3/sqlite3.c	/^  int anOutput[16];               \/* Size of output in bytes *\/$/;"	m	struct:TermSelect	file:
anRef	./sqlite3/sqlite3.c	/^  int *anRef;       \/* Number of times each page is referenced *\/$/;"	m	struct:IntegrityCk	file:
anStat	./sqlite3/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	./sqlite3/sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	./sqlite3/sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	./sqlite3/sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	./sqlite3/sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	./sqlite3/sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	./sqlite3/sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	./sqlite3/sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	./sqlite3/sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab){$/;"	f	file:
apArg	./sqlite3/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apAux	./sqlite3/sqlite3.c	/^  } apAux[1];                   \/* One slot for each function argument *\/$/;"	m	struct:VdbeFunc	typeref:struct:VdbeFunc::AuxData	file:
apCsr	./sqlite3/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	./sqlite3/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	./sqlite3/sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apPage	./sqlite3/sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	./sqlite3/sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	./sqlite3/sqlite3.c	/^  Fts3SegReader *apSegment[1];    \/* Array of seg-reader objects *\/$/;"	m	struct:Fts3SegReaderArray	file:
apSub	./sqlite3/sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon16	file:
apSub	./sqlite3/sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	./sqlite3/sqlite3.c	/^  Trigger *apTrigger[2];  \/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVarExpr	./sqlite3/sqlite3.c	/^  Expr **apVarExpr;    \/* Pointers to :aaa and $aaaa wildcard expressions *\/$/;"	m	struct:Parse	file:
apVtabLock	./sqlite3/sqlite3.c	/^  Table **apVtabLock;        \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	./sqlite3/sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
appendSpace	./sqlite3/sqlite3.c	/^static void appendSpace(StrAccum *pAccum, int N){$/;"	f	file:
applyAffinity	./sqlite3/sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	./sqlite3/sqlite3.c	/^static void applyNumericAffinity(Mem *pRec){$/;"	f	file:
approx	./sqlite3/sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
archiveFileName	./IMG3_Main.cpp	/^char *archiveFileName = NULL;$/;"	v
argvIndex	./sqlite3/include/sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
argvIndex	./sqlite3/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
assemblePage	./sqlite3/sqlite3.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	./sqlite3/sqlite3.c	/^  #define assertCellInfo(/;"	d	file:
assertCellInfo	./sqlite3/sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertMutexHeld	./sqlite3/sqlite3.c	/^#define assertMutexHeld(/;"	d	file:
assertParentIndex	./sqlite3/sqlite3.c	/^#  define assertParentIndex(/;"	d	file:
assertParentIndex	./sqlite3/sqlite3.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertTruncateConstraint	./sqlite3/sqlite3.c	/^# define assertTruncateConstraint(/;"	d	file:
assertTruncateConstraint	./sqlite3/sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraintCb	./sqlite3/sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	./sqlite3/sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atFirst	./sqlite3/sqlite3.c	/^  Bool atFirst;         \/* True if pointing to first entry *\/$/;"	m	struct:VdbeCursor	file:
atLast	./sqlite3/sqlite3.c	/^  u8 atLast;                \/* Cursor pointing to the last entry *\/$/;"	m	struct:BtCursor	file:
attachBackupObject	./sqlite3/sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	./sqlite3/sqlite3.c	/^static void attachFunc($/;"	f	file:
attrs	./html/include/IMG3_HtmlTag.h	/^	list<pair<char*, char*> >	attrs;$/;"	m	class:IMG3_HtmlTag
autoCommit	./sqlite3/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	./sqlite3/sqlite3.c	/^# define autoIncBegin(/;"	d	file:
autoIncBegin	./sqlite3/sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncStep	./sqlite3/sqlite3.c	/^# define autoIncStep(/;"	d	file:
autoIncStep	./sqlite3/sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIndex	./sqlite3/sqlite3.c	/^  u8 autoIndex;    \/* True if is automatically created (ex: by UNIQUE) *\/$/;"	m	struct:Index	file:
autoVacuum	./sqlite3/sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	./sqlite3/sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
autolockIoFinder	./sqlite3/sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	./sqlite3/sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	./sqlite3/sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	./sqlite3/sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	./sqlite3/sqlite3.c	/^  char **azColl;   \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	./sqlite3/sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	./sqlite3/sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	./sqlite3/sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	./sqlite3/sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	./sqlite3/sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	./sqlite3/sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	./sqlite3/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bCoreMutex	./sqlite3/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDestLocked	./sqlite3/sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bEnabled	./sqlite3/sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bExclusive	./sqlite3/sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFullMutex	./sqlite3/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bFulltext	./sqlite3/sqlite3.c	/^  int bFulltext;                  \/* True if full-text index was used *\/$/;"	m	struct:Fts3PhraseToken	file:
bHasDocsize	./sqlite3/sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	./sqlite3/sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists *\/$/;"	m	struct:Fts3Table	file:
bMalloced	./sqlite3/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	./sqlite3/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bPending	./sqlite3/sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPurgeable	./sqlite3/sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	./sqlite3/sqlite3.c	/^  int bPurgeable;                     \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bReserved	./sqlite3/sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bUnderPressure	./sqlite3/sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
backtrace	./sqlite3/sqlite3.c	/^# define backtrace(/;"	d	file:
backtrace_symbols_fd	./sqlite3/sqlite3.c	/^# define backtrace_symbols_fd(/;"	d	file:
backupOnePage	./sqlite3/sqlite3.c	/^static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){$/;"	f	file:
backupTruncateFile	./sqlite3/sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	./sqlite3/sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	./sqlite3/sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	./sqlite3/sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	./sqlite3/sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	./sqlite3/sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	./sqlite3/sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	./sqlite3/sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	./sqlite3/sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	./sqlite3/sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	./sqlite3/sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Rtree	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	./sqlite3/sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:RtreeCursor	file:
bestAutomaticIndex	./sqlite3/sqlite3.c	/^# define bestAutomaticIndex(/;"	d	file:
bestAutomaticIndex	./sqlite3/sqlite3.c	/^static void bestAutomaticIndex($/;"	f	file:
bestBtreeIndex	./sqlite3/sqlite3.c	/^static void bestBtreeIndex($/;"	f	file:
bestIndex	./sqlite3/sqlite3.c	/^static void bestIndex($/;"	f	file:
bestOrClauseIndex	./sqlite3/sqlite3.c	/^static void bestOrClauseIndex($/;"	f	file:
bestVirtualIndex	./sqlite3/sqlite3.c	/^static void bestVirtualIndex($/;"	f	file:
bigEndCksum	./sqlite3/sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	./sqlite3/sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	./sqlite3/sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	./sqlite3/sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	./sqlite3/sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_blob	./sqlite3/sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_double	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines
bind_double	./sqlite3/sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bind_int	./sqlite3/sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
bind_int64	./sqlite3/sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_null	./sqlite3/sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
bind_parameter_count	./sqlite3/sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines
bind_parameter_index	./sqlite3/sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	./sqlite3/include/sqlite3ext.h	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
bind_parameter_name	./sqlite3/sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_text	./sqlite3/sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
bind_text16	./sqlite3/sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_value	./sqlite3/include/sqlite3ext.h	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
bind_value	./sqlite3/sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	./sqlite3/include/sqlite3ext.h	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines
bind_zeroblob	./sqlite3/sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blobReadWrite	./sqlite3/sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	./sqlite3/sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	./sqlite3/include/sqlite3ext.h	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_bytes	./sqlite3/sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	./sqlite3/include/sqlite3ext.h	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines
blob_close	./sqlite3/sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	./sqlite3/include/sqlite3ext.h	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);$/;"	m	struct:sqlite3_api_routines
blob_open	./sqlite3/sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);$/;"	m	struct:sqlite3_api_routines	file:
blob_read	./sqlite3/include/sqlite3ext.h	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines
blob_read	./sqlite3/sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	./sqlite3/include/sqlite3ext.h	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines
blob_write	./sqlite3/sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
btreeClearHasContent	./sqlite3/sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	./sqlite3/sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	./sqlite3/sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	./sqlite3/sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	./sqlite3/sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	./sqlite3/sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	./sqlite3/sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	./sqlite3/sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	./sqlite3/sqlite3.c	/^#define btreeIntegrity(/;"	d	file:
btreeInvokeBusyHandler	./sqlite3/sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeMask	./sqlite3/sqlite3.c	/^  int btreeMask;          \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	./sqlite3/sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreePageFromDbPage	./sqlite3/sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	./sqlite3/sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	./sqlite3/sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	./sqlite3/sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	./sqlite3/sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeRestoreCursorPosition	./sqlite3/sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	./sqlite3/sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
buffer	./compression/include/IMG3_ZipInterface.h	/^	char buffer[ZIP_BUFFER_SIZE+1];$/;"	m	class:IMG3_ZipInterface
busy	./sqlite3/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	./sqlite3/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	./sqlite3/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	./sqlite3/include/sqlite3ext.h	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines
busy_handler	./sqlite3/sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	./sqlite3/include/sqlite3ext.h	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines
busy_timeout	./sqlite3/sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cType	./sqlite3/sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	./sqlite3/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	./sqlite3/sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	./sqlite3/sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	./sqlite3/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedRowid	./sqlite3/sqlite3.c	/^  sqlite3_int64 cachedRowid; \/* Next rowid cache.  0 means not valid *\/$/;"	m	struct:BtCursor	file:
callCollNeeded	./sqlite3/sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	./sqlite3/sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
cdateFunc	./sqlite3/sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	./sqlite3/sqlite3.c	/^static float cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	./sqlite3/sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	./sqlite3/sqlite3.c	/^static float cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	./sqlite3/sqlite3.c	/^static float cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	./sqlite3/sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	./sqlite3/sqlite3.c	/^static float cellOverlap($/;"	f	file:
cellOverlapEnlargement	./sqlite3/sqlite3.c	/^static float cellOverlapEnlargement($/;"	f	file:
cellSize	./sqlite3/sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	./sqlite3/sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	./sqlite3/sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
centralDirectoryDisk	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	centralDirectoryDisk;$/;"	m	struct:ZIP_CentralDirectoryEnd
centralDirectoryNumOnDisk	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	centralDirectoryNumOnDisk;$/;"	m	struct:ZIP_CentralDirectoryEnd
centralDirectoryOffset	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	centralDirectoryOffset;$/;"	m	struct:ZIP_CentralDirectoryEnd
centralDirectorySize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	centralDirectorySize;$/;"	m	struct:ZIP_CentralDirectoryEnd
centralDirectoryTotalNum	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	centralDirectoryTotalNum;$/;"	m	struct:ZIP_CentralDirectoryEnd
certOffset	./sections/include/IMG3_FileSection.h	/^  uint32_t  certOffset;$/;"	m	struct:IMG3_Struct
chain	./sqlite3/sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	./sqlite3/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	./sqlite3/sqlite3.c	/^  u8 changeCntOn;         \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	./sqlite3/sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	./sqlite3/sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	./sqlite3/include/sqlite3ext.h	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
changes	./sqlite3/sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	./sqlite3/sqlite3.c	/^static void changes($/;"	f	file:
charMap	./sqlite3/sqlite3.c	/^# define charMap(/;"	d	file:
charset	./sqlite3/sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	./sqlite3/sqlite3.c	/^#define checkActiveVdbeCnt(/;"	d	file:
checkActiveVdbeCnt	./sqlite3/sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkAppendMsg	./sqlite3/sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	./sqlite3/sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	./sqlite3/sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	./sqlite3/sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	./sqlite3/sqlite3.c	/^# define checkListProperties(/;"	d	file:
checkListProperties	./sqlite3/sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkPage	./sqlite3/sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	./sqlite3/sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkRef	./sqlite3/sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){$/;"	f	file:
checkSavepointCount	./sqlite3/sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	./sqlite3/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	./sqlite3/sqlite3.c	/^static int checkTreePage($/;"	f	file:
checksum	./compression/include/IMG3_LzssInterface.h	/^    uint32_t checksum;$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
childPtrSize	./sqlite3/sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	./sqlite3/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	./sqlite3/sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	./sqlite3/sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	./sqlite3/sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	./sqlite3/sqlite3.c	/^  #define clearAllSharedCacheTableLocks(/;"	d	file:
clearAllSharedCacheTableLocks	./sqlite3/sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearCell	./sqlite3/sqlite3.c	/^static int clearCell(MemPage *pPage, unsigned char *pCell){$/;"	f	file:
clearDatabasePage	./sqlite3/sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	./sqlite3/sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	./sqlite3/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	./sqlite3/include/sqlite3ext.h	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
clear_bindings	./sqlite3/sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	./sqlite3/include/sqlite3ext.h	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
close	./sqlite3/sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	./sqlite3/sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	./sqlite3/sqlite3.c	/^static int closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	./sqlite3/sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
closingTags	./html/include/IMG3_HtmlParser.h	/^	list<HtmlTagNode *> closingTags;$/;"	m	class:IMG3_HtmlParser
cnt	./sqlite3/sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	./sqlite3/sqlite3.c	/^  int cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
cnt	./sqlite3/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
codeAllEqualityTerms	./sqlite3/sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	./sqlite3/sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	./sqlite3/sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	./sqlite3/sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	./sqlite3/sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	./sqlite3/sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	./sqlite3/sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	./sqlite3/sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	./sqlite3/sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	./sqlite3/sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	./sqlite3/sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	./sqlite3/sqlite3.c	/^  #define codeTableLocks(/;"	d	file:
codeTableLocks	./sqlite3/sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTriggerProgram	./sqlite3/sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
colNamesSet	./sqlite3/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	./sqlite3/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	./sqlite3/sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	./sqlite3/include/sqlite3ext.h	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));$/;"	m	struct:sqlite3_api_routines
collation_needed	./sqlite3/sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	./sqlite3/include/sqlite3ext.h	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));$/;"	m	struct:sqlite3_api_routines
collation_needed16	./sqlite3/sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	./sqlite3/sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	./sqlite3/sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	./sqlite3/sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	./sqlite3/sqlite3.c	/^static const void *columnName($/;"	f	file:
columnType	./sqlite3/sqlite3.c	/^static const char *columnType($/;"	f	file:
column_blob	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_blob	./sqlite3/sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	./sqlite3/include/sqlite3ext.h	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes	./sqlite3/sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	./sqlite3/include/sqlite3ext.h	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_bytes16	./sqlite3/sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	./sqlite3/include/sqlite3ext.h	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
column_count	./sqlite3/sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	./sqlite3/include/sqlite3ext.h	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_database_name	./sqlite3/sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_database_name16	./sqlite3/sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	./sqlite3/include/sqlite3ext.h	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines
column_decltype	./sqlite3/sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_decltype16	./sqlite3/sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	./sqlite3/include/sqlite3ext.h	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_double	./sqlite3/sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	./sqlite3/include/sqlite3ext.h	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int	./sqlite3/sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	./sqlite3/include/sqlite3ext.h	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_int64	./sqlite3/sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	./sqlite3/include/sqlite3ext.h	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_name	./sqlite3/sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_name16	./sqlite3/sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	./sqlite3/include/sqlite3ext.h	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name	./sqlite3/sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_origin_name16	./sqlite3/sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	./sqlite3/include/sqlite3ext.h	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name	./sqlite3/sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines
column_table_name16	./sqlite3/sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	./sqlite3/include/sqlite3ext.h	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_text	./sqlite3/sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	./sqlite3/include/sqlite3ext.h	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_text16	./sqlite3/sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	./sqlite3/include/sqlite3ext.h	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_type	./sqlite3/sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	./sqlite3/include/sqlite3ext.h	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines
column_value	./sqlite3/sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
comment	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*comment;$/;"	m	struct:ZIP_CentralDirectoryEnd
commentLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	commentLength;$/;"	m	struct:ZIP_CentralDirectoryEnd
commit_hook	./sqlite3/include/sqlite3ext.h	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
commit_hook	./sqlite3/sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	./sqlite3/sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	./sqlite3/sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	./sqlite3/sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	./sqlite3/sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	./sqlite3/sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	./sqlite3/sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	./sqlite3/sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	./sqlite3/include/sqlite3ext.h	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines
complete	./sqlite3/sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	./sqlite3/include/sqlite3ext.h	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines
complete16	./sqlite3/sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
completeTags	./html/include/IMG3_HtmlParser.h	/^	list<pair<HtmlTagNode *,HtmlTagNode *> > completeTags;$/;"	m	class:IMG3_HtmlParser
compressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	compressedSize;$/;"	m	struct:ZIP_CentralDirectoryHeader
compressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	compressedSize;$/;"	m	struct:ZIP_FileNode
compressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	compressedSize;$/;"	m	struct:ZIP_LocalHeader
compressionMethod	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	compressionMethod;$/;"	m	struct:ZIP_CentralDirectoryHeader
compressionMethod	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	compressionMethod;$/;"	m	struct:ZIP_LocalHeader
compression_type	./compression/include/IMG3_LzssInterface.h	/^    uint32_t compression_type;$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
computeHMS	./sqlite3/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	./sqlite3/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	./sqlite3/sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeYMD	./sqlite3/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	./sqlite3/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	./sqlite3/sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	./sqlite3/sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	./sqlite3/sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
constructAutomaticIndex	./sqlite3/sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	./sqlite3/sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	./sqlite3/include/sqlite3ext.h	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
context_db_handle	./sqlite3/sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCpPathToUtf8	./sqlite3/sqlite3.c	/^char *convertCpPathToUtf8( const char *in ){$/;"	f
convertUtf8Filename	./sqlite3/sqlite3.c	/^static void *convertUtf8Filename(const char *zFilename){$/;"	f	file:
convertUtf8PathToCp	./sqlite3/sqlite3.c	/^static char *convertUtf8PathToCp( const char *in ){$/;"	f	file:
cookieGoto	./sqlite3/sqlite3.c	/^  int cookieGoto;      \/* Address of OP_Goto to cookie verifier subroutine *\/$/;"	m	struct:Parse	file:
cookieMask	./sqlite3/sqlite3.c	/^  u32 cookieMask;      \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	./sqlite3/sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	./sqlite3/sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	./sqlite3/sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	./sqlite3/sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	./sqlite3/sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	./sqlite3/sqlite3.c	/^static void corruptSchema($/;"	f	file:
count	./sqlite3/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	./sqlite3/sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	./sqlite3/sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	./sqlite3/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	./sqlite3/sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	./sqlite3/sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countWriteCursors	./sqlite3/sqlite3.c	/^static int countWriteCursors(BtShared *pBt){$/;"	f	file:
covered	./sqlite3/sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
crc32	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	crc32;$/;"	m	struct:ZIP_CentralDirectoryHeader
crc32	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	crc32;$/;"	m	struct:ZIP_LocalHeader
createCollation	./sqlite3/sqlite3.c	/^static int createCollation($/;"	f	file:
createFile	./sqlite3/sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	./sqlite3/sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	./sqlite3/sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	./sqlite3/sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
createVarMap	./sqlite3/sqlite3.c	/^static void createVarMap(Vdbe *p){$/;"	f	file:
create_collation	./sqlite3/include/sqlite3ext.h	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines
create_collation	./sqlite3/sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	./sqlite3/include/sqlite3ext.h	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines
create_collation16	./sqlite3/sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	./sqlite3/include/sqlite3ext.h	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));$/;"	m	struct:sqlite3_api_routines
create_collation_v2	./sqlite3/sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
create_function	./sqlite3/include/sqlite3ext.h	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines
create_function	./sqlite3/sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines	file:
create_function16	./sqlite3/include/sqlite3ext.h	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines
create_function16	./sqlite3/sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	./sqlite3/sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*),void(*xDestroy)(void*));$/;"	m	struct:sqlite3_api_routines	file:
create_module	./sqlite3/include/sqlite3ext.h	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines
create_module	./sqlite3/sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	./sqlite3/include/sqlite3ext.h	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));$/;"	m	struct:sqlite3_api_routines
create_module_v2	./sqlite3/sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));$/;"	m	struct:sqlite3_api_routines	file:
ctimeFunc	./sqlite3/sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	./sqlite3/sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
currentCount	./sqlite3/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	./sqlite3/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	./sqlite3/sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	./sqlite3/sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	./sqlite3/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	./html/include/IMG3_HtmlTag.h	/^	char						*data;$/;"	m	class:IMG3_HtmlTag
data	./sections/include/IMG3_FileSection.h	/^	uint8_t				*data;$/;"	m	class:IMG3_FileSection
data	./sections/include/IMG3_FileSection.h	/^  uint32_t  data;$/;"	m	struct:SEPO_Struct
data	./sections/include/IMG3_FileSection.h	/^  uint32_t  data;$/;"	m	struct:TYPE_Struct
data	./sections/include/IMG3_FileSection.h	/^  uint8_t   *data;$/;"	m	struct:CERT_Struct
data	./sections/include/IMG3_FileSection.h	/^  uint8_t   *data;$/;"	m	struct:DATA_Struct
data	./sections/include/IMG3_FileSection.h	/^  uint8_t   *data;$/;"	m	struct:SHSH_Struct
data	./sqlite3/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	./sqlite3/sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
dataAddress	./html/include/IMG3_HtmlTag.h	/^	char						*dataAddress;$/;"	m	class:IMG3_HtmlTag
dataLength	./sections/include/IMG3_FileSection.h	/^	uint32_t			dataLength;$/;"	m	class:IMG3_FileSection
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:CERT_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:DATA_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:IMG3_Generic_Header
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:IMG3_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:KBAG_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:SEPO_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:SHSH_Struct
dataLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  dataLength;$/;"	m	struct:TYPE_Struct
data_count	./sqlite3/include/sqlite3ext.h	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
data_count	./sqlite3/sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
dateFunc	./sqlite3/sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	./sqlite3/sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	./sqlite3/include/IMG3_Sqlite3.h	/^	sqlite3 *db;$/;"	m	class:IMG3_Sqlite3
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon9	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	./sqlite3/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	./sqlite3/sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	./sqlite3/sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	./sqlite3/sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOrigSize	./sqlite3/sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	./sqlite3/sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	./sqlite3/sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	./sqlite3/sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	./sqlite3/sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	./sqlite3/sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	./sqlite3/include/sqlite3ext.h	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
db_handle	./sqlite3/sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	./sqlite3/sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
debugMutexAlloc	./sqlite3/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	./sqlite3/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	./sqlite3/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	./sqlite3/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	./sqlite3/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	./sqlite3/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	./sqlite3/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	./sqlite3/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	./sqlite3/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	./sqlite3/sqlite3.c	/^  u8 declareVtab;            \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	./sqlite3/include/sqlite3ext.h	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines
declare_vtab	./sqlite3/sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	./sqlite3/sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decryptionInfo	./IMG3_Main.cpp	/^list<DecryptionInfo *> *decryptionInfo;$/;"	v
decryptionList	./html/include/IMG3_HtmlParser.h	/^	list<DecryptionInfo *> decryptionList;$/;"	m	class:IMG3_HtmlParser
deferredMoveto	./sqlite3/sqlite3.c	/^  Bool deferredMoveto;  \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	./sqlite3/sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	./sqlite3/sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	./sqlite3/sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	./sqlite3/include/sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
desc	./sqlite3/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
descendToCell	./sqlite3/sqlite3.c	/^static int descendToCell($/;"	f	file:
deserializeGeometry	./sqlite3/sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	./sqlite3/sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	./sqlite3/sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	./sqlite3/sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	./sqlite3/sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceBuild	./IMG3_Main.cpp	/^char *deviceBuild = NULL;$/;"	v
deviceName	./IMG3_Main.cpp	/^char *deviceName = NULL;$/;"	v
deviceVersion	./IMG3_Main.cpp	/^char *deviceVersion = NULL;$/;"	v
dfltLockMode	./sqlite3/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	./sqlite3/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
dirfd	./sqlite3/sqlite3.c	/^  int dirfd;                          \/* File descriptor for the directory *\/$/;"	m	struct:unixFile	file:
disableTerm	./sqlite3/sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	./sqlite3/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	./sqlite3/sqlite3.c	/^# define disable_simulated_io_errors(/;"	d	file:
disable_simulated_io_errors	./sqlite3/sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disallow	./sqlite3/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon12	file:
displayP4	./sqlite3/sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
doNotSpill	./sqlite3/sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doNotSyncSpill	./sqlite3/sqlite3.c	/^  u8 doNotSyncSpill;          \/* Do not do a spill that requires jrnl sync *\/$/;"	m	struct:Pager	file:
doNotUseWAL	./sqlite3/sqlite3.c	/^  u8 doNotUseWAL;       \/* If true, do not open write-ahead-log file *\/$/;"	m	struct:BtShared	file:
doSqlite3Free	./sqlite3/sqlite3.c	/^static void doSqlite3Free(void *p){$/;"	f	file:
doWalCallbacks	./sqlite3/sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
done	./sqlite3/sqlite3.c	/^    u8 done;               \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
dotlockCheckReservedLock	./sqlite3/sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	./sqlite3/sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	./sqlite3/sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	./sqlite3/sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	./sqlite3/include/sqlite3.h	/^# define double /;"	d
double	./sqlite3/include/sqlite3.h	/^# undef double$/;"	d
double	./sqlite3/sqlite3.c	/^# define double /;"	d	file:
double	./sqlite3/sqlite3.c	/^# undef double$/;"	d	file:
doubleConsonant	./sqlite3/sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	./sqlite3/sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	./sqlite3/sqlite3.c	/^  #define downgradeAllSharedCacheTableLocks(/;"	d	file:
downgradeAllSharedCacheTableLocks	./sqlite3/sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
dropCell	./sqlite3/sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dup8bytes	./sqlite3/sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	./sqlite3/sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	./sqlite3/sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	./sqlite3/sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCoordType	./sqlite3/sqlite3.c	/^  int eCoordType;$/;"	m	struct:Rtree	file:
eDest	./sqlite3/sqlite3.c	/^  u8 eDest;         \/* How to dispose of the results *\/$/;"	m	struct:SelectDest	file:
eEvalmode	./sqlite3/sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFileLock	./sqlite3/sqlite3.c	/^  int eFileLock;                  \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eFileLock	./sqlite3/sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eLock	./sqlite3/sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	./sqlite3/sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	./sqlite3/sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	./sqlite3/sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	./sqlite3/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eSearch	./sqlite3/sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	./sqlite3/sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	./sqlite3/sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTriggerOp	./sqlite3/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	./sqlite3/sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	./sqlite3/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	./sqlite3/sqlite3.c	/^  u8 eType;         \/* SQLITE_NULL, SQLITE_INTEGER ... etc. *\/$/;"	m	struct:IndexSample	file:
ebcdicToAscii	./sqlite3/sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
enable_shared_cache	./sqlite3/include/sqlite3ext.h	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines
enable_shared_cache	./sqlite3/sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	./sqlite3/sqlite3.c	/^# define enable_simulated_io_errors(/;"	d	file:
enable_simulated_io_errors	./sqlite3/sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enc	./sqlite3/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	./sqlite3/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	./sqlite3/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	./sqlite3/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
encode_state	./compression/include/IMG3_LzssInterface.h	/^struct encode_state {$/;"	s
endpoint	./sqlite3/sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enterMutex	./sqlite3/sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
errCode	./sqlite3/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	./sqlite3/sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errMask	./sqlite3/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	./sqlite3/sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	./sqlite3/include/sqlite3ext.h	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines
errcode	./sqlite3/sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errmsg	./sqlite3/include/sqlite3ext.h	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errmsg	./sqlite3/sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	./sqlite3/include/sqlite3ext.h	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
errmsg16	./sqlite3/sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	./sqlite3/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errorCode	./compression/include/IMG3_ZipInterface.h	/^	int32_t errorCode;$/;"	m	class:IMG3_ZipInterface
estLog	./sqlite3/sqlite3.c	/^static double estLog(double N){$/;"	f	file:
estimatedCost	./sqlite3/include/sqlite3.h	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
estimatedCost	./sqlite3/sqlite3.c	/^  double estimatedCost;      \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
etBUFSIZE	./sqlite3/sqlite3.c	/^#define etBUFSIZE /;"	d	file:
etByte	./sqlite3/sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	./sqlite3/sqlite3.c	/^#define etCHARX /;"	d	file:
etDYNSTRING	./sqlite3/sqlite3.c	/^#define etDYNSTRING /;"	d	file:
etEXP	./sqlite3/sqlite3.c	/^#define etEXP /;"	d	file:
etFLOAT	./sqlite3/sqlite3.c	/^#define etFLOAT /;"	d	file:
etGENERIC	./sqlite3/sqlite3.c	/^#define etGENERIC /;"	d	file:
etINVALID	./sqlite3/sqlite3.c	/^#define etINVALID /;"	d	file:
etORDINAL	./sqlite3/sqlite3.c	/^#define etORDINAL /;"	d	file:
etPERCENT	./sqlite3/sqlite3.c	/^#define etPERCENT /;"	d	file:
etPOINTER	./sqlite3/sqlite3.c	/^#define etPOINTER /;"	d	file:
etRADIX	./sqlite3/sqlite3.c	/^#define etRADIX /;"	d	file:
etSIZE	./sqlite3/sqlite3.c	/^#define etSIZE /;"	d	file:
etSQLESCAPE	./sqlite3/sqlite3.c	/^#define etSQLESCAPE /;"	d	file:
etSQLESCAPE2	./sqlite3/sqlite3.c	/^#define etSQLESCAPE2 /;"	d	file:
etSQLESCAPE3	./sqlite3/sqlite3.c	/^#define etSQLESCAPE3 /;"	d	file:
etSRCLIST	./sqlite3/sqlite3.c	/^#define etSRCLIST /;"	d	file:
etSTRING	./sqlite3/sqlite3.c	/^#define etSTRING /;"	d	file:
etTOKEN	./sqlite3/sqlite3.c	/^#define etTOKEN /;"	d	file:
et_getdigit	./sqlite3/sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	./sqlite3/sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	./sqlite3/sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evalConstExpr	./sqlite3/sqlite3.c	/^static int evalConstExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exclMask	./sqlite3/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	./sqlite3/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	./sqlite3/sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	./sqlite3/sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	./sqlite3/sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	./sqlite3/include/sqlite3ext.h	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines
exec	./sqlite3/sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	./sqlite3/sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	./sqlite3/sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expandBlob	./sqlite3/sqlite3.c	/^#define expandBlob(/;"	d	file:
expensive_assert	./sqlite3/sqlite3.c	/^# define expensive_assert(/;"	d	file:
expired	./sqlite3/include/sqlite3ext.h	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
expired	./sqlite3/sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	./sqlite3/sqlite3.c	/^  u8 expired;             \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
explain	./sqlite3/sqlite3.c	/^  u8 explain;             \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	./sqlite3/sqlite3.c	/^  u8 explain;          \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	./sqlite3/sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	./sqlite3/sqlite3.c	/^# define explainComposite(/;"	d	file:
explainComposite	./sqlite3/sqlite3.c	/^static void explainComposite($/;"	f	file:
explainIndexRange	./sqlite3/sqlite3.c	/^static char *explainIndexRange(sqlite3 *db, WhereLevel *pLevel, Table *pTab){$/;"	f	file:
explainOneScan	./sqlite3/sqlite3.c	/^# define explainOneScan(/;"	d	file:
explainOneScan	./sqlite3/sqlite3.c	/^static void explainOneScan($/;"	f	file:
explainSetInteger	./sqlite3/sqlite3.c	/^# define explainSetInteger(/;"	d	file:
explainTempTable	./sqlite3/sqlite3.c	/^# define explainTempTable(/;"	d	file:
explainTempTable	./sqlite3/sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
expmask	./sqlite3/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAnalyze	./sqlite3/sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	./sqlite3/sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	./sqlite3/sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	./sqlite3/sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	./sqlite3/sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	./sqlite3/sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	./sqlite3/sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	./sqlite3/sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	./sqlite3/sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprSelectTableUsage	./sqlite3/sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	./sqlite3/sqlite3.c	/^  #define exprSetHeight(/;"	d	file:
exprSetHeight	./sqlite3/sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprStructSize	./sqlite3/sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableUsage	./sqlite3/sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToString	./sqlite3/sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	./sqlite3/sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	./sqlite3/sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	./sqlite3/include/sqlite3ext.h	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines
extended_result_codes	./sqlite3/sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
externalFileAttr	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	externalFileAttr;$/;"	m	struct:ZIP_CentralDirectoryHeader
extra	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*extra;$/;"	m	struct:ZIP_CentralDirectoryHeader
extra	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*extra;$/;"	m	struct:ZIP_LocalHeader
extraFieldLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	extraFieldLength;$/;"	m	struct:ZIP_CentralDirectoryHeader
extraFieldLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	extraFieldLength;$/;"	m	struct:ZIP_LocalHeader
f	./sqlite3/sqlite3.c	/^  float f;$/;"	m	union:RtreeCoord	file:
fcntl	./sqlite3/sqlite3.c	/^# define fcntl(/;"	d	file:
fcntl	./sqlite3/sqlite3.c	/^#define fcntl /;"	d	file:
fcntlSizeHint	./sqlite3/sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	./IMG3_Functions.cpp	/^static int fd = 0;$/;"	v	file:
fd	./compression/include/IMG3_ZipInterface.h	/^	FILE *fd;$/;"	m	class:IMG3_ZipInterface
fd	./sqlite3/sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	./sqlite3/sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	./sqlite3/sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	./sqlite3/sqlite3.c	/^# define fdatasync /;"	d	file:
fetchPayload	./sqlite3/sqlite3.c	/^static const unsigned char *fetchPayload($/;"	f	file:
fileComment	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*fileComment;$/;"	m	struct:ZIP_CentralDirectoryHeader
fileCommentLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	fileCommentLength;$/;"	m	struct:ZIP_CentralDirectoryHeader
fileFlags	./sqlite3/sqlite3.c	/^  int fileFlags;                      \/* Miscellanous flags *\/$/;"	m	struct:unixFile	file:
fileHeaderOffset	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	fileHeaderOffset;$/;"	m	struct:ZIP_CentralDirectoryHeader
fileId	./sqlite3/sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
fileName	./compression/include/IMG3_ZipInterface.h	/^	char 		*fileName;$/;"	m	struct:ZIP_FileNode
fileName	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*fileName;$/;"	m	struct:ZIP_CentralDirectoryHeader
fileName	./compression/include/IMG3_ZipInterface.h	/^	uint8_t		*fileName;$/;"	m	struct:ZIP_LocalHeader
fileNameLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	fileNameLength;$/;"	m	struct:ZIP_CentralDirectoryHeader
fileNameLength	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	fileNameLength;$/;"	m	struct:ZIP_LocalHeader
file_control	./sqlite3/include/sqlite3ext.h	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines
file_control	./sqlite3/sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	./sqlite3/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
files	./compression/include/IMG3_ZipInterface.h	/^	list<char *> files;$/;"	m	class:IMG3_ZipInterface
fillInCell	./sqlite3/sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	./sqlite3/sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
finalize	./sqlite3/include/sqlite3ext.h	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
finalize	./sqlite3/sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	./sqlite3/sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	./sqlite3/sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	./sqlite3/sqlite3.c	/^#define findCell(/;"	d	file:
findCollSeqEntry	./sqlite3/sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	./sqlite3/sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementGivenHash	./sqlite3/sqlite3.c	/^static HashElem *findElementGivenHash($/;"	f	file:
findInodeInfo	./sqlite3/sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	./sqlite3/sqlite3.c	/^static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){$/;"	f	file:
findNextHostParameter	./sqlite3/sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	./sqlite3/sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	./sqlite3/sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findTerm	./sqlite3/sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	./sqlite3/sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	./sqlite3/sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	./sqlite3/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	./sqlite3/sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	./sqlite3/sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	./sqlite3/sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkLookupParent	./sqlite3/sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkScanChildren	./sqlite3/sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	./sqlite3/sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	./sqlite3/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flagPragma	./sqlite3/sqlite3.c	/^static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){$/;"	f	file:
flags	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	flags;$/;"	m	struct:ZIP_CentralDirectoryHeader
flags	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	flags;$/;"	m	struct:ZIP_LocalHeader
flags	./sqlite3/sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	./sqlite3/sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	./sqlite3/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	./sqlite3/sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	./sqlite3/sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	./sqlite3/sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	./sqlite3/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	./sqlite3/sqlite3.c	/^  u16 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	./sqlite3/sqlite3.c	/^  u16 flags;           \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
flags	./sqlite3/sqlite3.c	/^  u16 flags;          \/* Boolean settings.  UNPACKED_... below *\/$/;"	m	struct:UnpackedRecord	file:
flags	./sqlite3/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	./sqlite3/sqlite3.c	/^  u8 flags;            \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
flags2	./sqlite3/sqlite3.c	/^  u8 flags2;             \/* Second set of flags.  EP2_... *\/$/;"	m	struct:Expr	file:
flattenSubquery	./sqlite3/sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	./sqlite3/sqlite3.c	/^# define float /;"	d	file:
floatSwap	./sqlite3/sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	./sqlite3/sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	./sqlite3/sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	./sqlite3/sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	./sqlite3/sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	./sqlite3/sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	./sqlite3/sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	./sqlite3/include/sqlite3ext.h	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines
free	./sqlite3/sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	./sqlite3/sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	./sqlite3/sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	./sqlite3/sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	./sqlite3/sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	./sqlite3/sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	./sqlite3/sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	./sqlite3/sqlite3.c	/^static int freeSpace(MemPage *pPage, int start, int size){$/;"	f	file:
freeTempSpace	./sqlite3/sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
freeUconvObjects	./sqlite3/sqlite3.c	/^static void freeUconvObjects( void ){$/;"	f	file:
free_table	./sqlite3/include/sqlite3ext.h	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines
free_table	./sqlite3/sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	./sqlite3/sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	./sqlite3/sqlite3.c	/^static int fts3AllocateSegdirIdx(Fts3Table *p, int iLevel, int *piIdx){$/;"	f	file:
fts3BeginMethod	./sqlite3/sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	./sqlite3/sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	./sqlite3/sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	./sqlite3/sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	./sqlite3/sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3CloseMethod	./sqlite3/sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	./sqlite3/sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	./sqlite3/sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	./sqlite3/sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	./sqlite3/sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	./sqlite3/sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	./sqlite3/sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	./sqlite3/sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3CreateMethod	./sqlite3/sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	./sqlite3/sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	./sqlite3/sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3DatabasePageSize	./sqlite3/sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	./sqlite3/sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	./sqlite3/sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	./sqlite3/sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeferExpression	./sqlite3/sqlite3.c	/^static int fts3DeferExpression(Fts3Cursor *pCsr, Fts3Expr *pExpr){$/;"	f	file:
fts3DeferredDoclistClear	./sqlite3/sqlite3.c	/^static void fts3DeferredDoclistClear(Fts3Expr *pExpr){$/;"	f	file:
fts3DeferredTermSelect	./sqlite3/sqlite3.c	/^static int fts3DeferredTermSelect($/;"	f	file:
fts3DeleteAll	./sqlite3/sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p){$/;"	f	file:
fts3DeleteSegdir	./sqlite3/sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteTerms	./sqlite3/sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	./sqlite3/sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	./sqlite3/sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoclistCountDocids	./sqlite3/sqlite3.c	/^static int fts3DoclistCountDocids(int isPoslist, char *aList, int nList){$/;"	f	file:
fts3DoclistMerge	./sqlite3/sqlite3.c	/^static int fts3DoclistMerge($/;"	f	file:
fts3DoclistStripPositions	./sqlite3/sqlite3.c	/^static void fts3DoclistStripPositions($/;"	f	file:
fts3EncodeIntArray	./sqlite3/sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	./sqlite3/sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalDeferred	./sqlite3/sqlite3.c	/^static int fts3EvalDeferred($/;"	f	file:
fts3EvalExpr	./sqlite3/sqlite3.c	/^static int fts3EvalExpr($/;"	f	file:
fts3ExprAllocateSegReaders	./sqlite3/sqlite3.c	/^static int fts3ExprAllocateSegReaders($/;"	f	file:
fts3ExprAssignCosts	./sqlite3/sqlite3.c	/^static void fts3ExprAssignCosts($/;"	f	file:
fts3ExprCost	./sqlite3/sqlite3.c	/^static int fts3ExprCost(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprFreeSegReaders	./sqlite3/sqlite3.c	/^static void fts3ExprFreeSegReaders(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprGlobalHitsCb	./sqlite3/sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	./sqlite3/sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	./sqlite3/sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	./sqlite3/sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	./sqlite3/sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	./sqlite3/sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprNearTrim	./sqlite3/sqlite3.c	/^static int fts3ExprNearTrim(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprParse	./sqlite3/sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprPhraseCount	./sqlite3/sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	./sqlite3/sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	./sqlite3/sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	./sqlite3/sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	./sqlite3/sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	./sqlite3/sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	./sqlite3/sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FlushCallback	./sqlite3/sqlite3.c	/^static int fts3FlushCallback($/;"	f	file:
fts3FunctionArg	./sqlite3/sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	./sqlite3/sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	./sqlite3/sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint2	./sqlite3/sqlite3.c	/^static void fts3GetDeltaVarint2(char **pp, char *pEnd, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetMatchinfo	./sqlite3/sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3HashClear	./sqlite3/sqlite3.c	/^#define fts3HashClear /;"	d	file:
fts3HashCount	./sqlite3/sqlite3.c	/^#define fts3HashCount(/;"	d	file:
fts3HashData	./sqlite3/sqlite3.c	/^#define fts3HashData(/;"	d	file:
fts3HashFind	./sqlite3/sqlite3.c	/^#define fts3HashFind /;"	d	file:
fts3HashFindElem	./sqlite3/sqlite3.c	/^#define fts3HashFindElem /;"	d	file:
fts3HashFirst	./sqlite3/sqlite3.c	/^#define fts3HashFirst(/;"	d	file:
fts3HashFree	./sqlite3/sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	./sqlite3/sqlite3.c	/^#define fts3HashInit /;"	d	file:
fts3HashInsert	./sqlite3/sqlite3.c	/^#define fts3HashInsert /;"	d	file:
fts3HashInsertElement	./sqlite3/sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	./sqlite3/sqlite3.c	/^#define fts3HashKey(/;"	d	file:
fts3HashKeysize	./sqlite3/sqlite3.c	/^#define fts3HashKeysize(/;"	d	file:
fts3HashMalloc	./sqlite3/sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	./sqlite3/sqlite3.c	/^#define fts3HashNext(/;"	d	file:
fts3InitVtab	./sqlite3/sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	./sqlite3/sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	./sqlite3/sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	./sqlite3/sqlite3.c	/^static int fts3InsertTerms(Fts3Table *p, sqlite3_value **apVal, u32 *aSz){$/;"	f	file:
fts3IsEmpty	./sqlite3/sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value **apVal, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	./sqlite3/sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	./sqlite3/sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LoadColumnlistCounts	./sqlite3/sqlite3.c	/^static void fts3LoadColumnlistCounts(char **pp, u32 *aOut, int isGlobal){$/;"	f	file:
fts3MallocZero	./sqlite3/sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	./sqlite3/sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	./sqlite3/sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	./sqlite3/sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	./sqlite3/sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	./sqlite3/sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	./sqlite3/sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	./sqlite3/sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3MergeCallback	./sqlite3/sqlite3.c	/^static int fts3MergeCallback($/;"	f	file:
fts3Module	./sqlite3/sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3NearMerge	./sqlite3/sqlite3.c	/^static int fts3NearMerge($/;"	f	file:
fts3NextMethod	./sqlite3/sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	./sqlite3/sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	./sqlite3/sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	./sqlite3/sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	./sqlite3/sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	./sqlite3/sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	./sqlite3/sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	./sqlite3/sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	./sqlite3/sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingTermsAdd	./sqlite3/sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsDocid	./sqlite3/sqlite3.c	/^static int fts3PendingTermsDocid(Fts3Table *p, sqlite_int64 iDocid){$/;"	f	file:
fts3PhraseSelect	./sqlite3/sqlite3.c	/^static int fts3PhraseSelect($/;"	f	file:
fts3PoslistCopy	./sqlite3/sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	./sqlite3/sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	./sqlite3/sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	./sqlite3/sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	./sqlite3/sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PutColNumber	./sqlite3/sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	./sqlite3/sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3ReadNextPos	./sqlite3/sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	./sqlite3/sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	./sqlite3/sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3RemoveElementByHash	./sqlite3/sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RenameMethod	./sqlite3/sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RollbackMethod	./sqlite3/sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RowidMethod	./sqlite3/sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3ScanInteriorNode	./sqlite3/sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderArrayAdd	./sqlite3/sqlite3.c	/^static int fts3SegReaderArrayAdd($/;"	f	file:
fts3SegReaderArrayFree	./sqlite3/sqlite3.c	/^static void fts3SegReaderArrayFree(Fts3SegReaderArray *pArray){$/;"	f	file:
fts3SegReaderCmp	./sqlite3/sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmp	./sqlite3/sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	./sqlite3/sqlite3.c	/^static void fts3SegReaderFirstDocid(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	./sqlite3/sqlite3.c	/^#define fts3SegReaderIsPending(/;"	d	file:
fts3SegReaderIsRootOnly	./sqlite3/sqlite3.c	/^#define fts3SegReaderIsRootOnly(/;"	d	file:
fts3SegReaderNew	./sqlite3/sqlite3.c	/^static int fts3SegReaderNew($/;"	f	file:
fts3SegReaderNext	./sqlite3/sqlite3.c	/^static int fts3SegReaderNext(Fts3Table *p, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderNextDocid	./sqlite3/sqlite3.c	/^static void fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderSort	./sqlite3/sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderTermCmp	./sqlite3/sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	./sqlite3/sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	./sqlite3/sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	./sqlite3/sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentCount	./sqlite3/sqlite3.c	/^static int fts3SegmentCount(Fts3Table *p, int iLevel, int *pnSegment){$/;"	f	file:
fts3SegmentCountMax	./sqlite3/sqlite3.c	/^static int fts3SegmentCountMax(Fts3Table *p, int *pnSegment, int *pnMax){$/;"	f	file:
fts3SegmentMerge	./sqlite3/sqlite3.c	/^static int fts3SegmentMerge(Fts3Table *p, int iLevel){$/;"	f	file:
fts3SelectDocsize	./sqlite3/sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	./sqlite3/sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SnippetAdvance	./sqlite3/sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	./sqlite3/sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	./sqlite3/sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	./sqlite3/sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	./sqlite3/sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	./sqlite3/sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	./sqlite3/sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	./sqlite3/sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	./sqlite3/sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	./sqlite3/sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StrCompare	./sqlite3/sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	./sqlite3/sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	./sqlite3/sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	./sqlite3/sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermSegReaderArray	./sqlite3/sqlite3.c	/^static int fts3TermSegReaderArray($/;"	f	file:
fts3TermSelect	./sqlite3/sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectCb	./sqlite3/sqlite3.c	/^static int fts3TermSelectCb($/;"	f	file:
fts3TermSelectMerge	./sqlite3/sqlite3.c	/^static int fts3TermSelectMerge(TermSelect *pTS){$/;"	f	file:
fts3TreeFinishNode	./sqlite3/sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3UpdateDocTotals	./sqlite3/sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	./sqlite3/sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteSegdir	./sqlite3/sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	./sqlite3/sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3_isalnum	./sqlite3/sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3isspace	./sqlite3/sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
ftsCompareFunction	./sqlite3/sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	./sqlite3/sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	./sqlite3/sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	./sqlite3/sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
functionDestroy	./sqlite3/sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	./sqlite3/sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	./sqlite3/sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	./sqlite3/sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
generateColumnNames	./sqlite3/sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	./sqlite3/sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	./sqlite3/sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	./sqlite3/sqlite3.c	/^static void generateSortTail($/;"	f	file:
geomCallback	./sqlite3/sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	./sqlite3/sqlite3.c	/^#define get2byte(/;"	d	file:
get2byteNotZero	./sqlite3/sqlite3.c	/^#define get2byteNotZero(/;"	d	file:
get4byte	./sqlite3/sqlite3.c	/^#define get4byte /;"	d	file:
getAndInitPage	./sqlite3/sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	./sqlite3/sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getBoolean	./sqlite3/sqlite3.c	/^static u8 getBoolean(const char *z){$/;"	f	file:
getCellInfo	./sqlite3/sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	./sqlite3/sqlite3.c	/^#define getCellInfo(/;"	d	file:
getDigits	./sqlite3/sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getIntFromStmt	./sqlite3/sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLastErrorMsg	./sqlite3/sqlite3.c	/^static int getLastErrorMsg(int nBuf, char *zBuf){$/;"	f	file:
getLockingMode	./sqlite3/sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	./sqlite3/sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	./sqlite3/sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	./sqlite3/sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	./sqlite3/sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	./sqlite3/sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	./sqlite3/sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getReadLock	./sqlite3/sqlite3.c	/^static int getReadLock( os2File *pFile ){$/;"	f	file:
getReadLock	./sqlite3/sqlite3.c	/^static int getReadLock(winFile *pFile){$/;"	f	file:
getRowTrigger	./sqlite3/sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	./sqlite3/sqlite3.c	/^static u8 getSafetyLevel(const char *z){$/;"	f	file:
getSectorSize	./sqlite3/sqlite3.c	/^static int getSectorSize($/;"	f	file:
getTempStore	./sqlite3/sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTempname	./sqlite3/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf ){$/;"	f	file:
getTempname	./sqlite3/sqlite3.c	/^static int getTempname(int nBuf, char *zBuf){$/;"	f	file:
getVarint	./sqlite3/sqlite3.c	/^#define getVarint /;"	d	file:
getVarint32	./sqlite3/sqlite3.c	/^#define getVarint32(/;"	d	file:
get_autocommit	./sqlite3/include/sqlite3ext.h	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
get_autocommit	./sqlite3/sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	./sqlite3/include/sqlite3ext.h	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
get_auxdata	./sqlite3/sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_table	./sqlite3/include/sqlite3ext.h	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines
get_table	./sqlite3/sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
globInfo	./sqlite3/sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	./sqlite3/include/sqlite3ext.h	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines
global_recover	./sqlite3/sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	./sqlite3/sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	./sqlite3/sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	./sqlite3/sqlite3.c	/^static int growOpArray(Vdbe *p){$/;"	f	file:
grp	./sqlite3/sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	./sqlite3/sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	./sqlite3/sqlite3.c	/^  HFILE h;                  \/* Handle for accessing the file *\/$/;"	m	struct:os2File	file:
h	./sqlite3/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	./sqlite3/sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	./sqlite3/sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	./sqlite3/sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hMap	./sqlite3/sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMutex	./sqlite3/sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/  $/;"	m	struct:winFile	file:
hShared	./sqlite3/sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
hasAgg	./sqlite3/sqlite3.c	/^  u8 hasAgg;           \/* True if aggregates are seen *\/$/;"	m	struct:NameContext	file:
hasData	./sqlite3/sqlite3.c	/^  u8 hasData;          \/* True if this page stores data *\/$/;"	m	struct:MemPage	file:
hasHotJournal	./sqlite3/sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	./sqlite3/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	./sqlite3/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	./sqlite3/sqlite3.c	/^  #define hasReadConflicts(/;"	d	file:
hasReadConflicts	./sqlite3/sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasSharedCacheTableLock	./sqlite3/sqlite3.c	/^  #define hasSharedCacheTableLock(/;"	d	file:
hasSharedCacheTableLock	./sqlite3/sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasVowel	./sqlite3/sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	./sqlite3/sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	./sqlite3/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon14	file:
hdr	./sqlite3/sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	./sqlite3/sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heightOfExpr	./sqlite3/sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	./sqlite3/sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	./sqlite3/sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	./sqlite3/sqlite3.c	/^static void hexFunc($/;"	f	file:
hexToInt	./sqlite3/sqlite3.c	/^static u8 hexToInt(int h){$/;"	f	file:
hexdigits	./sqlite3/sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hlmask	./sqlite3/sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	./sqlite3/sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	./sqlite3/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	./sqlite3/sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	./sqlite3/sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	./sqlite3/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	./sqlite3/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::__anon11	file:
i	./sqlite3/sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon10	file:
i	./sqlite3/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:
i	./sqlite3/sqlite3.c	/^  int i;$/;"	m	union:RtreeCoord	file:
i	./sqlite3/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	./sqlite3/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	./sqlite3/sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	./sqlite3/sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	./sqlite3/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	./sqlite3/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAddr	./sqlite3/sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	./sqlite3/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	./sqlite3/sqlite3.c	/^    u16 iAlias;            \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item	file:
iBatch	./sqlite3/sqlite3.c	/^  u8 iBatch;                     \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBreak	./sqlite3/sqlite3.c	/^  int iBreak;                    \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iCacheCnt	./sqlite3/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	./sqlite3/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	./sqlite3/sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	./sqlite3/sqlite3.c	/^  int iCell;                        \/* Index of current cell in pNode *\/$/;"	m	struct:RtreeCursor	file:
iChange	./sqlite3/sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iCol	./sqlite3/sqlite3.c	/^    u16 iCol;              \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;                       \/* Current column number *\/$/;"	m	struct:LcsIterator	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	./sqlite3/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColCache	./sqlite3/sqlite3.c	/^  u8 iColCache;        \/* Next entry of the cache to replace *\/$/;"	m	struct:Parse	file:
iColumn	./sqlite3/include/sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	./sqlite3/include/sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iColumn	./sqlite3/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	./sqlite3/sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	./sqlite3/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	./sqlite3/sqlite3.c	/^    int iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	./sqlite3/sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	./sqlite3/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iContinue	./sqlite3/sqlite3.c	/^  int iContinue;                 \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	./sqlite3/sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	./sqlite3/sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon7::__anon8::InLoop	file:
iCurrent	./sqlite3/sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrent	./sqlite3/sqlite3.c	/^  sqlite3_int64 iCurrent;$/;"	m	struct:Fts3Expr	file:
iCurrentBlock	./sqlite3/sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCursor	./sqlite3/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDb	./sqlite3/sqlite3.c	/^    int iDb;                    \/* When back is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	./sqlite3/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	./sqlite3/sqlite3.c	/^  int iDb;              \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	./sqlite3/sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	./sqlite3/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon9	file:
iDefaultCol	./sqlite3/sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	./sqlite3/sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	./sqlite3/sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	./sqlite3/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	./sqlite3/sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	./sqlite3/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	./sqlite3/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iECursor	./sqlite3/sqlite3.c	/^  int iECursor;          \/* VDBE Cursor associated with this ExprList *\/$/;"	m	struct:ExprList	file:
iEndBlock	./sqlite3/sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iFirst	./sqlite3/sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iForeGuard	./sqlite3/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	./sqlite3/sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	./sqlite3/sqlite3.c	/^    int iFrom;         \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	./sqlite3/sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iHdrOffset	./sqlite3/sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHead	./sqlite3/sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	./sqlite3/sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	./sqlite3/sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	./sqlite3/sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	./sqlite3/sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLastCol	./sqlite3/sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	./sqlite3/sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	./sqlite3/sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	./sqlite3/sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	./sqlite3/sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	./sqlite3/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLimit	./sqlite3/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	./sqlite3/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxKey	./sqlite3/sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	./sqlite3/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	./sqlite3/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMem	./sqlite3/sqlite3.c	/^  int iMem;         \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iNext	./sqlite3/sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	./sqlite3/sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	./sqlite3/sqlite3.c	/^  int iNextSelectId;$/;"	m	struct:Parse	file:
iNode	./sqlite3/sqlite3.c	/^  i64 iNode;$/;"	m	struct:RtreeNode	file:
iNodeSize	./sqlite3/sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	./sqlite3/sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	./sqlite3/sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	./sqlite3/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	./sqlite3/sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	./sqlite3/sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	./sqlite3/sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	./sqlite3/sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOverflow	./sqlite3/sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	./sqlite3/sqlite3.c	/^  int iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPage	./sqlite3/sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	./sqlite3/sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iParm	./sqlite3/sqlite3.c	/^  int iParm;        \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iPos	./sqlite3/sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	./sqlite3/sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	./sqlite3/sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	./sqlite3/sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrefEnc	./sqlite3/sqlite3.c	/^  u8 iPrefEnc;         \/* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) *\/$/;"	m	struct:FuncDef	file:
iPrevDocid	./sqlite3/sqlite3.c	/^  sqlite_int64 iPrevDocid;$/;"	m	struct:Fts3Table	file:
iPrevId	./sqlite3/sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrior	./sqlite3/sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iRangeReg	./sqlite3/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReg	./sqlite3/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	./sqlite3/sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	./sqlite3/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	./sqlite3/sqlite3.c	/^  i64 iRowid;$/;"	m	struct:RtreeCell	file:
iSelectId	./sqlite3/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	./sqlite3/sqlite3.c	/^  int iSelectId;$/;"	m	struct:Parse	file:
iSize	./sqlite3/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	./sqlite3/sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	./sqlite3/sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSorterColumn	./sqlite3/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iStartBlock	./sqlite3/sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStatement	./sqlite3/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	./sqlite3/sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	./sqlite3/sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	./sqlite3/sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	./sqlite3/sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iTab	./sqlite3/sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTabCur	./sqlite3/sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	./sqlite3/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	./sqlite3/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	./sqlite3/sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	./sqlite3/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	./sqlite3/sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	./sqlite3/sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	./sqlite3/include/sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iTermOffset	./sqlite3/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iToken	./sqlite3/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	./sqlite3/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	./sqlite3/sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	./sqlite3/sqlite3.c	/^  int iTop;                      \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iValue	./sqlite3/sqlite3.c	/^    int iValue;            \/* Integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon4	file:
iVersion	./sqlite3/include/sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 2) *\/$/;"	m	struct:sqlite3_vfs
iVersion	./sqlite3/include/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	./sqlite3/include/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	./sqlite3/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 2) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	./sqlite3/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	./sqlite3/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	./sqlite3/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	./sqlite3/sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iZero	./sqlite3/sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	./sqlite3/sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	./sqlite3/sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	./sqlite3/sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	./sqlite3/sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	./sqlite3/sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	./sqlite3/sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	./sqlite3/sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	./sqlite3/sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	./sqlite3/sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	./sqlite3/sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	./sqlite3/sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	./sqlite3/sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	./sqlite3/sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	./sqlite3/sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	./sqlite3/sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	./html/include/IMG3_HtmlParser.h	/^	uint32_t		id;$/;"	m	struct:HtmlTagNode
id	./sqlite3/sqlite3.c	/^  int  id;          \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	./sqlite3/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	./sqlite3/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	./sqlite3/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	./sqlite3/sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
identLength	./sqlite3/sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	./sqlite3/sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	./sqlite3/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idx	./sqlite3/sqlite3.c	/^    u16 idx;            \/* Insert this cell before idx-th non-overflow cell *\/$/;"	m	struct:MemPage::_OvflCell	file:
idxHash	./sqlite3/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	./sqlite3/include/sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxNum	./sqlite3/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	./sqlite3/include/sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
idxStr	./sqlite3/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
ifnullFunc	./sqlite3/sqlite3.c	/^#define ifnullFunc /;"	d	file:
img3SupportedFiles	./IMG3_Main.cpp	/^char img3SupportedFiles[][30] = {$/;"	v
importVtabErrMsg	./sqlite3/sqlite3.c	/^static void importVtabErrMsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	file:
in	./sqlite3/sqlite3.c	/^    } in;                 \/* Used when plan.wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon7	typeref:struct:WhereLevel::__anon7::__anon8	file:
inNormalWrite	./sqlite3/sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	./sqlite3/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	./sqlite3/sqlite3.c	/^  u8 inTrans;          \/* 0: not writable.  1: Transaction.  2: Checkpoint *\/$/;"	m	struct:Db	file:
inTrans	./sqlite3/sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	./sqlite3/sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	./sqlite3/sqlite3.c	/^  u8 inVtabMethod;        \/* See comments above *\/$/;"	m	struct:Vdbe	file:
incrVacuum	./sqlite3/sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	./sqlite3/sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){$/;"	f	file:
indexable	./sqlite3/sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	./sqlite3/sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	./sqlite3/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initMaskSet	./sqlite3/sqlite3.c	/^#define initMaskSet(/;"	d	file:
initUconvObjects	./sqlite3/sqlite3.c	/^static void initUconvObjects( void ){$/;"	f	file:
initiallyEmpty	./sqlite3/sqlite3.c	/^  u8 initiallyEmpty;    \/* Database is empty at start of transaction *\/$/;"	m	struct:BtShared	file:
ino	./sqlite3/sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	./sqlite3/sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	./sqlite3/sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	./sqlite3/sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	./sqlite3/sqlite3.c	/^static void insertElement($/;"	f	file:
intKey	./sqlite3/sqlite3.c	/^  u8 intKey;           \/* True if intkey flag is set *\/$/;"	m	struct:MemPage	file:
intTestFunc	./sqlite3/sqlite3.c	/^static void intTestFunc($/;"	f	file:
internalFileAttr	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	internalFileAttr;$/;"	m	struct:ZIP_CentralDirectoryHeader
interruptx	./sqlite3/include/sqlite3ext.h	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
interruptx	./sqlite3/sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	./sqlite3/sqlite3.c	/^  #define invalidateAllOverflowCache(/;"	d	file:
invalidateAllOverflowCache	./sqlite3/sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateCursorsOnModifiedBtrees	./sqlite3/sqlite3.c	/^static void invalidateCursorsOnModifiedBtrees(sqlite3 *db){$/;"	f	file:
invalidateIncrblobCursors	./sqlite3/sqlite3.c	/^  #define invalidateIncrblobCursors(/;"	d	file:
invalidateIncrblobCursors	./sqlite3/sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateOverflowCache	./sqlite3/sqlite3.c	/^  #define invalidateOverflowCache(/;"	d	file:
invalidateOverflowCache	./sqlite3/sqlite3.c	/^static void invalidateOverflowCache(BtCursor *pCur){$/;"	f	file:
invalidateTempStorage	./sqlite3/sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
isAppropriateForFactoring	./sqlite3/sqlite3.c	/^static int isAppropriateForFactoring(Expr *p){$/;"	f	file:
isAttached	./sqlite3/sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	./sqlite3/sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isCheck	./sqlite3/sqlite3.c	/^  u8 isCheck;          \/* True if resolving names in a CHECK constraint *\/$/;"	m	struct:NameContext	file:
isConsonant	./sqlite3/sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isDate	./sqlite3/sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	./sqlite3/sqlite3.c	/^  u8 isDeferred;    \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelete	./sqlite3/sqlite3.c	/^  int isDelete;                       \/* Delete on close if true *\/$/;"	m	struct:unixFile	file:
isDelim	./sqlite3/sqlite3.c	/^#define isDelim(/;"	d	file:
isDirty	./sqlite3/sqlite3.c	/^  int isDirty;$/;"	m	struct:RtreeNode	file:
isEof	./sqlite3/sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isError	./sqlite3/sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isExclusive	./sqlite3/sqlite3.c	/^  u8 isExclusive;       \/* True if pWriter has an EXCLUSIVE lock on the db *\/$/;"	m	struct:BtShared	file:
isFatalError	./sqlite3/sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isHidden	./sqlite3/sqlite3.c	/^  u8 isHidden;     \/* True if this column is 'hidden' *\/$/;"	m	struct:Column	file:
isIncrblobHandle	./sqlite3/sqlite3.c	/^  u8 isIncrblobHandle;      \/* True if this cursor is an incr. io handle *\/$/;"	m	struct:BtCursor	file:
isIndex	./sqlite3/sqlite3.c	/^  Bool isIndex;         \/* True if an index containing keys only - no data *\/$/;"	m	struct:VdbeCursor	file:
isInit	./sqlite3/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	./sqlite3/sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	./sqlite3/sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	./sqlite3/sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	./sqlite3/sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	./sqlite3/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:
isLikeOrGlob	./sqlite3/sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLoaded	./sqlite3/sqlite3.c	/^  int isLoaded;              \/* True if aDoclist\/nDoclist are initialized. *\/$/;"	m	struct:Fts3Expr	file:
isLookaside	./sqlite3/sqlite3.c	/^#define isLookaside(/;"	d	file:
isLookaside	./sqlite3/sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isMallocInit	./sqlite3/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	./sqlite3/sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	./sqlite3/sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	./sqlite3/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may affect\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	./sqlite3/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNT	./sqlite3/sqlite3.c	/^  static int isNT(void){$/;"	f	file:
isNT	./sqlite3/sqlite3.c	/^# define isNT(/;"	d	file:
isNot	./sqlite3/sqlite3.c	/^  int isNot;                 \/* Phrase prefixed by unary not (-) operator *\/$/;"	m	struct:Fts3Phrase	file:
isOpen	./sqlite3/sqlite3.c	/^#define isOpen(/;"	d	file:
isOrdered	./sqlite3/sqlite3.c	/^  Bool isOrdered;       \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isPCacheInit	./sqlite3/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPending	./sqlite3/sqlite3.c	/^  u8 isPending;         \/* If waiting for read-locks to clear *\/$/;"	m	struct:BtShared	file:
isPopulated	./sqlite3/sqlite3.c	/^    u8 isPopulated;   \/* Temporary table associated with SELECT is populated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isPrefix	./sqlite3/sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	./sqlite3/sqlite3.c	/^  u8 isPrepareV2;         \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isPrimKey	./sqlite3/sqlite3.c	/^  u8 isPrimKey;    \/* True if this column is part of the PRIMARY KEY *\/$/;"	m	struct:Column	file:
isReqPos	./sqlite3/sqlite3.c	/^  int isReqPos;$/;"	m	struct:TermSelect	file:
isRequireSeek	./sqlite3/sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isSimpleCount	./sqlite3/sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorted	./sqlite3/sqlite3.c	/^  u8 isSorted;                   \/* True if pEntry is sorted *\/$/;"	m	struct:RowSet	file:
isSortingIndex	./sqlite3/sqlite3.c	/^static int isSortingIndex($/;"	f	file:
isTable	./sqlite3/sqlite3.c	/^  Bool isTable;         \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTransactionSavepoint	./sqlite3/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	./sqlite3/sqlite3.c	/^ #undef isView$/;"	d	file:
isView	./sqlite3/sqlite3.c	/^# define isView /;"	d	file:
isView	./sqlite3/sqlite3.c	/^# undef isView$/;"	d	file:
isVowel	./sqlite3/sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	./sqlite3/sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
iv	./includes/IMG3_typedefs.h	/^	char *iv;$/;"	m	struct:DecryptionInfo
iv	./openssl/include/IMG3_OpensslInterface.h	/^	uint8_t *iv;$/;"	m	class:IMG3_OpensslInterface
iv	./sections/include/IMG3_FileSection.h	/^  uint8_t   *iv;$/;"	m	struct:KBAG_Struct
ivSize	./openssl/include/IMG3_OpensslInterface.h	/^	uint32_t ivSize;$/;"	m	class:IMG3_OpensslInterface
ix	./sqlite3/sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	./sqlite3/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	./sqlite3/sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	./sqlite3/sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	./sqlite3/sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	./sqlite3/sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	./sqlite3/sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	./sqlite3/sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	./sqlite3/sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	./sqlite3/sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	./sqlite3/sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	./sqlite3/sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	./sqlite3/sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	./sqlite3/sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	./sqlite3/sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	./sqlite3/sqlite3.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	./sqlite3/sqlite3.c	/^static void juliandayFunc($/;"	f	file:
key	./includes/IMG3_typedefs.h	/^	char *key;$/;"	m	struct:DecryptionInfo
key	./openssl/include/IMG3_OpensslInterface.h	/^	uint8_t *key;$/;"	m	class:IMG3_OpensslInterface
key	./sections/include/IMG3_FileSection.h	/^  uint8_t   *key;$/;"	m	struct:KBAG_Struct
key	./sqlite3/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	./sqlite3/sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	./sqlite3/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	./sqlite3/sqlite3.c	/^static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){$/;"	f	file:
keySize	./openssl/include/IMG3_OpensslInterface.h	/^	uint32_t keySize;$/;"	m	class:IMG3_OpensslInterface
keywordCode	./sqlite3/sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
lastErrno	./sqlite3/sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	./sqlite3/sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	./sqlite3/sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastModDate	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	lastModDate;$/;"	m	struct:ZIP_CentralDirectoryHeader
lastModDate	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	lastModDate;$/;"	m	struct:ZIP_LocalHeader
lastModTime	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	lastModTime;$/;"	m	struct:ZIP_CentralDirectoryHeader
lastModTime	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	lastModTime;$/;"	m	struct:ZIP_LocalHeader
lastRowid	./sqlite3/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	./sqlite3/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
lastRowid	./sqlite3/sqlite3.c	/^  i64 lastRowid;        \/* Last rowid from a Next or NextIdx operation *\/$/;"	m	struct:VdbeCursor	file:
last_insert_rowid	./sqlite3/include/sqlite3ext.h	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
last_insert_rowid	./sqlite3/sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	./sqlite3/sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
lchild	./compression/include/IMG3_LzssInterface.h	/^    int lchild[IMG3_LZSSINTERFACE_N+1], rchild[IMG3_LZSSINTERFACE_N+257], parent[IMG3_LZSSINTERFACE_N+1];$/;"	m	struct:encode_state
leaf	./sqlite3/sqlite3.c	/^  u8 leaf;             \/* True if leaf flag is set *\/$/;"	m	struct:MemPage	file:
leaveMutex	./sqlite3/sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	./sqlite3/sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon17	file:
leftCursor	./sqlite3/sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	./sqlite3/sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	./sqlite3/sqlite3.c	/^static void lengthFunc($/;"	f	file:
length_compressed	./compression/include/IMG3_LzssInterface.h	/^    uint32_t length_compressed;$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
length_uncompressed	./compression/include/IMG3_LzssInterface.h	/^    uint32_t length_uncompressed;$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
lhs	./sqlite3/sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon20	file:
libversion	./sqlite3/include/sqlite3ext.h	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines
libversion	./sqlite3/sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	./sqlite3/include/sqlite3ext.h	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines
libversion_number	./sqlite3/sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	./sqlite3/sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	./sqlite3/sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	./sqlite3/sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	./sqlite3/sqlite3.c	/^# define likely(/;"	d	file:
limit	./sqlite3/include/sqlite3ext.h	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines
limit	./sqlite3/sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	./sqlite3/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon15	file:
loadAnalysis	./sqlite3/sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	./sqlite3/sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
local	./sqlite3/sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	./sqlite3/sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	./sqlite3/sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	./sqlite3/sqlite3.c	/^static sqlite3_int64 localtimeOffset(DateTime *p){$/;"	f	file:
locateFkeyIndex	./sqlite3/sqlite3.c	/^static int locateFkeyIndex($/;"	f	file:
lock	./sqlite3/sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	./sqlite3/sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	./sqlite3/sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	./sqlite3/sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockProxy	./sqlite3/sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	./sqlite3/sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	./sqlite3/sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	./sqlite3/sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	./sqlite3/sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	./sqlite3/sqlite3.c	/^  unsigned char locktype;   \/* Type of lock currently held on this file *\/$/;"	m	struct:os2File	file:
locktype	./sqlite3/sqlite3.c	/^  unsigned char locktype; \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	./sqlite3/sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	./sqlite3/sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	./sqlite3/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	./sqlite3/sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	./sqlite3/sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	./sqlite3/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lzadler32	./compression/IMG3_LzssInterface.cpp	/^uint32_t IMG3_LzssInterface::lzadler32(uint8_t *buf, int32_t len)$/;"	f	class:IMG3_LzssInterface
m	./sqlite3/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	./sqlite3/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
m_eq_1	./sqlite3/sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	./sqlite3/sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	./sqlite3/sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:CERT_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:DATA_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:IMG3_Generic_Header
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:IMG3_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:KBAG_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:SEPO_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:SHSH_Struct
magic	./sections/include/IMG3_FileSection.h	/^  uint32_t  magic;$/;"	m	struct:TYPE_Struct
magic	./sqlite3/sqlite3.c	/^  u32 magic;                      \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	./sqlite3/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	./sqlite3/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
main	./IMG3_Main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
major	./sqlite3/sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	./sqlite3/include/sqlite3ext.h	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines
malloc	./sqlite3/sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	./sqlite3/sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	./sqlite3/sqlite3.c	/^  u8   mallocFailed;   \/* Becomes true if any memory allocation fails *\/$/;"	m	struct:StrAccum	file:
mallocFailed	./sqlite3/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	./sqlite3/sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
mask	./sqlite3/sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon18::__anon19	file:
maskPage	./sqlite3/sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
matchAll	./sqlite3/sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	./sqlite3/sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	./sqlite3/sqlite3.c	/^static int matchQuality(FuncDef *p, int nArg, u8 enc){$/;"	f	file:
matchSet	./sqlite3/sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
match_length	./compression/include/IMG3_LzssInterface.h	/^    int match_position, match_length;$/;"	m	struct:encode_state
match_position	./compression/include/IMG3_LzssInterface.h	/^    int match_position, match_length;$/;"	m	struct:encode_state
maxCount	./sqlite3/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	./sqlite3/sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	./sqlite3/sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	./sqlite3/sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	./sqlite3/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	./sqlite3/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	./sqlite3/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
mbcsToUnicode	./sqlite3/sqlite3.c	/^static WCHAR *mbcsToUnicode(const char *zFilename){$/;"	f	file:
mem	./sqlite3/sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon12	file:
mem0	./sqlite3/sqlite3.c	/^#define mem0 /;"	d	file:
mem0	./sqlite3/sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem3	./sqlite3/sqlite3.c	/^#define mem3 /;"	d	file:
mem3	./sqlite3/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem5	./sqlite3/sqlite3.c	/^#define mem5 /;"	d	file:
mem5	./sqlite3/sqlite3.c	/^} mem5 = { 0 };$/;"	v	typeref:struct:Mem5Global	file:
memAboutToChange	./sqlite3/sqlite3.c	/^# define memAboutToChange(/;"	d	file:
memDb	./sqlite3/sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	./sqlite3/sqlite3.c	/^#define memIsValid(/;"	d	file:
memTracePrint	./sqlite3/sqlite3.c	/^static void memTracePrint(FILE *out, Mem *p){$/;"	f	file:
memjrnlClose	./sqlite3/sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	./sqlite3/sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	./sqlite3/sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	./sqlite3/sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	./sqlite3/sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	./sqlite3/sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	./sqlite3/include/sqlite3ext.h	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines
memory_highwater	./sqlite3/sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	./sqlite3/include/sqlite3ext.h	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines
memory_used	./sqlite3/sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	./sqlite3/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	./sqlite3/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	./sqlite3/sqlite3.c	/^void memsys3Free(void *pPrior){$/;"	f
memsys3FreeUnsafe	./sqlite3/sqlite3.c	/^void memsys3FreeUnsafe(void *pOld){$/;"	f
memsys3FromMaster	./sqlite3/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	./sqlite3/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	./sqlite3/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	./sqlite3/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	./sqlite3/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	./sqlite3/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	./sqlite3/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	./sqlite3/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	./sqlite3/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	./sqlite3/sqlite3.c	/^void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f
memsys3Roundup	./sqlite3/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	./sqlite3/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	./sqlite3/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	./sqlite3/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	./sqlite3/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	./sqlite3/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	./sqlite3/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	./sqlite3/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	./sqlite3/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	./sqlite3/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	./sqlite3/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	./sqlite3/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	./sqlite3/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	./sqlite3/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	./sqlite3/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	./sqlite3/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	./sqlite3/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	./sqlite3/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	./sqlite3/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
memsys5UnlinkFirst	./sqlite3/sqlite3.c	/^static int memsys5UnlinkFirst(int iLogsize){$/;"	f	file:
minLeaf	./sqlite3/sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	./sqlite3/sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	./sqlite3/sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	./sqlite3/sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	./sqlite3/sqlite3.c	/^static u8 minMaxQuery(Select *p){$/;"	f	file:
minWriteFileFormat	./sqlite3/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	./sqlite3/sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	./sqlite3/sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	./sqlite3/sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mnMaster	./sqlite3/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnReq	./sqlite3/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	./sqlite3/sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	./sqlite3/sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	./sqlite3/sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	./sqlite3/sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	./sqlite3/sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	./sqlite3/sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	./sqlite3/sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	./sqlite3/include/sqlite3ext.h	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines
mprintf	./sqlite3/sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	./sqlite3/sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	./sqlite3/sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	./sqlite3/sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
mutex	./sqlite3/sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	./sqlite3/sqlite3.c	/^  HMTX mutex;       \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	./sqlite3/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this struct *\/$/;"	m	struct:BtShared	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon12	file:
mutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	./sqlite3/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	./sqlite3/include/sqlite3ext.h	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines
mutex_alloc	./sqlite3/sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	./sqlite3/include/sqlite3ext.h	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_enter	./sqlite3/sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	./sqlite3/include/sqlite3ext.h	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_free	./sqlite3/sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	./sqlite3/include/sqlite3ext.h	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_leave	./sqlite3/sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	./sqlite3/include/sqlite3ext.h	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines
mutex_try	./sqlite3/sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	./sqlite3/sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	./sqlite3/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon12	file:
mxErr	./sqlite3/sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	./sqlite3/sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxOut	./sqlite3/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	./sqlite3/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	./sqlite3/include/sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
mxPathname	./sqlite3/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	./sqlite3/sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	./sqlite3/sqlite3.c	/^  int mxPinned;                  \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxReq	./sqlite3/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxStrlen	./sqlite3/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxValue	./sqlite3/sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
n	./sqlite3/sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	./sqlite3/sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	./sqlite3/sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	./sqlite3/sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	./sqlite3/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	./sqlite3/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	./sqlite3/sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	./sqlite3/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAlias	./sqlite3/sqlite3.c	/^  int nAlias;          \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAliasAlloc	./sqlite3/sqlite3.c	/^  int nAliasAlloc;     \/* Number of allocated slots for aAlias[] *\/$/;"	m	struct:Parse	file:
nAlloc	./sqlite3/sqlite3.c	/^  i16 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	./sqlite3/sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of apSegment[] *\/$/;"	m	struct:Fts3SegReaderArray	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc;            \/* Number of entries allocated below *\/$/;"	m	struct:ExprList	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc;      \/* Number of entries allocated for a[] below *\/$/;"	m	struct:IdList	file:
nAlloc	./sqlite3/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon12	file:
nAlloc	./sqlite3/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	./sqlite3/sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	./sqlite3/sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nAux	./sqlite3/sqlite3.c	/^  int nAux;                     \/* Number of entries allocated for apAux[] *\/$/;"	m	struct:VdbeFunc	file:
nBackfill	./sqlite3/sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	./sqlite3/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	./sqlite3/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon12	file:
nBacktraceSlots	./sqlite3/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	./sqlite3/sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	./sqlite3/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	./sqlite3/sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	./sqlite3/sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	./sqlite3/sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	./sqlite3/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	./sqlite3/sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nByte	./sqlite3/sqlite3.c	/^  u8 nByte;         \/* Size in byte of text or blob. *\/$/;"	m	struct:IndexSample	file:
nBytes	./sqlite3/sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	./sqlite3/sqlite3.c	/^  int nBytesPerCell;          \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	./sqlite3/sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	./sqlite3/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	./sqlite3/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	./sqlite3/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	./sqlite3/sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	./sqlite3/sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	./sqlite3/sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	./sqlite3/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	./sqlite3/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	./sqlite3/sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	./sqlite3/sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	./sqlite3/sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	./sqlite3/sqlite3.c	/^  int nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	./sqlite3/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColCache	./sqlite3/sqlite3.c	/^  u8 nColCache;        \/* Number of entries in the column cache *\/$/;"	m	struct:Parse	file:
nColumn	./sqlite3/sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	./sqlite3/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	./sqlite3/sqlite3.c	/^  int nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nColumn	./sqlite3/sqlite3.c	/^  int nColumn;     \/* Number of columns in the table used by this index *\/$/;"	m	struct:Index	file:
nColumnAlloc	./sqlite3/sqlite3.c	/^  int nColumnAlloc;       \/* Number of slots allocated for aCol[] *\/$/;"	m	struct:AggInfo	file:
nConstraint	./sqlite3/include/sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nConstraint	./sqlite3/sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	./sqlite3/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCost	./sqlite3/sqlite3.c	/^  int nCost;                      \/* The cost of executing SegReaderIterate() *\/$/;"	m	struct:Fts3SegReaderArray	file:
nCost	./sqlite3/sqlite3.c	/^  int nCost;$/;"	m	struct:ExprAndCost	file:
nCsr	./sqlite3/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCurrent	./sqlite3/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon12	file:
nCurrentPage	./sqlite3/sqlite3.c	/^  int nCurrentPage;              \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	./sqlite3/sqlite3.c	/^  u16 nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	./sqlite3/sqlite3.c	/^  u16 nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nData	./sqlite3/sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	./sqlite3/sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	./sqlite3/sqlite3.c	/^  int nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nData	./sqlite3/sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	./sqlite3/sqlite3.c	/^  u32 nData;     \/* Number of bytes of data *\/$/;"	m	struct:CellInfo	file:
nDb	./sqlite3/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDeferredCons	./sqlite3/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	./sqlite3/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDepth	./sqlite3/sqlite3.c	/^  int nDepth;          \/* Depth of subquery recursion. 1 for no recursion *\/$/;"	m	struct:NameContext	file:
nDim	./sqlite3/sqlite3.c	/^  int nDim;                   \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	./sqlite3/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	./sqlite3/sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	./sqlite3/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nDoclist	./sqlite3/sqlite3.c	/^  int nDoclist;              \/* Size of aDoclist in bytes *\/$/;"	m	struct:Fts3Expr	file:
nEntry	./sqlite3/sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	./sqlite3/sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	./sqlite3/sqlite3.c	/^  u32 nEq;                       \/* Number of == constraints *\/$/;"	m	struct:WherePlan	file:
nErr	./sqlite3/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	./sqlite3/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	./sqlite3/sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nExpr	./sqlite3/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	./sqlite3/sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	./sqlite3/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	./sqlite3/sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nField	./sqlite3/sqlite3.c	/^  int nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	./sqlite3/sqlite3.c	/^  u16 nField;         \/* Number of entries in aColl[] *\/$/;"	m	struct:KeyInfo	file:
nField	./sqlite3/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nFkConstraint	./sqlite3/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	./sqlite3/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	./sqlite3/sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	./sqlite3/sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	./sqlite3/sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	./sqlite3/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nFuncAlloc	./sqlite3/sqlite3.c	/^  int nFuncAlloc;         \/* Number of slots allocated for aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	./sqlite3/sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHeader	./sqlite3/sqlite3.c	/^  u16 nHeader;   \/* Size of the cell content header in bytes *\/$/;"	m	struct:CellInfo	file:
nHeap	./sqlite3/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	./sqlite3/sqlite3.c	/^  int nHeight;            \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	./sqlite3/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nHit	./sqlite3/sqlite3.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nId	./sqlite3/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	./sqlite3/sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon7::__anon8	file:
nInput	./sqlite3/sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	./sqlite3/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
nKey	./sqlite3/sqlite3.c	/^  i64 nKey;        \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	./sqlite3/sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or number of bytes in key *\/$/;"	m	struct:CellInfo	file:
nKey	./sqlite3/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nLabel	./sqlite3/sqlite3.c	/^  int nLabel;             \/* Number of labels used *\/$/;"	m	struct:Vdbe	file:
nLabelAlloc	./sqlite3/sqlite3.c	/^  int nLabelAlloc;        \/* Number of slots allocated in aLabel[] *\/$/;"	m	struct:Vdbe	file:
nLevel	./sqlite3/sqlite3.c	/^  int nLevel;                    \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nLocal	./sqlite3/sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally *\/$/;"	m	struct:CellInfo	file:
nLock	./sqlite3/sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	./sqlite3/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nMalloc	./sqlite3/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	./sqlite3/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	./sqlite3/sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	./sqlite3/sqlite3.c	/^  int nMax;                           \/* Configured cache size *\/$/;"	m	struct:PCache	file:
nMax	./sqlite3/sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	./sqlite3/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	./sqlite3/sqlite3.c	/^  int nMaxPage;                  \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	./sqlite3/sqlite3.c	/^  int nMaxPendingData;$/;"	m	struct:Fts3Table	file:
nMem	./sqlite3/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	./sqlite3/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	./sqlite3/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	./sqlite3/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	./sqlite3/sqlite3.c	/^  int nMem;         \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nMin	./sqlite3/sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	./sqlite3/sqlite3.c	/^  int nMinPage;                  \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMiss	./sqlite3/sqlite3.c	/^  int nHit, nMiss;            \/* Cache hits and missing *\/$/;"	m	struct:Pager	file:
nModuleArg	./sqlite3/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nMutex	./sqlite3/sqlite3.c	/^  int nMutex;$/;"	m	struct:BtreeMutexArray	file:
nName	./sqlite3/sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	./sqlite3/sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	./sqlite3/sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	./sqlite3/sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNodeSize	./sqlite3/sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOp	./sqlite3/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	./sqlite3/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	./sqlite3/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	./sqlite3/sqlite3.c	/^  int nOpAlloc;           \/* Number of slots allocated for aOp[] *\/$/;"	m	struct:Vdbe	file:
nOrderBy	./sqlite3/include/sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nOrderBy	./sqlite3/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	./sqlite3/sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOut	./sqlite3/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	./sqlite3/sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nPage	./sqlite3/sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	./sqlite3/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	./sqlite3/sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	./sqlite3/sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	./sqlite3/sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	./sqlite3/sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	./sqlite3/include/sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nParam	./sqlite3/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	./sqlite3/sqlite3.c	/^  int nParam;$/;"	m	struct:RtreeMatchArg	file:
nPayload	./sqlite3/sqlite3.c	/^  u32 nPayload;  \/* Total amount of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	./sqlite3/sqlite3.c	/^  int nPendingData;$/;"	m	struct:Fts3Table	file:
nPgsz	./sqlite3/sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	./sqlite3/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	./sqlite3/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	./sqlite3/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	./sqlite3/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPool	./sqlite3/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nProgressOps	./sqlite3/sqlite3.c	/^  int nProgressOps;             \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQPlan	./sqlite3/sqlite3.c	/^static int nQPlan = 0;              \/* Next free slow in _query_plan[] *\/$/;"	v	file:
nQueryLoop	./sqlite3/sqlite3.c	/^  double nQueryLoop;   \/* Estimated number of iterations of a query *\/$/;"	m	struct:Parse	file:
nRangeReg	./sqlite3/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	./sqlite3/sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nReaders	./sqlite3/sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	./sqlite3/sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecyclable	./sqlite3/sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	./sqlite3/include/sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
nRef	./sqlite3/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	./sqlite3/sqlite3.c	/^  int  nRef;        \/* Number of references *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	./sqlite3/sqlite3.c	/^  int nRef;$/;"	m	struct:RtreeNode	file:
nRef	./sqlite3/sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	./sqlite3/sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	./sqlite3/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	./sqlite3/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	./sqlite3/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRegion	./sqlite3/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRemaining	./sqlite3/sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	./sqlite3/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	./sqlite3/sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	./sqlite3/sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	./sqlite3/sqlite3.c	/^  double nRow;                   \/* Estimated number of rows (for EQP) *\/$/;"	m	struct:WherePlan	file:
nRow	./sqlite3/sqlite3.c	/^  int nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	./sqlite3/sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	./sqlite3/sqlite3.c	/^  unsigned nRowEst;    \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	./sqlite3/sqlite3.c	/^  double nRowOut;                \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nSavepoint	./sqlite3/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	./sqlite3/sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScratch	./sqlite3/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	./sqlite3/sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSegment	./sqlite3/sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	./sqlite3/sqlite3.c	/^  int nSegment;                   \/* Number of valid entries in apSegment[] *\/$/;"	m	struct:Fts3SegReaderArray	file:
nSelectRow	./sqlite3/sqlite3.c	/^  double nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	./sqlite3/sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	./sqlite3/sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	./sqlite3/sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	./sqlite3/sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	./sqlite3/sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSlot	./sqlite3/sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	./sqlite3/sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	./sqlite3/sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	./sqlite3/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	./sqlite3/sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	./sqlite3/sqlite3.c	/^  i16 nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStatement	./sqlite3/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	./sqlite3/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nSub	./sqlite3/sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	./sqlite3/sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	./sqlite3/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTable	./sqlite3/sqlite3.c	/^  int nTable;                   \/* Number of tables in the database *\/$/;"	m	struct:sqlite3	file:
nTableLock	./sqlite3/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTempInUse	./sqlite3/sqlite3.c	/^  u8 nTempInUse;       \/* Number of aTempReg[] currently checked out *\/$/;"	m	struct:Parse	file:
nTempReg	./sqlite3/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	./sqlite3/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	./sqlite3/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	./sqlite3/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	./sqlite3/sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	./sqlite3/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	./sqlite3/sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nTitle	./sqlite3/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon12	file:
nTitle	./sqlite3/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	./sqlite3/sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	./sqlite3/sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	./sqlite3/sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	./sqlite3/sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	./sqlite3/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	./sqlite3/sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nVTrans	./sqlite3/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVar	./sqlite3/sqlite3.c	/^  int nVar;            \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	./sqlite3/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVarExpr	./sqlite3/sqlite3.c	/^  int nVarExpr;        \/* Number of used slots in apVarExpr[] *\/$/;"	m	struct:Parse	file:
nVarExprAlloc	./sqlite3/sqlite3.c	/^  int nVarExprAlloc;   \/* Number of allocated slots in apVarExpr[] *\/$/;"	m	struct:Parse	file:
nVtabLock	./sqlite3/sqlite3.c	/^  int nVtabLock;             \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	./sqlite3/sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWrite	./sqlite3/sqlite3.c	/^  int nRead, nWrite;          \/* Database pages read\/written *\/$/;"	m	struct:Pager	file:
nZero	./sqlite3/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::__anon11	file:
name	./sections/include/IMG3_FileSection.h	/^  uint32_t  name;$/;"	m	struct:IMG3_Struct
name	./sections/include/IMG3_FileSection.h	/^  uint32_t  name;$/;"	m	struct:TYPE_Struct
nameClash	./sqlite3/sqlite3.c	/^  u8 nameClash;        \/* A permanent table name clashes with temp table name *\/$/;"	m	struct:Parse	file:
nearlyFull	./sqlite3/sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needToFreeIdxStr	./sqlite3/include/sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
needToFreeIdxStr	./sqlite3/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nested	./sqlite3/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
newDatabase	./sqlite3/sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	./sqlite3/sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	./sqlite3/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	./sqlite3/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	./sqlite3/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
next	./sqlite3/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	./sqlite3/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	./sqlite3/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	./sqlite3/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	./sqlite3/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	./sqlite3/sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	./sqlite3/sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	./sqlite3/include/sqlite3ext.h	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
next_stmt	./sqlite3/sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	./sqlite3/sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	./sqlite3/sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noReadlock	./sqlite3/sqlite3.c	/^  u8 noReadlock;              \/* Do not bother to obtain readlocks *\/$/;"	m	struct:Pager	file:
noSync	./sqlite3/sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	./sqlite3/sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	./sqlite3/sqlite3.c	/^nodeAcquire($/;"	f	file:
nodeDeleteCell	./sqlite3/sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	./sqlite3/sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	./sqlite3/sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	./sqlite3/sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	./sqlite3/sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	./sqlite3/sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	./sqlite3/sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	./sqlite3/sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	./sqlite3/sqlite3.c	/^nodeInsertCell($/;"	f	file:
nodeNew	./sqlite3/sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	./sqlite3/sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	./sqlite3/sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReference	./sqlite3/sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	./sqlite3/sqlite3.c	/^nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	./sqlite3/sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	./sqlite3/sqlite3.c	/^nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	./sqlite3/sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nodes	./compression/include/IMG3_ZipInterface.h	/^	list<ZIP_FileNode *> nodes;$/;"	m	class:IMG3_ZipInterface
nolockCheckReservedLock	./sqlite3/sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	./sqlite3/sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	./sqlite3/sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	./sqlite3/sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopMutexAlloc	./sqlite3/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	./sqlite3/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	./sqlite3/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	./sqlite3/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	./sqlite3/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	./sqlite3/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	./sqlite3/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
not	./sqlite3/sqlite3.c	/^  int not;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
notIndexed	./sqlite3/sqlite3.c	/^    u8 notIndexed;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	./sqlite3/sqlite3.c	/^  u8 notNull;      \/* True if there is a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notUsed1	./sqlite3/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:
nowValue	./sqlite3/sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	./sqlite3/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon20	file:
nullRow	./sqlite3/sqlite3.c	/^  Bool nullRow;         \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	./sqlite3/sqlite3.c	/^static void nullifFunc($/;"	f	file:
numberOfTags	./html/include/IMG3_HtmlParser.h	/^	uint32_t	numberOfTags;$/;"	m	class:IMG3_HtmlParser
numberOnDisk	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	numberOnDisk;$/;"	m	struct:ZIP_CentralDirectoryEnd
offset	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	offset;$/;"	m	struct:ZIP_FileNode
offset	./sqlite3/sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	./sqlite3/sqlite3.c	/^#define offsetof(/;"	d	file:
okOnePass	./sqlite3/sqlite3.c	/^  u8 okOnePass;        \/* Ok to use one-pass algorithm for UPDATE or DELETE *\/$/;"	m	struct:WhereInfo	file:
okVar	./sqlite3/sqlite3.c	/^  u8 okVar;               \/* True if azVar[] has been initialized *\/$/;"	m	struct:Vdbe	file:
oldLockingContext	./sqlite3/sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	./sqlite3/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	./sqlite3/include/sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
omit	./sqlite3/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
onError	./sqlite3/sqlite3.c	/^  u8 onError;      \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	./sqlite3/sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	./sqlite3/include/sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
op	./sqlite3/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	./sqlite3/sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	./sqlite3/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	./sqlite3/sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	./sqlite3/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	./sqlite3/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	./sqlite3/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	./sqlite3/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	./sqlite3/sqlite3.c	/^  u8 op2;                \/* If a TK_REGISTER, the original value of Expr.op *\/$/;"	m	struct:Expr	file:
opIterNext	./sqlite3/sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opPrecedence	./sqlite3/sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	./sqlite3/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	./sqlite3/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	./sqlite3/include/sqlite3ext.h	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
open	./sqlite3/sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	./sqlite3/include/sqlite3ext.h	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines
open16	./sqlite3/sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	./sqlite3/sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	./sqlite3/sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	./sqlite3/sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	./sqlite3/sqlite3.c	/^  int openFlags;                \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openFlags	./sqlite3/sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openStatTable	./sqlite3/sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	./sqlite3/sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	./sqlite3/include/sqlite3ext.h	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines
open_v2	./sqlite3/sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
openingTags	./html/include/IMG3_HtmlParser.h	/^	list<HtmlTagNode *> openingTags;$/;"	m	class:IMG3_HtmlParser
operatorMask	./sqlite3/sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	./sqlite3/sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
orconf	./sqlite3/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	./sqlite3/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	./sqlite3/include/sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
orderByConsumed	./sqlite3/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	./sqlite3/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
os2Access	./sqlite3/sqlite3.c	/^static int os2Access($/;"	f	file:
os2CheckReservedLock	./sqlite3/sqlite3.c	/^static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){$/;"	f	file:
os2Close	./sqlite3/sqlite3.c	/^static int os2Close( sqlite3_file *id ){$/;"	f	file:
os2CurrentTime	./sqlite3/sqlite3.c	/^int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){$/;"	f
os2Delete	./sqlite3/sqlite3.c	/^static int os2Delete($/;"	f	file:
os2DeviceCharacteristics	./sqlite3/sqlite3.c	/^static int os2DeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
os2DlClose	./sqlite3/sqlite3.c	/^  #define os2DlClose /;"	d	file:
os2DlClose	./sqlite3/sqlite3.c	/^static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
os2DlError	./sqlite3/sqlite3.c	/^  #define os2DlError /;"	d	file:
os2DlError	./sqlite3/sqlite3.c	/^static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
os2DlOpen	./sqlite3/sqlite3.c	/^  #define os2DlOpen /;"	d	file:
os2DlOpen	./sqlite3/sqlite3.c	/^static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
os2DlSym	./sqlite3/sqlite3.c	/^  #define os2DlSym /;"	d	file:
os2DlSym	./sqlite3/sqlite3.c	/^static void *os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol){$/;"	f	file:
os2File	./sqlite3/sqlite3.c	/^struct os2File {$/;"	s	file:
os2File	./sqlite3/sqlite3.c	/^typedef struct os2File os2File;$/;"	t	typeref:struct:os2File	file:
os2FileControl	./sqlite3/sqlite3.c	/^static int os2FileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
os2FileSize	./sqlite3/sqlite3.c	/^static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){$/;"	f	file:
os2FullPathname	./sqlite3/sqlite3.c	/^static int os2FullPathname($/;"	f	file:
os2GetLastError	./sqlite3/sqlite3.c	/^static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
os2IoMethod	./sqlite3/sqlite3.c	/^static const sqlite3_io_methods os2IoMethod = {$/;"	v	file:
os2Lock	./sqlite3/sqlite3.c	/^static int os2Lock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2MutexAlloc	./sqlite3/sqlite3.c	/^static sqlite3_mutex *os2MutexAlloc(int iType){$/;"	f	file:
os2MutexEnd	./sqlite3/sqlite3.c	/^static int os2MutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexEnter	./sqlite3/sqlite3.c	/^static void os2MutexEnter(sqlite3_mutex *p){$/;"	f	file:
os2MutexFree	./sqlite3/sqlite3.c	/^static void os2MutexFree(sqlite3_mutex *p){$/;"	f	file:
os2MutexHeld	./sqlite3/sqlite3.c	/^static int os2MutexHeld(sqlite3_mutex *p){$/;"	f	file:
os2MutexInit	./sqlite3/sqlite3.c	/^static int os2MutexInit(void){ return SQLITE_OK; }$/;"	f	file:
os2MutexLeave	./sqlite3/sqlite3.c	/^static void os2MutexLeave(sqlite3_mutex *p){$/;"	f	file:
os2MutexNotheld	./sqlite3/sqlite3.c	/^static int os2MutexNotheld(sqlite3_mutex *p){$/;"	f	file:
os2MutexTry	./sqlite3/sqlite3.c	/^static int os2MutexTry(sqlite3_mutex *p){$/;"	f	file:
os2Open	./sqlite3/sqlite3.c	/^static int os2Open($/;"	f	file:
os2Randomness	./sqlite3/sqlite3.c	/^static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){$/;"	f	file:
os2Read	./sqlite3/sqlite3.c	/^static int os2Read($/;"	f	file:
os2SectorSize	./sqlite3/sqlite3.c	/^static int os2SectorSize(sqlite3_file *id){$/;"	f	file:
os2Sleep	./sqlite3/sqlite3.c	/^static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){$/;"	f	file:
os2Sync	./sqlite3/sqlite3.c	/^static int os2Sync( sqlite3_file *id, int flags ){$/;"	f	file:
os2Truncate	./sqlite3/sqlite3.c	/^static int os2Truncate( sqlite3_file *id, i64 nByte ){$/;"	f	file:
os2Unlock	./sqlite3/sqlite3.c	/^static int os2Unlock( sqlite3_file *id, int locktype ){$/;"	f	file:
os2Write	./sqlite3/sqlite3.c	/^static int os2Write($/;"	f	file:
overflow	./sqlite3/sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	./sqlite3/include/sqlite3ext.h	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines
overload_function	./sqlite3/sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	./sqlite3/sqlite3.c	/^  TID  owner;       \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	./sqlite3/sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	./sqlite3/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	./sqlite3/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:
p1	./sqlite3/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	./sqlite3/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	./sqlite3/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	./sqlite3/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	./sqlite3/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	./sqlite3/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	./sqlite3/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	./sqlite3/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p4	./sqlite3/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:
p4type	./sqlite3/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	./sqlite3/sqlite3.c	/^  u8 op, p5;            \/* Opcode and P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	./sqlite3/sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	./sqlite3/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	./sqlite3/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	./sqlite3/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	./sqlite3/sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if eOperator==WO_AND *\/$/;"	m	union:WhereTerm::__anon17	file:
pAppData	./sqlite3/include/sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	./sqlite3/include/sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pAppData	./sqlite3/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	./sqlite3/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	./sqlite3/include/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	./sqlite3/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	./sqlite3/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArray	./sqlite3/sqlite3.c	/^  Fts3SegReaderArray *pArray;     \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pAuthArg	./sqlite3/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	./sqlite3/sqlite3.c	/^    void *pAux;                   \/* Aux data for the i-th argument *\/$/;"	m	struct:VdbeFunc::AuxData	file:
pAux	./sqlite3/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pBackup	./sqlite3/sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlockingConnection	./sqlite3/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	./sqlite3/sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	./sqlite3/sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	./sqlite3/sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	./sqlite3/sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	./sqlite3/sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	./sqlite3/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	./sqlite3/sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	./sqlite3/sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBusyHandlerArg	./sqlite3/sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	./sqlite3/sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	./sqlite3/sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	./sqlite3/sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCell	./sqlite3/sqlite3.c	/^    u8 *pCell;          \/* Pointers to the body of the overflow cell *\/$/;"	m	struct:MemPage::_OvflCell	file:
pCell	./sqlite3/sqlite3.c	/^  u8 *pCell;     \/* Pointer to the start of cell content *\/$/;"	m	struct:CellInfo	file:
pCheck	./sqlite3/sqlite3.c	/^  Expr *pCheck;        \/* The AND of all CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	./sqlite3/sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	./sqlite3/sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	./sqlite3/sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	./sqlite3/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:
pColl	./sqlite3/sqlite3.c	/^  CollSeq *pColl;        \/* The collation type of the column or 0 *\/$/;"	m	struct:Expr	file:
pColl	./sqlite3/sqlite3.c	/^  CollSeq *pColl;       \/* Collating sequence *\/$/;"	m	struct:sqlite3_context	file:
pCollNeededArg	./sqlite3/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pColumns	./sqlite3/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	./sqlite3/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pContext	./sqlite3/include/sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pContext	./sqlite3/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	./sqlite3/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pContext	./sqlite3/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeMatchArg	file:
pCsr	./sqlite3/sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	./sqlite3/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	./sqlite3/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCtx	./sqlite3/sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	./sqlite3/sqlite3.c	/^  char *pCurrent;$/;"	m	struct:Fts3Expr	file:
pCursor	./sqlite3/sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	./sqlite3/sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	./sqlite3/sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	./sqlite3/sqlite3.c	/^  void *pData;                   \/* Content of this page *\/$/;"	m	struct:PgHdr	file:
pDbFd	./sqlite3/sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	./sqlite3/sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	./sqlite3/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::__anon11	file:
pDeferred	./sqlite3/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	./sqlite3/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	./sqlite3/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	./sqlite3/sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	./sqlite3/sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	./sqlite3/sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	./sqlite3/sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	./sqlite3/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	./sqlite3/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	./sqlite3/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	./sqlite3/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	./sqlite3/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	./sqlite3/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	./sqlite3/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	./sqlite3/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	./sqlite3/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	./sqlite3/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of named expressions *\/$/;"	m	struct:NameContext	file:
pEnd	./sqlite3/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	./sqlite3/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	./sqlite3/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	./sqlite3/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	./sqlite3/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	./sqlite3/sqlite3.c	/^    Expr *pExpr;           \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	./sqlite3/sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	./sqlite3/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	./sqlite3/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	./sqlite3/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExpr	./sqlite3/sqlite3.c	/^  Fts3Expr *pExpr;$/;"	m	struct:ExprAndCost	file:
pExprList	./sqlite3/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE.  VALUES clause for INSERT *\/$/;"	m	struct:TriggerStep	file:
pExtra	./sqlite3/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pFKey	./sqlite3/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFiller	./sqlite3/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFirst	./sqlite3/sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	./sqlite3/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pFirst	./sqlite3/sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	./sqlite3/sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pFrame	./sqlite3/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::__anon11	file:
pFrame	./sqlite3/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	./sqlite3/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	./sqlite3/sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	./sqlite3/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	./sqlite3/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFunc	./sqlite3/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	./sqlite3/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:
pFunc	./sqlite3/sqlite3.c	/^  FuncDef *pFunc;               \/* The definition of the function *\/$/;"	m	struct:VdbeFunc	file:
pFunc	./sqlite3/sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information.  MUST BE FIRST *\/$/;"	m	struct:sqlite3_context	file:
pGeom	./sqlite3/sqlite3.c	/^  sqlite3_rtree_geometry *pGeom;  \/* Constraint callback argument for a MATCH *\/$/;"	m	struct:RtreeConstraint	file:
pGroup	./sqlite3/sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	./sqlite3/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	./sqlite3/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	./sqlite3/sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	./sqlite3/sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	./sqlite3/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	./sqlite3/sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	./sqlite3/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	./sqlite3/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:
pId	./sqlite3/sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	./sqlite3/sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	./sqlite3/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	./sqlite3/sqlite3.c	/^    Index *pIdx;                   \/* Index when WHERE_INDEXED is true *\/$/;"	m	union:WherePlan::__anon6	file:
pIdxInfo	./sqlite3/sqlite3.c	/^  sqlite3_index_info *pIdxInfo;  \/* Index info for n-th source table *\/$/;"	m	struct:WhereLevel	file:
pInJournal	./sqlite3/sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	./sqlite3/sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIndex	./sqlite3/sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	./sqlite3/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInitMutex	./sqlite3/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	./sqlite3/sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	./sqlite3/sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	./sqlite3/sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	./sqlite3/sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	./sqlite3/sqlite3.c	/^  const char *pKey; int nKey;  \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	./sqlite3/sqlite3.c	/^  void *pKey;      \/* Saved key that was cursor's last known position *\/$/;"	m	struct:BtCursor	file:
pKey	./sqlite3/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	./sqlite3/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:
pKeyInfo	./sqlite3/sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	./sqlite3/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	./sqlite3/sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	./sqlite3/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	./sqlite3/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pLast	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	./sqlite3/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	./sqlite3/sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	./sqlite3/sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	./sqlite3/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	./sqlite3/sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	./sqlite3/sqlite3.c	/^    ExprList *pList;     \/* Function arguments or in "<expr> IN (<expr-list)" *\/$/;"	m	union:Expr::__anon5	file:
pList	./sqlite3/sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	./sqlite3/sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	./sqlite3/sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pLock	./sqlite3/sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	./sqlite3/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLruHead	./sqlite3/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	./sqlite3/sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	./sqlite3/sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	./sqlite3/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	./sqlite3/sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMaskSet	./sqlite3/sqlite3.c	/^  WhereMaskSet *pMaskSet;  \/* Mapping of table cursor numbers to bitmasks *\/$/;"	m	struct:WhereClause	file:
pMem	./sqlite3/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:
pMem	./sqlite3/sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMethod	./sqlite3/sqlite3.c	/^  const sqlite3_io_methods *pMethod;  \/* Always the first entry *\/$/;"	m	struct:os2File	file:
pMethod	./sqlite3/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	./sqlite3/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	./sqlite3/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	./sqlite3/sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	./sqlite3/include/sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pMethods	./sqlite3/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMod	./sqlite3/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pModule	./sqlite3/include/sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pModule	./sqlite3/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	./sqlite3/sqlite3.c	/^  const sqlite3_module *pModule;     \/* Module for cursor pVtabCursor *\/$/;"	m	struct:VdbeCursor	file:
pModule	./sqlite3/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	./sqlite3/sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	./sqlite3/sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon10	file:
pName	./sqlite3/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNewTable	./sqlite3/sqlite3.c	/^  Table *pNewTable;    \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	./sqlite3/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	./sqlite3/include/sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pNext	./sqlite3/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	./sqlite3/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	./sqlite3/sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	./sqlite3/sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	./sqlite3/sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	./sqlite3/sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	./sqlite3/sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	./sqlite3/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	./sqlite3/sqlite3.c	/^  Index *pNext;    \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	./sqlite3/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	./sqlite3/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	./sqlite3/sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	./sqlite3/sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	./sqlite3/sqlite3.c	/^  RtreeNode *pNext;                 \/* Next node in this hash chain *\/$/;"	m	struct:RtreeNode	file:
pNext	./sqlite3/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	./sqlite3/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	./sqlite3/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	./sqlite3/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	./sqlite3/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	./sqlite3/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	./sqlite3/sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	./sqlite3/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	./sqlite3/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	./sqlite3/sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	./sqlite3/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	./sqlite3/sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	./sqlite3/sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	./sqlite3/sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	./sqlite3/sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	./sqlite3/sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	./sqlite3/sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextBlocked	./sqlite3/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	./sqlite3/sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextFrom	./sqlite3/sqlite3.c	/^  FKey *pNextFrom;  \/* Next foreign key in pFrom *\/$/;"	m	struct:FKey	file:
pNextId	./sqlite3/sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextTo	./sqlite3/sqlite3.c	/^  FKey *pNextTo;    \/* Next foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pNextZombie	./sqlite3/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	./sqlite3/sqlite3.c	/^  RtreeNode *pNode;                 \/* Node cursor is currently pointing at *\/$/;"	m	struct:RtreeCursor	file:
pOffset	./sqlite3/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	./sqlite3/sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	./sqlite3/sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	./sqlite3/sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	./sqlite3/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	./sqlite3/sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if eOperator==WO_OR *\/$/;"	m	union:WhereTerm::__anon17	file:
pOrderBy	./sqlite3/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pPCache	./sqlite3/sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	./sqlite3/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	./sqlite3/sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	./sqlite3/sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	./sqlite3/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	./sqlite3/sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	./sqlite3/sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	./sqlite3/sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	./sqlite3/sqlite3.c	/^  RtreeNode *pParent;               \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	./sqlite3/sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	./sqlite3/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;           \/* The parser context *\/$/;"	m	struct:WhereClause	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;       \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	./sqlite3/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pPhrase	./sqlite3/sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	./sqlite3/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	./sqlite3/sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	./sqlite3/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	./sqlite3/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	./sqlite3/sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	./sqlite3/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous foreign key on table named zTo *\/$/;"	m	struct:FKey	file:
pPrior	./sqlite3/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	./sqlite3/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	./sqlite3/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:
pProgram	./sqlite3/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	./sqlite3/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	./sqlite3/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	./sqlite3/sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReal	./sqlite3/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:
pReal	./sqlite3/sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pReprepare	./sqlite3/sqlite3.c	/^  Vdbe *pReprepare;    \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResultSet	./sqlite3/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	./sqlite3/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	./sqlite3/sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	./sqlite3/sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRightmost	./sqlite3/sqlite3.c	/^  Select *pRightmost;    \/* Right-most select in a compound select statement *\/$/;"	m	struct:Select	file:
pRollbackArg	./sqlite3/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRowSet	./sqlite3/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::__anon11	file:
pSavepoint	./sqlite3/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	./sqlite3/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	./sqlite3/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	./sqlite3/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	./sqlite3/sqlite3.c	/^  Schema *pSchema; \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	./sqlite3/sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	./sqlite3/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	./sqlite3/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	./sqlite3/sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	./sqlite3/sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegments	./sqlite3/sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	./sqlite3/sqlite3.c	/^    Select *pSelect;     \/* Used for sub-selects and "<expr> IN (<select>)" *\/$/;"	m	union:Expr::__anon5	file:
pSelect	./sqlite3/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	./sqlite3/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	./sqlite3/sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSem	./sqlite3/sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	./sqlite3/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	./sqlite3/sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	./sqlite3/sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	./sqlite3/sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	./sqlite3/sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	./sqlite3/sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSrc	./sqlite3/sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	./sqlite3/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrcDb	./sqlite3/sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	./sqlite3/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	./sqlite3/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	./sqlite3/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	./sqlite3/sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	./sqlite3/sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	./sqlite3/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	./sqlite3/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	./sqlite3/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	./sqlite3/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTabList	./sqlite3/sqlite3.c	/^  SrcList *pTabList;             \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	./sqlite3/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	./sqlite3/sqlite3.c	/^  Table *pTable;   \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	./sqlite3/sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTerm	./sqlite3/sqlite3.c	/^    struct WhereTerm *pTerm;       \/* WHERE clause term for OR-search *\/$/;"	m	union:WherePlan::__anon6	typeref:struct:WherePlan::__anon6::WhereTerm	file:
pTmpSpace	./sqlite3/sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	./sqlite3/sqlite3.c	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared	file:
pToken	./sqlite3/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	./sqlite3/sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	./sqlite3/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	./sqlite3/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	./sqlite3/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	./sqlite3/sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTree	./sqlite3/sqlite3.c	/^  struct RowSetEntry *pTree;     \/* Binary tree of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pTrig	./sqlite3/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	./sqlite3/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	./sqlite3/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	./sqlite3/sqlite3.c	/^ #undef pTrigger$/;"	d	file:
pTriggerPrg	./sqlite3/sqlite3.c	/^  TriggerPrg *pTriggerPrg;    \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	./sqlite3/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	./sqlite3/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	./sqlite3/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnused	./sqlite3/sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	./sqlite3/sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	./sqlite3/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	./sqlite3/include/sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pUser	./sqlite3/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	./sqlite3/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	./sqlite3/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	./sqlite3/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	./sqlite3/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTab	./sqlite3/sqlite3.c	/^  Table *pVTab;                 \/* vtab with active Connect\/Create method *\/$/;"	m	struct:sqlite3	file:
pVTable	./sqlite3/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVdbe	./sqlite3/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	./sqlite3/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeFunc	./sqlite3/sqlite3.c	/^    VdbeFunc *pVdbeFunc;   \/* Used when p4type is P4_VDBEFUNC *\/$/;"	m	union:VdbeOp::__anon1	file:
pVdbeFunc	./sqlite3/sqlite3.c	/^  VdbeFunc *pVdbeFunc;  \/* Auxilary data, if created. *\/$/;"	m	struct:sqlite3_context	file:
pVfs	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	./sqlite3/sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	./sqlite3/include/sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
pVtab	./sqlite3/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:
pVtab	./sqlite3/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	./sqlite3/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCursor	./sqlite3/sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pVtabIdx	./sqlite3/sqlite3.c	/^    sqlite3_index_info *pVtabIdx;  \/* Virtual table index to use *\/$/;"	m	union:WherePlan::__anon6	file:
pWC	./sqlite3/sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWC	./sqlite3/sqlite3.c	/^  struct WhereClause *pWC;       \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	typeref:struct:WhereInfo::WhereClause	file:
pWal	./sqlite3/sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	./sqlite3/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	./sqlite3/sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	./sqlite3/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	./sqlite3/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	./sqlite3/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWriteNode	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	./sqlite3/sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	./sqlite3/sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	./sqlite3/sqlite3.c	/^  Table *pZombieTab;      \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
padding	./compression/include/IMG3_LzssInterface.h	/^    uint8_t  padding[0x16c];$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
pageHash	./sqlite3/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	./sqlite3/sqlite3.c	/^static int pageInJournal(PgHdr *pPg){$/;"	f	file:
pageReinit	./sqlite3/sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	./sqlite3/sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	./sqlite3/sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pageSizeFixed	./sqlite3/sqlite3.c	/^  u8 pageSizeFixed;     \/* True if the page size can no longer be changed *\/$/;"	m	struct:BtShared	file:
pagerBeginReadTransaction	./sqlite3/sqlite3.c	/^# define pagerBeginReadTransaction(/;"	d	file:
pagerBeginReadTransaction	./sqlite3/sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerExclusiveLock	./sqlite3/sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerLockDb	./sqlite3/sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	./sqlite3/sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	./sqlite3/sqlite3.c	/^# define pagerOpenWalIfPresent(/;"	d	file:
pagerOpenWalIfPresent	./sqlite3/sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpentemp	./sqlite3/sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	./sqlite3/sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	./sqlite3/sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReportSize	./sqlite3/sqlite3.c	/^# define pagerReportSize(/;"	d	file:
pagerReportSize	./sqlite3/sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerRollbackWal	./sqlite3/sqlite3.c	/^# define pagerRollbackWal(/;"	d	file:
pagerRollbackWal	./sqlite3/sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerStress	./sqlite3/sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	./sqlite3/sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	./sqlite3/sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	./sqlite3/sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	./sqlite3/sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	./sqlite3/sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	./sqlite3/sqlite3.c	/^# define pagerUseWal(/;"	d	file:
pagerUseWal	./sqlite3/sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerWalFrames	./sqlite3/sqlite3.c	/^# define pagerWalFrames(/;"	d	file:
pagerWalFrames	./sqlite3/sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pager_cksum	./sqlite3/sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	./sqlite3/sqlite3.c	/^#define pager_datahash(/;"	d	file:
pager_datahash	./sqlite3/sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_delmaster	./sqlite3/sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	./sqlite3/sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster){$/;"	f	file:
pager_error	./sqlite3/sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	./sqlite3/sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_lookup	./sqlite3/sqlite3.c	/^static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){$/;"	f	file:
pager_open_journal	./sqlite3/sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	./sqlite3/sqlite3.c	/^#define pager_pagehash(/;"	d	file:
pager_pagehash	./sqlite3/sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_playback	./sqlite3/sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	./sqlite3/sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	./sqlite3/sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	./sqlite3/sqlite3.c	/^#define pager_set_pagehash(/;"	d	file:
pager_set_pagehash	./sqlite3/sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_truncate	./sqlite3/sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	./sqlite3/sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	./sqlite3/sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	./sqlite3/sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	./sqlite3/sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	./sqlite3/sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parent	./compression/include/IMG3_LzssInterface.h	/^    int lchild[IMG3_LZSSINTERFACE_N+1], rchild[IMG3_LZSSINTERFACE_N+257], parent[IMG3_LZSSINTERFACE_N+1];$/;"	m	struct:encode_state
parentWrite	./sqlite3/sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseCell	./sqlite3/sqlite3.c	/^#define parseCell(/;"	d	file:
parseDateOrTime	./sqlite3/sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseError	./sqlite3/sqlite3.c	/^  u8 parseError;       \/* True after a parsing error.  Ticket #1794 *\/$/;"	m	struct:Parse	file:
parseHhMmSs	./sqlite3/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	./sqlite3/sqlite3.c	/^static int parseModifier(const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	./sqlite3/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	./sqlite3/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
patchFileName	./IMG3_Main.cpp	/^char *patchFileName = NULL;$/;"	v
pathToDel	./sqlite3/sqlite3.c	/^  char* pathToDel;          \/* Name of file to delete on close, NULL if not *\/$/;"	m	struct:os2File	file:
patternCompare	./sqlite3/sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	./sqlite3/sqlite3.c	/^  int payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	./sqlite3/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	./sqlite3/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache	./sqlite3/sqlite3.c	/^  sqlite3_pcache_methods pcache;    \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcache1	./sqlite3/sqlite3.c	/^#define pcache1 /;"	d	file:
pcache1Alloc	./sqlite3/sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	./sqlite3/sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	./sqlite3/sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	./sqlite3/sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int bPurgeable){$/;"	f	file:
pcache1Destroy	./sqlite3/sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	./sqlite3/sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	./sqlite3/sqlite3.c	/^#define pcache1EnterMutex(/;"	d	file:
pcache1Fetch	./sqlite3/sqlite3.c	/^static void *pcache1Fetch(sqlite3_pcache *p, unsigned int iKey, int createFlag){$/;"	f	file:
pcache1Free	./sqlite3/sqlite3.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	./sqlite3/sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	./sqlite3/sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	./sqlite3/sqlite3.c	/^#define pcache1LeaveMutex(/;"	d	file:
pcache1MemSize	./sqlite3/sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	./sqlite3/sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	./sqlite3/sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	./sqlite3/sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	./sqlite3/sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	./sqlite3/sqlite3.c	/^static int pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shutdown	./sqlite3/sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	./sqlite3/sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	./sqlite3/sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	./sqlite3/sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	./sqlite3/sqlite3.c	/^static void pcache1Unpin(sqlite3_pcache *p, void *pPg, int reuseUnlikely){$/;"	f	file:
pcache1_g	./sqlite3/sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcacheAddToDirtyList	./sqlite3/sqlite3.c	/^static void pcacheAddToDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheCheckSynced	./sqlite3/sqlite3.c	/^static int pcacheCheckSynced(PCache *pCache){$/;"	f	file:
pcacheMergeDirtyList	./sqlite3/sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheRemoveFromDirtyList	./sqlite3/sqlite3.c	/^static void pcacheRemoveFromDirtyList(PgHdr *pPage){$/;"	f	file:
pcacheSortDirtyList	./sqlite3/sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	./sqlite3/sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pendingTerms	./sqlite3/sqlite3.c	/^  Fts3Hash pendingTerms;$/;"	m	struct:Fts3Table	file:
pgno	./sqlite3/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	./sqlite3/sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	./sqlite3/sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
plan	./sqlite3/sqlite3.c	/^  WherePlan plan;       \/* query plan for this element of the FROM clause *\/$/;"	m	struct:WhereLevel	file:
plan	./sqlite3/sqlite3.c	/^  WherePlan plan;    \/* The lookup strategy *\/$/;"	m	struct:WhereCost	file:
pnBytesFreed	./sqlite3/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
porterClose	./sqlite3/sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	./sqlite3/sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	./sqlite3/sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	./sqlite3/sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	./sqlite3/sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	./sqlite3/sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	./sqlite3/sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	./sqlite3/sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	./sqlite3/sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	./sqlite3/sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	./sqlite3/sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	./sqlite3/sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
ppNextElem	./sqlite3/sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
prefix	./sqlite3/sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	./sqlite3/include/sqlite3ext.h	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prepare	./sqlite3/sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	./sqlite3/include/sqlite3ext.h	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare16	./sqlite3/sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	./sqlite3/include/sqlite3ext.h	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines
prepare16_v2	./sqlite3/sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v2	./sqlite3/include/sqlite3ext.h	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines
prepare_v2	./sqlite3/sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereqAll	./sqlite3/sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	./sqlite3/sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	./sqlite3/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
prev	./sqlite3/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	./sqlite3/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	./sqlite3/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	./sqlite3/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
print_pager_state	./sqlite3/sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
profile	./sqlite3/include/sqlite3ext.h	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines
profile	./sqlite3/sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	./sqlite3/include/sqlite3ext.h	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
progress_handler	./sqlite3/sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	./sqlite3/sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	./sqlite3/sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	./sqlite3/sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	./sqlite3/sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	./sqlite3/sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	./sqlite3/sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	./sqlite3/sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	./sqlite3/sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	./sqlite3/sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	./sqlite3/sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	./sqlite3/sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	./sqlite3/sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	./sqlite3/sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	./sqlite3/sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	./sqlite3/sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	./sqlite3/sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	./sqlite3/sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	./sqlite3/sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	./sqlite3/sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pthreadMutexAlloc	./sqlite3/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	./sqlite3/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	./sqlite3/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	./sqlite3/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	./sqlite3/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	./sqlite3/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	./sqlite3/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	./sqlite3/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	./sqlite3/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	./sqlite3/sqlite3.c	/^  #define ptrmapGet(/;"	d	file:
ptrmapGet	./sqlite3/sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapPageno	./sqlite3/sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	./sqlite3/sqlite3.c	/^  #define ptrmapPut(/;"	d	file:
ptrmapPut	./sqlite3/sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	./sqlite3/sqlite3.c	/^  #define ptrmapPutOvflPtr(/;"	d	file:
ptrmapPutOvflPtr	./sqlite3/sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
pushOntoSorter	./sqlite3/sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	./sqlite3/sqlite3.c	/^#define put2byte(/;"	d	file:
put32bits	./sqlite3/sqlite3.c	/^#define put32bits(/;"	d	file:
put4byte	./sqlite3/sqlite3.c	/^#define put4byte /;"	d	file:
putVarint	./sqlite3/sqlite3.c	/^#define putVarint /;"	d	file:
putVarint32	./sqlite3/sqlite3.c	/^#define putVarint32(/;"	d	file:
pzErrMsg	./sqlite3/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon9	file:
querySharedCacheTableLock	./sqlite3/sqlite3.c	/^  #define querySharedCacheTableLock(/;"	d	file:
querySharedCacheTableLock	./sqlite3/sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
queryTestTokenizer	./sqlite3/sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	./sqlite3/sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	./sqlite3/sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	./sqlite3/sqlite3.c	/^    double r;       \/* Value if eType is SQLITE_FLOAT or SQLITE_INTEGER *\/$/;"	m	union:IndexSample::__anon3	file:
r	./sqlite3/sqlite3.c	/^  double r;           \/* Real value *\/$/;"	m	struct:Mem	file:
rCost	./sqlite3/sqlite3.c	/^  double rCost;      \/* Overall cost of pursuing this search strategy *\/$/;"	m	struct:WhereCost	file:
rSum	./sqlite3/sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rValue	./sqlite3/sqlite3.c	/^  double rValue;                  \/* Constraint value. *\/$/;"	m	struct:RtreeConstraint	file:
randomBlob	./sqlite3/sqlite3.c	/^static void randomBlob($/;"	f	file:
randomByte	./sqlite3/sqlite3.c	/^static u8 randomByte(void){$/;"	f	file:
randomFill	./sqlite3/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	./sqlite3/sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	./sqlite3/include/sqlite3ext.h	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines
randomness	./sqlite3/sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
rc	./sqlite3/sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	./sqlite3/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	./sqlite3/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	./sqlite3/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon9	file:
rc	./sqlite3/sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rchild	./compression/include/IMG3_LzssInterface.h	/^    int lchild[IMG3_LZSSINTERFACE_N+1], rchild[IMG3_LZSSINTERFACE_N+257], parent[IMG3_LZSSINTERFACE_N+1];$/;"	m	struct:encode_state
read32bits	./sqlite3/sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	./sqlite3/sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	./sqlite3/sqlite3.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readInt16	./sqlite3/sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	./sqlite3/sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	./sqlite3/sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	./sqlite3/sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	./sqlite3/sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	./sqlite3/sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	./sqlite3/sqlite3.c	/^  u8 readOnly;               \/* True if the WAL file is open read-only *\/$/;"	m	struct:Wal	file:
readOnly	./sqlite3/sqlite3.c	/^  u8 readOnly;            \/* True for read-only statements *\/$/;"	m	struct:Vdbe	file:
readOnly	./sqlite3/sqlite3.c	/^  u8 readOnly;          \/* True if the underlying file is readonly *\/$/;"	m	struct:BtShared	file:
readpoint	./sqlite3/sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	./sqlite3/sqlite3.c	/^static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){$/;"	f	file:
realloc	./sqlite3/include/sqlite3ext.h	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines
realloc	./sqlite3/sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
referencesOtherTables	./sqlite3/sqlite3.c	/^static int referencesOtherTables($/;"	f	file:
regCtr	./sqlite3/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regRoot	./sqlite3/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	./sqlite3/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	./sqlite3/sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	./sqlite3/sqlite3.c	/^static void registerTrace(FILE *out, int iReg, Mem *p){$/;"	f	file:
rehash	./sqlite3/sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	./sqlite3/sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	./sqlite3/sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	./sqlite3/sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	./sqlite3/sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	./sqlite3/sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	./sqlite3/sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	./sqlite3/sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	./sqlite3/include/sqlite3ext.h	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines
release_memory	./sqlite3/sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	./sqlite3/sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	./sqlite3/sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	./sqlite3/sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	./sqlite3/sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	./sqlite3/sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	./sqlite3/sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
renameParentFunc	./sqlite3/sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	./sqlite3/sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	./sqlite3/sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	./sqlite3/sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	./sqlite3/sqlite3.c	/^static void replaceFunc($/;"	f	file:
reserved	./sqlite3/sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	./sqlite3/include/sqlite3ext.h	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines
reset	./sqlite3/sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	./sqlite3/sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resolveAlias	./sqlite3/sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	./sqlite3/sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	./sqlite3/sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	./sqlite3/sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	./sqlite3/sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	./sqlite3/sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	./sqlite3/sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	./sqlite3/sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	./sqlite3/sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	./sqlite3/sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	./sqlite3/sqlite3.c	/^#define restoreCursorPosition(/;"	d	file:
result_blob	./sqlite3/include/sqlite3ext.h	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_blob	./sqlite3/sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_double	./sqlite3/include/sqlite3ext.h	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines
result_double	./sqlite3/sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	./sqlite3/include/sqlite3ext.h	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines
result_error	./sqlite3/sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	./sqlite3/include/sqlite3ext.h	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines
result_error16	./sqlite3/sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	./sqlite3/include/sqlite3ext.h	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_error_code	./sqlite3/sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	./sqlite3/include/sqlite3ext.h	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_error_nomem	./sqlite3/sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	./sqlite3/include/sqlite3ext.h	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_error_toobig	./sqlite3/sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	./sqlite3/include/sqlite3ext.h	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_int	./sqlite3/sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	./sqlite3/include/sqlite3ext.h	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines
result_int64	./sqlite3/sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	./sqlite3/include/sqlite3ext.h	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
result_null	./sqlite3/sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	./sqlite3/include/sqlite3ext.h	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text	./sqlite3/sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	./sqlite3/include/sqlite3ext.h	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16	./sqlite3/sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	./sqlite3/include/sqlite3ext.h	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16be	./sqlite3/sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	./sqlite3/include/sqlite3ext.h	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines
result_text16le	./sqlite3/sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_value	./sqlite3/include/sqlite3ext.h	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
result_value	./sqlite3/sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	./sqlite3/include/sqlite3ext.h	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines
result_zeroblob	./sqlite3/sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	./sqlite3/sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	./sqlite3/sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
rollback_hook	./sqlite3/include/sqlite3ext.h	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines
rollback_hook	./sqlite3/sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
roundFunc	./sqlite3/sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetListToTree	./sqlite3/sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetMerge	./sqlite3/sqlite3.c	/^static struct RowSetEntry *rowSetMerge($/;"	f	file:
rowSetNDeepTree	./sqlite3/sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetSort	./sqlite3/sqlite3.c	/^static void rowSetSort(RowSet *p){$/;"	f	file:
rowSetToList	./sqlite3/sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	./sqlite3/sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	./sqlite3/sqlite3.c	/^  i64 rowid;          \/* Used by UNPACKED_PREFIX_SEARCH *\/$/;"	m	struct:UnpackedRecord	file:
rowidIsValid	./sqlite3/sqlite3.c	/^  Bool rowidIsValid;    \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor	file:
rowidWrite	./sqlite3/sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rtreeBestIndex	./sqlite3/sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeClose	./sqlite3/sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	./sqlite3/sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	./sqlite3/sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	./sqlite3/sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDestroy	./sqlite3/sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	./sqlite3/sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEof	./sqlite3/sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	./sqlite3/sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeInit	./sqlite3/sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	./sqlite3/sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeModule	./sqlite3/sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	./sqlite3/sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeOpen	./sqlite3/sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeReference	./sqlite3/sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	./sqlite3/sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	./sqlite3/sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	./sqlite3/sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSqlInit	./sqlite3/sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeUpdate	./sqlite3/sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreedepth	./sqlite3/sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	./sqlite3/sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	./sqlite3/sqlite3.c	/^  u8 runOnlyOnce;         \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	./sqlite3/sqlite3.c	/^  Mem s;                \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
s	./sqlite3/sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	./sqlite3/sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	./sqlite3/sqlite3.c	/^  Token sArg;                \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	./sqlite3/sqlite3.c	/^  struct sColMap {  \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	./sqlite3/sqlite3.c	/^  Token sLastToken;    \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sNameToken	./sqlite3/sqlite3.c	/^  Token sNameToken;    \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
safety_level	./sqlite3/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
saveAllCursors	./sqlite3/sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	./sqlite3/sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
savedNQueryLoop	./sqlite3/sqlite3.c	/^  double savedNQueryLoop;        \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	./sqlite3/sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	./sqlite3/sqlite3.c	/^static void scalarFunc($/;"	f	file:
schemaIsValid	./sqlite3/sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	./sqlite3/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	./sqlite3/sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
section	./IMG3_Main.cpp	/^char *section = NULL;$/;"	v
section	./includes/IMG3_typedefs.h	/^	char *section;$/;"	m	struct:DecryptionInfo
sections	./sections/include/IMG3_FileInterface.h	/^	list<IMG3_FileSection *> sections;$/;"	m	class:IMG3_FileInterface
sectorSize	./sqlite3/sqlite3.c	/^  DWORD sectorSize;       \/* Sector size of the device file is on *\/$/;"	m	struct:winFile	file:
sectorSize	./sqlite3/sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
secureDelete	./sqlite3/sqlite3.c	/^  u8 secureDelete;      \/* True if secure_delete is enabled *\/$/;"	m	struct:BtShared	file:
seekAndRead	./sqlite3/sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	./sqlite3/sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekResult	./sqlite3/sqlite3.c	/^  int seekResult;$/;"	m	struct:VdbeCursor	file:
seekWinFile	./sqlite3/sqlite3.c	/^static int seekWinFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
selFlags	./sqlite3/sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	./sqlite3/sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	./sqlite3/sqlite3.c	/^static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	./sqlite3/sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	./sqlite3/sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	./sqlite3/sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	./sqlite3/sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	./sqlite3/sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
semCheckReservedLock	./sqlite3/sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	./sqlite3/sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	./sqlite3/sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	./sqlite3/sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	./sqlite3/sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
setChildPtrmaps	./sqlite3/sqlite3.c	/^# define setChildPtrmaps(/;"	d	file:
setChildPtrmaps	./sqlite3/sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setDateTimeToCurrent	./sqlite3/sqlite3.c	/^static void setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	./sqlite3/sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setJoinExpr	./sqlite3/sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	./sqlite3/sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	./sqlite3/sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPendingFd	./sqlite3/sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	./sqlite3/sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	./sqlite3/sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	./sqlite3/sqlite3.c	/^  #define setSharedCacheTableLock(/;"	d	file:
setSharedCacheTableLock	./sqlite3/sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
set_authorizer	./sqlite3/include/sqlite3ext.h	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);$/;"	m	struct:sqlite3_api_routines
set_authorizer	./sqlite3/sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	./sqlite3/include/sqlite3ext.h	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines
set_auxdata	./sqlite3/sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	./sqlite3/sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	./sqlite3/sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	./sqlite3/sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	./sqlite3/sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	./sqlite3/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	./sqlite3/sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	./sqlite3/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	./sqlite3/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	./sqlite3/sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
sig	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	sig;$/;"	m	struct:ZIP_CentralDirectoryEnd
sig	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	sig;$/;"	m	struct:ZIP_CentralDirectoryHeader
sig	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	sig;$/;"	m	struct:ZIP_LocalHeader
signature	./compression/include/IMG3_LzssInterface.h	/^    uint32_t signature;$/;"	m	struct:IMG3_LzssInterface_CompressionHeader
simpleClose	./sqlite3/sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	./sqlite3/sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	./sqlite3/sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	./sqlite3/sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	./sqlite3/sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	./sqlite3/sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	./sqlite3/sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	./sqlite3/sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	./sqlite3/sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	./sqlite3/sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	./sqlite3/sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	./sqlite3/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
sjfd	./sqlite3/sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipNext	./sqlite3/sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor	file:
sleep	./sqlite3/include/sqlite3ext.h	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines
sleep	./sqlite3/sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
snprintf	./sqlite3/include/sqlite3ext.h	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines
snprintf	./sqlite3/sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	./sqlite3/sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	./sqlite3/include/sqlite3ext.h	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines
soft_heap_limit	./sqlite3/sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	./sqlite3/sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortOrder	./sqlite3/sqlite3.c	/^    u8 sortOrder;          \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sortedTags	./html/include/IMG3_HtmlParser.h	/^	list<pair<HtmlTagNode *,HtmlTagNode *> > sortedTags;$/;"	m	class:IMG3_HtmlParser
sortingIdx	./sqlite3/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
soundexFunc	./sqlite3/sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	./sqlite3/sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	./sqlite3/sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	./sqlite3/sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	./sqlite3/sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	./sqlite3/sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	./sqlite3/sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	./sqlite3/sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeGuttman	./sqlite3/sqlite3.c	/^static int splitNodeGuttman($/;"	f	file:
splitNodeStartree	./sqlite3/sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	./sqlite3/include/sqlite3ext.h	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
sql	./sqlite3/sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3	./sqlite3/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	./sqlite3/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AddCheckConstraint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddNotNull	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn){$/;"	f
sqlite3AlterBeginAddColumn	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ApiExit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	./sqlite3/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	./sqlite3/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3ArrayAllocate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	./sqlite3/sqlite3.c	/^# define sqlite3AuthCheck(/;"	d	file:
sqlite3AuthCheck	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthContextPop	./sqlite3/sqlite3.c	/^# define sqlite3AuthContextPop(/;"	d	file:
sqlite3AuthContextPop	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPush	./sqlite3/sqlite3.c	/^# define sqlite3AuthContextPush(/;"	d	file:
sqlite3AuthContextPush	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthRead	./sqlite3/sqlite3.c	/^# define sqlite3AuthRead(/;"	d	file:
sqlite3AuthRead	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthReadCol	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	./sqlite3/sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	./sqlite3/sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	./sqlite3/sqlite3.c	/^# define sqlite3AutoincrementBegin(/;"	d	file:
sqlite3AutoincrementBegin	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	./sqlite3/sqlite3.c	/^# define sqlite3AutoincrementEnd(/;"	d	file:
sqlite3AutoincrementEnd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3BackupRestart	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	./sqlite3/sqlite3.c	/^  #define sqlite3BeginBenignMalloc(/;"	d	file:
sqlite3BeginBenignMalloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginParse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlockedList	./sqlite3/sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCacheOverflow	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(BtCursor *pCur){$/;"	f
sqlite3BtreeCheckpoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p){$/;"	f
sqlite3BtreeClearCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p){$/;"	f
sqlite3BtreeCopyFile	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){$/;"	f
sqlite3BtreeCursorIsValid	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeDataSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	./sqlite3/sqlite3.c	/^# define sqlite3BtreeEnter(/;"	d	file:
sqlite3BtreeEnter	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnterAll	./sqlite3/sqlite3.c	/^# define sqlite3BtreeEnterAll(/;"	d	file:
sqlite3BtreeEnterAll	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterCursor	./sqlite3/sqlite3.c	/^# define sqlite3BtreeEnterCursor(/;"	d	file:
sqlite3BtreeEnterCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEof	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetCachedRowid	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){$/;"	f
sqlite3BtreeGetFilename	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	./sqlite3/sqlite3.c	/^# define sqlite3BtreeHoldsAllMutexes(/;"	d	file:
sqlite3BtreeHoldsAllMutexes	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsMutex	./sqlite3/sqlite3.c	/^# define sqlite3BtreeHoldsMutex(/;"	d	file:
sqlite3BtreeHoldsMutex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeIncrVacuum	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeKey	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){$/;"	f
sqlite3BtreeKeySize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	./sqlite3/sqlite3.c	/^# define sqlite3BtreeLeave(/;"	d	file:
sqlite3BtreeLeave	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeaveAll	./sqlite3/sqlite3.c	/^# define sqlite3BtreeLeaveAll(/;"	d	file:
sqlite3BtreeLeaveAll	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveCursor	./sqlite3/sqlite3.c	/^# define sqlite3BtreeLeaveCursor(/;"	d	file:
sqlite3BtreeLeaveCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLockTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeMutexArrayEnter	./sqlite3/sqlite3.c	/^# define sqlite3BtreeMutexArrayEnter(/;"	d	file:
sqlite3BtreeMutexArrayEnter	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter(BtreeMutexArray *pArray){$/;"	f
sqlite3BtreeMutexArrayInsert	./sqlite3/sqlite3.c	/^# define sqlite3BtreeMutexArrayInsert(/;"	d	file:
sqlite3BtreeMutexArrayInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert(BtreeMutexArray *pArray, Btree *pBtree){$/;"	f
sqlite3BtreeMutexArrayLeave	./sqlite3/sqlite3.c	/^# define sqlite3BtreeMutexArrayLeave(/;"	d	file:
sqlite3BtreeMutexArrayLeave	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave(BtreeMutexArray *pArray){$/;"	f
sqlite3BtreeNext	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p){$/;"	f
sqlite3BtreeSavepoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetCachedRowid	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){$/;"	f
sqlite3BtreeSetPageSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetSafetyLevel	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel($/;"	f
sqlite3BtreeSetVersion	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSyncDisabled	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb){$/;"	f
sqlite3CloseExtensions	./sqlite3/sqlite3.c	/^# define sqlite3CloseExtensions(/;"	d	file:
sqlite3CloseExtensions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseSavepoints	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeRowTrigger	./sqlite3/sqlite3.c	/^# define sqlite3CodeRowTrigger(/;"	d	file:
sqlite3CodeRowTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTriggerDirect	./sqlite3/sqlite3.c	/^# define sqlite3CodeRowTriggerDirect(/;"	d	file:
sqlite3CodeRowTriggerDirect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeSubselect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifySchema	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3ColumnDefault	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3CommitInternalChanges	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	./sqlite3/sqlite3.c	/^  #define sqlite3ConnectionBlocked(/;"	d	file:
sqlite3ConnectionBlocked	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionClosed	./sqlite3/sqlite3.c	/^  #define sqlite3ConnectionClosed(/;"	d	file:
sqlite3ConnectionClosed	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	./sqlite3/sqlite3.c	/^  #define sqlite3ConnectionUnlocked(/;"	d	file:
sqlite3ConnectionUnlocked	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3CorruptError	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, int n){$/;"	f
sqlite3DbMallocSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, int n){$/;"	f
sqlite3DbRealloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbReallocOrFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){$/;"	f
sqlite3DbStrDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3DebugPrintf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DefaultMutex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	./sqlite3/sqlite3.c	/^# define sqlite3DeleteTrigger(/;"	d	file:
sqlite3DeleteTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTriggerStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	./sqlite3/sqlite3.c	/^# define sqlite3DropTriggerPtr(/;"	d	file:
sqlite3DropTriggerPtr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3EndBenignMalloc	./sqlite3/sqlite3.c	/^  #define sqlite3EndBenignMalloc(/;"	d	file:
sqlite3EndBenignMalloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrStr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ErrorMsg	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAffinity	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	./sqlite3/sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse, int N){$/;"	f
sqlite3ExprCachePush	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	./sqlite3/sqlite3.c	/^  #define sqlite3ExprCheckHeight(/;"	d	file:
sqlite3ExprCheckHeight	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeConstants	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCodeCopy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeExprList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeGetColumn	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	./sqlite3/sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeIsNullJump	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump($/;"	f
sqlite3ExprCodeMove	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB){$/;"	f
sqlite3ExprDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIsConstant	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p){$/;"	f
sqlite3ExprIsInteger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB){$/;"	f
sqlite3ExprListDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetColl	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetColl(Expr *pExpr, CollSeq *pColl){$/;"	f
sqlite3ExprSetCollByToken	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSetCollByToken(Parse *pParse, Expr *pExpr, Token *pCollName){$/;"	f
sqlite3ExprSetHeight	./sqlite3/sqlite3.c	/^  #define sqlite3ExprSetHeight(/;"	d	file:
sqlite3ExprSetHeight	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3FindCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){$/;"	f
sqlite3FindIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixInit($/;"	f
sqlite3FixSelect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	./sqlite3/sqlite3.c	/^  #define sqlite3FkActions(/;"	d	file:
sqlite3FkActions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkCheck	./sqlite3/sqlite3.c	/^  #define sqlite3FkCheck(/;"	d	file:
sqlite3FkCheck	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkDelete	./sqlite3/sqlite3.c	/^  #define sqlite3FkDelete(/;"	d	file:
sqlite3FkDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDropTable	./sqlite3/sqlite3.c	/^  #define sqlite3FkDropTable(/;"	d	file:
sqlite3FkDropTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkOldmask	./sqlite3/sqlite3.c	/^  #define sqlite3FkOldmask(/;"	d	file:
sqlite3FkOldmask	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkReferences	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	./sqlite3/sqlite3.c	/^  #define sqlite3FkRequired(/;"	d	file:
sqlite3FkRequired	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3Fts3AllSegdirs	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(Fts3Table *p, sqlite3_stmt **ppStmt){$/;"	f
sqlite3Fts3CacheDeferredDoclists	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3DeferToken	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferredDoclist	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Fts3DeferredDoclist(Fts3DeferredToken *pDeferred, int *pnByte){$/;"	f
sqlite3Fts3Dequote	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3ExprFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *p){$/;"	f
sqlite3Fts3ExprInitTestInterface	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprLoadDoclist	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprLoadDoclist(Fts3Cursor *pCsr, Fts3Expr *pExpr){$/;"	f
sqlite3Fts3ExprLoadFtDoclist	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprLoadFtDoclist($/;"	f
sqlite3Fts3ExprNearTrim	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprNearTrim(Fts3Expr *pLeft, Fts3Expr *pRight, int nNear){$/;"	f
sqlite3Fts3ExprParse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FindPositions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Fts3FindPositions($/;"	f
sqlite3Fts3FreeDeferredDoclists	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3GetVarint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Init	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTokenizer	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3NextToken	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3Optimize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3ReadLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadLock(Fts3Table *p){$/;"	f
sqlite3Fts3SegReaderCost	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCost($/;"	f
sqlite3Fts3SegReaderFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderIterate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderIterate($/;"	f
sqlite3Fts3SegReaderNew	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegmentsClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UpdateMethod	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FuncDefInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3GenerateConstraintChecks	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	./sqlite3/sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVarint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	./sqlite3/sqlite3.c	/^  #define sqlite3GlobalConfig /;"	d	file:
sqlite3GlobalFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){$/;"	f
sqlite3HashClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){$/;"	f
sqlite3HashInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){$/;"	f
sqlite3HeapNearlyFull	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3Hooks	./sqlite3/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	./sqlite3/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3IndexAffinityOk	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexKeyinfo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	./sqlite3/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	./sqlite3/sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsLikeFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	./sqlite3/sqlite3.c	/^# define sqlite3IsNaN(/;"	d	file:
sqlite3IsNaN	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNumericAffinity	./sqlite3/sqlite3.c	/^#define sqlite3IsNumericAffinity(/;"	d	file:
sqlite3IsReadOnly	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	./sqlite3/sqlite3.c	/^# define sqlite3Isalnum(/;"	d	file:
sqlite3Isalpha	./sqlite3/sqlite3.c	/^# define sqlite3Isalpha(/;"	d	file:
sqlite3Isdigit	./sqlite3/sqlite3.c	/^# define sqlite3Isdigit(/;"	d	file:
sqlite3Isspace	./sqlite3/sqlite3.c	/^# define sqlite3Isspace(/;"	d	file:
sqlite3Isxdigit	./sqlite3/sqlite3.c	/^# define sqlite3Isxdigit(/;"	d	file:
sqlite3JoinType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalModename	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	./sqlite3/sqlite3.c	/^  #define sqlite3JournalSize(/;"	d	file:
sqlite3JournalSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3KeywordCode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LimitWhere	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	./sqlite3/sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LockAndPrepare	./sqlite3/sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3MAppendf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(int n){$/;"	f
sqlite3MallocAlarm	./sqlite3/sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(int n){$/;"	f
sqlite3MaterializeView	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	./sqlite3/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	./sqlite3/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemInit	./sqlite3/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	./sqlite3/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	./sqlite3/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	./sqlite3/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	./sqlite3/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	./sqlite3/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	./sqlite3/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	./sqlite3/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	./sqlite3/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	./sqlite3/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	./sqlite3/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	./sqlite3/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	./sqlite3/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	./sqlite3/sqlite3.c	/^# define sqlite3MemdebugHasType(/;"	d	file:
sqlite3MemdebugHasType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugMallocCount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	./sqlite3/sqlite3.c	/^# define sqlite3MemdebugNoType(/;"	d	file:
sqlite3MemdebugNoType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	./sqlite3/sqlite3.c	/^# define sqlite3MemdebugSetType(/;"	d	file:
sqlite3MemdebugSetType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSettitle	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	./sqlite3/sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	./sqlite3/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MultiWrite	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	./sqlite3/sqlite3.c	/^#define sqlite3MutexAlloc(/;"	d	file:
sqlite3MutexAlloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexEnd	./sqlite3/sqlite3.c	/^#define sqlite3MutexEnd(/;"	d	file:
sqlite3MutexEnd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexInit	./sqlite3/sqlite3.c	/^#define sqlite3MutexInit(/;"	d	file:
sqlite3MutexInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3NameFromToken	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OSTrace = 0;$/;"	v
sqlite3OpcodeName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFileControl	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnlock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCheckpoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager){$/;"	f
sqlite3PagerClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager){$/;"	f
sqlite3PagerGet	./sqlite3/sqlite3.c	/^#define sqlite3PagerGet(/;"	d	file:
sqlite3PagerGetCodec	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetJournalMode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetPagesize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSafetyLevel	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel($/;"	f
sqlite3PagerSharedLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerStats	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager){$/;"	f
sqlite3PagerTempSpace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerVfs	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(DbPage *pDbPage){$/;"	f
sqlite3ParseToplevel	./sqlite3/sqlite3.c	/^# define sqlite3ParseToplevel(/;"	d	file:
sqlite3Parser	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	./sqlite3/sqlite3.c	/^#define sqlite3ParserARG_FETCH /;"	d	file:
sqlite3ParserARG_PDECL	./sqlite3/sqlite3.c	/^#define sqlite3ParserARG_PDECL /;"	d	file:
sqlite3ParserARG_SDECL	./sqlite3/sqlite3.c	/^#define sqlite3ParserARG_SDECL /;"	d	file:
sqlite3ParserARG_STORE	./sqlite3/sqlite3.c	/^#define sqlite3ParserARG_STORE /;"	d	file:
sqlite3ParserAlloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){$/;"	f
sqlite3ParserFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserStackPeak	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	./sqlite3/sqlite3.c	/^#define sqlite3ParserTOKENTYPE /;"	d	file:
sqlite3ParserTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetch($/;"	f
sqlite3PcacheGetCachesize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShutdown	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	./sqlite3/sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	./sqlite3/sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrintExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintExpr(Expr *p){$/;"	f
sqlite3PrintExprList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintExprList(ExprList *pList){$/;"	f
sqlite3PrintSelect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrintSelect(Select *p, int indent){$/;"	f
sqlite3Prng	./sqlite3/sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngResetState	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngResetState(void){$/;"	f
sqlite3PrngRestoreState	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3PutVarint32	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint32(unsigned char *p, u32 v){$/;"	f
sqlite3ReadSchema	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, int nBytes){$/;"	f
sqlite3RefillIndex	./sqlite3/sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetInternalSchema	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetInternalSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolveSelectNames	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResultSetOfSelect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db){$/;"	f
sqlite3RollbackTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(Db *pDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RtreeInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaFree(void *p){$/;"	f
sqlite3SchemaGet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaToIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3Select	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	./sqlite3/sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	./sqlite3/sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	./sqlite3/sqlite3.c	/^  #define sqlite3SelectExprHeight(/;"	d	file:
sqlite3SelectExprHeight	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectNew	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SetString	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	./sqlite3/sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SrcListAppend	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	./sqlite3/sqlite3.c	/^# define sqlite3StackAllocRaw(/;"	d	file:
sqlite3StackAllocZero	./sqlite3/sqlite3.c	/^# define sqlite3StackAllocZero(/;"	d	file:
sqlite3StackFree	./sqlite3/sqlite3.c	/^# define sqlite3StackFree(/;"	d	file:
sqlite3StartTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	./sqlite3/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3StatType	./sqlite3/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	./sqlite3/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	./sqlite3/sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StrAccumAppend	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumFinish	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	./sqlite3/sqlite3.c	/^#define sqlite3StrNICmp /;"	d	file:
sqlite3Strlen30	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3TableAffinityStr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){$/;"	f
sqlite3TableLock	./sqlite3/sqlite3.c	/^  #define sqlite3TableLock(/;"	d	file:
sqlite3TableLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TempInMemory	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3Tolower	./sqlite3/sqlite3.c	/^# define sqlite3Tolower(/;"	d	file:
sqlite3Toupper	./sqlite3/sqlite3.c	/^# define sqlite3Toupper(/;"	d	file:
sqlite3TransferBindings	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	./sqlite3/sqlite3.c	/^# define sqlite3TriggerColmask(/;"	d	file:
sqlite3TriggerColmask	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerDeleteStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	./sqlite3/sqlite3.c	/^# define sqlite3TriggerList(/;"	d	file:
sqlite3TriggerList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerSelectStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	./sqlite3/sqlite3.c	/^# define sqlite3TriggersExist(/;"	d	file:
sqlite3TriggersExist	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TwoPartName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UnlinkAndDeleteIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	./sqlite3/sqlite3.c	/^# define sqlite3UnlinkAndDeleteTrigger(/;"	d	file:
sqlite3UnlinkAndDeleteTrigger	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3Update	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3Utf16ByteLen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	./sqlite3/sqlite3.c	/^# define sqlite3Utf8Read(/;"	d	file:
sqlite3Utf8Read	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8Read($/;"	f
sqlite3Utf8To8	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	./sqlite3/sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3Utf8to16	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){$/;"	f
sqlite3UtfSelfTest	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetStr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){$/;"	f
sqlite3VdbeAddopTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddopTrace = 0;$/;"	v
sqlite3VdbeAssertMayAbort	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP2	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP3	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){$/;"	f
sqlite3VdbeChangeP4	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr, int N){$/;"	f
sqlite3VdbeCheckFk	./sqlite3/sqlite3.c	/^# define sqlite3VdbeCheckFk(/;"	d	file:
sqlite3VdbeCheckFk	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCloseStatement	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3 *db){$/;"	f
sqlite3VdbeCurrentAddr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){$/;"	f
sqlite3VdbeDeleteObject	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeDeleteUnpackedRecord	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(UnpackedRecord *p){$/;"	f
sqlite3VdbeExec	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFrameDelete	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetOp	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGetValue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeHalt	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	./sqlite3/sqlite3.c	/^# define sqlite3VdbeIOTraceSql(/;"	d	file:
sqlite3VdbeIOTraceSql	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIdxKeyCompare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLinkSubProgram	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *p){$/;"	f
sqlite3VdbeMakeReady	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemCopy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	./sqlite3/sqlite3.c	/^  #define sqlite3VdbeMemExpandBlob(/;"	d	file:
sqlite3VdbeMemExpandBlob	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemFinalize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){$/;"	f
sqlite3VdbeMemHandleBom	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemIntegerify	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrepareToChange	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrepareToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemReleaseExternal	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	./sqlite3/sqlite3.c	/^# define sqlite3VdbeMemSetDouble /;"	d	file:
sqlite3VdbeMemSetDouble	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetInt64	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStoreType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemStoreType(Mem *pMem){$/;"	f
sqlite3VdbeMemStringify	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, int enc){$/;"	f
sqlite3VdbeMemTooBig	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeMutexArrayEnter	./sqlite3/sqlite3.c	/^# define sqlite3VdbeMutexArrayEnter(/;"	d	file:
sqlite3VdbeMutexArrayEnter	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter(Vdbe *p){$/;"	f
sqlite3VdbeNoopComment	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *p, int x){$/;"	f
sqlite3VdbeRunOnlyOnce	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialType	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetNumCols	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetSql	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSwap	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeTrace(Vdbe *p, FILE *trace){$/;"	f
sqlite3VdbeUsesBtree	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	./sqlite3/sqlite3.c	/^# define sqlite3ViewGetColumnNames(/;"	d	file:
sqlite3ViewGetColumnNames	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3VtabArgExtend	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	./sqlite3/sqlite3.c	/^#  define sqlite3VtabClear(/;"	d	file:
sqlite3VtabClear	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabCommit	./sqlite3/sqlite3.c	/^#  define sqlite3VtabCommit(/;"	d	file:
sqlite3VtabCommit	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabFinishParse	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabInSync	./sqlite3/sqlite3.c	/^#  define sqlite3VtabInSync(/;"	d	file:
sqlite3VtabLock	./sqlite3/sqlite3.c	/^#  define sqlite3VtabLock(/;"	d	file:
sqlite3VtabLock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabMakeWritable	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	./sqlite3/sqlite3.c	/^#  define sqlite3VtabRollback(/;"	d	file:
sqlite3VtabRollback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabSync	./sqlite3/sqlite3.c	/^#  define sqlite3VtabSync(/;"	d	file:
sqlite3VtabSync	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){$/;"	f
sqlite3VtabUnlock	./sqlite3/sqlite3.c	/^#  define sqlite3VtabUnlock(/;"	d	file:
sqlite3VtabUnlock	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlockList	./sqlite3/sqlite3.c	/^#  define sqlite3VtabUnlockList(/;"	d	file:
sqlite3VtabUnlockList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3WalBeginReadTransaction	./sqlite3/sqlite3.c	/^# define sqlite3WalBeginReadTransaction(/;"	d	file:
sqlite3WalBeginReadTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginWriteTransaction	./sqlite3/sqlite3.c	/^# define sqlite3WalBeginWriteTransaction(/;"	d	file:
sqlite3WalBeginWriteTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalCallback	./sqlite3/sqlite3.c	/^# define sqlite3WalCallback(/;"	d	file:
sqlite3WalCallback	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCheckpoint	./sqlite3/sqlite3.c	/^# define sqlite3WalCheckpoint(/;"	d	file:
sqlite3WalCheckpoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalClose	./sqlite3/sqlite3.c	/^# define sqlite3WalClose(/;"	d	file:
sqlite3WalClose	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalDbsize	./sqlite3/sqlite3.c	/^# define sqlite3WalDbsize(/;"	d	file:
sqlite3WalDbsize	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDefaultHook	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	./sqlite3/sqlite3.c	/^# define sqlite3WalEndReadTransaction(/;"	d	file:
sqlite3WalEndReadTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	./sqlite3/sqlite3.c	/^# define sqlite3WalEndWriteTransaction(/;"	d	file:
sqlite3WalEndWriteTransaction	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalExclusiveMode	./sqlite3/sqlite3.c	/^# define sqlite3WalExclusiveMode(/;"	d	file:
sqlite3WalExclusiveMode	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalFrames	./sqlite3/sqlite3.c	/^# define sqlite3WalFrames(/;"	d	file:
sqlite3WalFrames	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalHeapMemory	./sqlite3/sqlite3.c	/^# define sqlite3WalHeapMemory(/;"	d	file:
sqlite3WalHeapMemory	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalOpen	./sqlite3/sqlite3.c	/^# define sqlite3WalOpen(/;"	d	file:
sqlite3WalOpen	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalRead	./sqlite3/sqlite3.c	/^# define sqlite3WalRead(/;"	d	file:
sqlite3WalRead	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalRead($/;"	f
sqlite3WalSavepoint	./sqlite3/sqlite3.c	/^# define sqlite3WalSavepoint(/;"	d	file:
sqlite3WalSavepoint	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	./sqlite3/sqlite3.c	/^# define sqlite3WalSavepointUndo(/;"	d	file:
sqlite3WalSavepointUndo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	./sqlite3/sqlite3.c	/^# define sqlite3WalUndo(/;"	d	file:
sqlite3WalUndo	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalkExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereEnd	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereTrace = 0;$/;"	v
sqlite3XPrintf	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_aggregate_context /;"	d
sqlite3_aggregate_context	./sqlite3/sqlite3.c	/^#define sqlite3_aggregate_context /;"	d	file:
sqlite3_aggregate_context	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_count	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_aggregate_count /;"	d
sqlite3_aggregate_count	./sqlite3/sqlite3.c	/^#define sqlite3_aggregate_count /;"	d	file:
sqlite3_aggregate_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_api_routines	./sqlite3/include/sqlite3ext.h	/^struct sqlite3_api_routines {$/;"	s
sqlite3_api_routines	./sqlite3/include/sqlite3ext.h	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines
sqlite3_api_routines	./sqlite3/sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	./sqlite3/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_backup	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup	./sqlite3/sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	./sqlite3/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	./sqlite3/sqlite3.c	/^#define sqlite3_backup_finish /;"	d	file:
sqlite3_backup_finish	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_init	./sqlite3/sqlite3.c	/^#define sqlite3_backup_init /;"	d	file:
sqlite3_backup_init	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_pagecount	./sqlite3/sqlite3.c	/^#define sqlite3_backup_pagecount /;"	d	file:
sqlite3_backup_pagecount	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	./sqlite3/sqlite3.c	/^#define sqlite3_backup_remaining /;"	d	file:
sqlite3_backup_remaining	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_step	./sqlite3/sqlite3.c	/^#define sqlite3_backup_step /;"	d	file:
sqlite3_backup_step	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_bind_blob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_blob /;"	d
sqlite3_bind_blob	./sqlite3/sqlite3.c	/^#define sqlite3_bind_blob /;"	d	file:
sqlite3_bind_blob	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_double	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_double /;"	d
sqlite3_bind_double	./sqlite3/sqlite3.c	/^#define sqlite3_bind_double /;"	d	file:
sqlite3_bind_double	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_int	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_int /;"	d
sqlite3_bind_int	./sqlite3/sqlite3.c	/^#define sqlite3_bind_int /;"	d	file:
sqlite3_bind_int	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int64	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_int64 /;"	d
sqlite3_bind_int64	./sqlite3/sqlite3.c	/^#define sqlite3_bind_int64 /;"	d	file:
sqlite3_bind_int64	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_null	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_null /;"	d
sqlite3_bind_null	./sqlite3/sqlite3.c	/^#define sqlite3_bind_null /;"	d	file:
sqlite3_bind_null	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_count	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_parameter_count /;"	d
sqlite3_bind_parameter_count	./sqlite3/sqlite3.c	/^#define sqlite3_bind_parameter_count /;"	d	file:
sqlite3_bind_parameter_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_index	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_parameter_index /;"	d
sqlite3_bind_parameter_index	./sqlite3/sqlite3.c	/^#define sqlite3_bind_parameter_index /;"	d	file:
sqlite3_bind_parameter_index	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_name	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_parameter_name /;"	d
sqlite3_bind_parameter_name	./sqlite3/sqlite3.c	/^#define sqlite3_bind_parameter_name /;"	d	file:
sqlite3_bind_parameter_name	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_text	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_text /;"	d
sqlite3_bind_text	./sqlite3/sqlite3.c	/^#define sqlite3_bind_text /;"	d	file:
sqlite3_bind_text	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_text16 /;"	d
sqlite3_bind_text16	./sqlite3/sqlite3.c	/^# define sqlite3_bind_text16 /;"	d	file:
sqlite3_bind_text16	./sqlite3/sqlite3.c	/^#define sqlite3_bind_text16 /;"	d	file:
sqlite3_bind_text16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_value	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_value /;"	d
sqlite3_bind_value	./sqlite3/sqlite3.c	/^#define sqlite3_bind_value /;"	d	file:
sqlite3_bind_value	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_zeroblob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_bind_zeroblob /;"	d
sqlite3_bind_zeroblob	./sqlite3/sqlite3.c	/^#define sqlite3_bind_zeroblob /;"	d	file:
sqlite3_bind_zeroblob	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_blob	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob	./sqlite3/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_blob_bytes /;"	d
sqlite3_blob_bytes	./sqlite3/sqlite3.c	/^#define sqlite3_blob_bytes /;"	d	file:
sqlite3_blob_bytes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_blob_close /;"	d
sqlite3_blob_close	./sqlite3/sqlite3.c	/^#define sqlite3_blob_close /;"	d	file:
sqlite3_blob_close	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_open	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_blob_open /;"	d
sqlite3_blob_open	./sqlite3/sqlite3.c	/^#define sqlite3_blob_open /;"	d	file:
sqlite3_blob_open	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_read	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_blob_read /;"	d
sqlite3_blob_read	./sqlite3/sqlite3.c	/^#define sqlite3_blob_read /;"	d	file:
sqlite3_blob_read	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_reopen	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_write	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_blob_write /;"	d
sqlite3_blob_write	./sqlite3/sqlite3.c	/^#define sqlite3_blob_write /;"	d	file:
sqlite3_blob_write	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_busy_handler	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_busy_handler /;"	d
sqlite3_busy_handler	./sqlite3/sqlite3.c	/^#define sqlite3_busy_handler /;"	d	file:
sqlite3_busy_handler	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_timeout	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_busy_timeout /;"	d
sqlite3_busy_timeout	./sqlite3/sqlite3.c	/^#define sqlite3_busy_timeout /;"	d	file:
sqlite3_busy_timeout	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_callback	./sqlite3/include/sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_callback	./sqlite3/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_changes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_changes /;"	d
sqlite3_changes	./sqlite3/sqlite3.c	/^#define sqlite3_changes /;"	d	file:
sqlite3_changes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_clear_bindings	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_clear_bindings /;"	d
sqlite3_clear_bindings	./sqlite3/sqlite3.c	/^#define sqlite3_clear_bindings /;"	d	file:
sqlite3_clear_bindings	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_close	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_close /;"	d
sqlite3_close	./sqlite3/sqlite3.c	/^#define sqlite3_close /;"	d	file:
sqlite3_close	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){$/;"	f
sqlite3_collation_needed	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_collation_needed /;"	d
sqlite3_collation_needed	./sqlite3/sqlite3.c	/^#define sqlite3_collation_needed /;"	d	file:
sqlite3_collation_needed	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_collation_needed16 /;"	d
sqlite3_collation_needed16	./sqlite3/sqlite3.c	/^# define sqlite3_collation_needed16 /;"	d	file:
sqlite3_collation_needed16	./sqlite3/sqlite3.c	/^#define sqlite3_collation_needed16 /;"	d	file:
sqlite3_collation_needed16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_column_blob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_blob /;"	d
sqlite3_column_blob	./sqlite3/sqlite3.c	/^#define sqlite3_column_blob /;"	d	file:
sqlite3_column_blob	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_bytes /;"	d
sqlite3_column_bytes	./sqlite3/sqlite3.c	/^#define sqlite3_column_bytes /;"	d	file:
sqlite3_column_bytes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_bytes16 /;"	d
sqlite3_column_bytes16	./sqlite3/sqlite3.c	/^#define sqlite3_column_bytes16 /;"	d	file:
sqlite3_column_bytes16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_count	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_count /;"	d
sqlite3_column_count	./sqlite3/sqlite3.c	/^#define sqlite3_column_count /;"	d	file:
sqlite3_column_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_database_name	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_database_name /;"	d
sqlite3_column_database_name	./sqlite3/sqlite3.c	/^# define sqlite3_column_database_name /;"	d	file:
sqlite3_column_database_name	./sqlite3/sqlite3.c	/^#define sqlite3_column_database_name /;"	d	file:
sqlite3_column_database_name	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_database_name16 /;"	d
sqlite3_column_database_name16	./sqlite3/sqlite3.c	/^# define sqlite3_column_database_name16 /;"	d	file:
sqlite3_column_database_name16	./sqlite3/sqlite3.c	/^#define sqlite3_column_database_name16 /;"	d	file:
sqlite3_column_database_name16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_decltype /;"	d
sqlite3_column_decltype	./sqlite3/sqlite3.c	/^#define sqlite3_column_decltype /;"	d	file:
sqlite3_column_decltype	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_decltype16 /;"	d
sqlite3_column_decltype16	./sqlite3/sqlite3.c	/^# define sqlite3_column_decltype16 /;"	d	file:
sqlite3_column_decltype16	./sqlite3/sqlite3.c	/^#define sqlite3_column_decltype16 /;"	d	file:
sqlite3_column_decltype16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_double	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_double /;"	d
sqlite3_column_double	./sqlite3/sqlite3.c	/^#define sqlite3_column_double /;"	d	file:
sqlite3_column_double	./sqlite3/sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_int /;"	d
sqlite3_column_int	./sqlite3/sqlite3.c	/^#define sqlite3_column_int /;"	d	file:
sqlite3_column_int	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_int64 /;"	d
sqlite3_column_int64	./sqlite3/sqlite3.c	/^#define sqlite3_column_int64 /;"	d	file:
sqlite3_column_int64	./sqlite3/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_name	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_name /;"	d
sqlite3_column_name	./sqlite3/sqlite3.c	/^#define sqlite3_column_name /;"	d	file:
sqlite3_column_name	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_name16 /;"	d
sqlite3_column_name16	./sqlite3/sqlite3.c	/^# define sqlite3_column_name16 /;"	d	file:
sqlite3_column_name16	./sqlite3/sqlite3.c	/^#define sqlite3_column_name16 /;"	d	file:
sqlite3_column_name16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_origin_name /;"	d
sqlite3_column_origin_name	./sqlite3/sqlite3.c	/^# define sqlite3_column_origin_name /;"	d	file:
sqlite3_column_origin_name	./sqlite3/sqlite3.c	/^#define sqlite3_column_origin_name /;"	d	file:
sqlite3_column_origin_name	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_origin_name16 /;"	d
sqlite3_column_origin_name16	./sqlite3/sqlite3.c	/^# define sqlite3_column_origin_name16 /;"	d	file:
sqlite3_column_origin_name16	./sqlite3/sqlite3.c	/^#define sqlite3_column_origin_name16 /;"	d	file:
sqlite3_column_origin_name16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_table_name /;"	d
sqlite3_column_table_name	./sqlite3/sqlite3.c	/^# define sqlite3_column_table_name /;"	d	file:
sqlite3_column_table_name	./sqlite3/sqlite3.c	/^#define sqlite3_column_table_name /;"	d	file:
sqlite3_column_table_name	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_table_name16 /;"	d
sqlite3_column_table_name16	./sqlite3/sqlite3.c	/^# define sqlite3_column_table_name16 /;"	d	file:
sqlite3_column_table_name16	./sqlite3/sqlite3.c	/^#define sqlite3_column_table_name16 /;"	d	file:
sqlite3_column_table_name16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_text	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_text /;"	d
sqlite3_column_text	./sqlite3/sqlite3.c	/^#define sqlite3_column_text /;"	d	file:
sqlite3_column_text	./sqlite3/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_text16 /;"	d
sqlite3_column_text16	./sqlite3/sqlite3.c	/^# define sqlite3_column_text16 /;"	d	file:
sqlite3_column_text16	./sqlite3/sqlite3.c	/^#define sqlite3_column_text16 /;"	d	file:
sqlite3_column_text16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_type /;"	d
sqlite3_column_type	./sqlite3/sqlite3.c	/^#define sqlite3_column_type /;"	d	file:
sqlite3_column_type	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_column_value /;"	d
sqlite3_column_value	./sqlite3/sqlite3.c	/^#define sqlite3_column_value /;"	d	file:
sqlite3_column_value	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_commit_hook	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_commit_hook /;"	d
sqlite3_commit_hook	./sqlite3/sqlite3.c	/^#define sqlite3_commit_hook /;"	d	file:
sqlite3_commit_hook	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_compileoption_get	./sqlite3/sqlite3.c	/^#define sqlite3_compileoption_get /;"	d	file:
sqlite3_compileoption_get	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_used	./sqlite3/sqlite3.c	/^#define sqlite3_compileoption_used /;"	d	file:
sqlite3_compileoption_used	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_complete	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_complete /;"	d
sqlite3_complete	./sqlite3/sqlite3.c	/^# define sqlite3_complete /;"	d	file:
sqlite3_complete	./sqlite3/sqlite3.c	/^#define sqlite3_complete /;"	d	file:
sqlite3_complete	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_complete16 /;"	d
sqlite3_complete16	./sqlite3/sqlite3.c	/^# define sqlite3_complete16 /;"	d	file:
sqlite3_complete16	./sqlite3/sqlite3.c	/^#define sqlite3_complete16 /;"	d	file:
sqlite3_complete16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_config	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context	./sqlite3/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	./sqlite3/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_context_db_handle /;"	d
sqlite3_context_db_handle	./sqlite3/sqlite3.c	/^#define sqlite3_context_db_handle /;"	d	file:
sqlite3_context_db_handle	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_create_collation	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_collation /;"	d
sqlite3_create_collation	./sqlite3/sqlite3.c	/^#define sqlite3_create_collation /;"	d	file:
sqlite3_create_collation	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_collation16 /;"	d
sqlite3_create_collation16	./sqlite3/sqlite3.c	/^# define sqlite3_create_collation16 /;"	d	file:
sqlite3_create_collation16	./sqlite3/sqlite3.c	/^#define sqlite3_create_collation16 /;"	d	file:
sqlite3_create_collation16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation_v2	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_collation_v2 /;"	d
sqlite3_create_collation_v2	./sqlite3/sqlite3.c	/^#define sqlite3_create_collation_v2 /;"	d	file:
sqlite3_create_collation_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_function	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_function /;"	d
sqlite3_create_function	./sqlite3/sqlite3.c	/^#define sqlite3_create_function /;"	d	file:
sqlite3_create_function	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_function16 /;"	d
sqlite3_create_function16	./sqlite3/sqlite3.c	/^# define sqlite3_create_function16 /;"	d	file:
sqlite3_create_function16	./sqlite3/sqlite3.c	/^#define sqlite3_create_function16 /;"	d	file:
sqlite3_create_function16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function_v2	./sqlite3/sqlite3.c	/^#define sqlite3_create_function_v2 /;"	d	file:
sqlite3_create_function_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_module	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_module /;"	d
sqlite3_create_module	./sqlite3/sqlite3.c	/^# define sqlite3_create_module /;"	d	file:
sqlite3_create_module	./sqlite3/sqlite3.c	/^#define sqlite3_create_module /;"	d	file:
sqlite3_create_module	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module_v2	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_create_module_v2 /;"	d
sqlite3_create_module_v2	./sqlite3/sqlite3.c	/^# define sqlite3_create_module_v2 /;"	d	file:
sqlite3_create_module_v2	./sqlite3/sqlite3.c	/^#define sqlite3_create_module_v2 /;"	d	file:
sqlite3_create_module_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_current_time	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_current_time	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;$/;"	v
sqlite3_data_count	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_data_count /;"	d
sqlite3_data_count	./sqlite3/sqlite3.c	/^#define sqlite3_data_count /;"	d	file:
sqlite3_data_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_config	./sqlite3/sqlite3.c	/^#define sqlite3_db_config /;"	d	file:
sqlite3_db_config	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_handle	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_db_handle /;"	d
sqlite3_db_handle	./sqlite3/sqlite3.c	/^#define sqlite3_db_handle /;"	d	file:
sqlite3_db_handle	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_mutex	./sqlite3/sqlite3.c	/^#define sqlite3_db_mutex /;"	d	file:
sqlite3_db_mutex	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_status	./sqlite3/sqlite3.c	/^#define sqlite3_db_status /;"	d	file:
sqlite3_db_status	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_debug_mutex	./sqlite3/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	./sqlite3/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_declare_vtab /;"	d
sqlite3_declare_vtab	./sqlite3/sqlite3.c	/^# define sqlite3_declare_vtab /;"	d	file:
sqlite3_declare_vtab	./sqlite3/sqlite3.c	/^#define sqlite3_declare_vtab /;"	d	file:
sqlite3_declare_vtab	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_destructor_type	./sqlite3/include/sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_destructor_type	./sqlite3/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_enable_shared_cache /;"	d
sqlite3_enable_shared_cache	./sqlite3/sqlite3.c	/^# define sqlite3_enable_shared_cache /;"	d	file:
sqlite3_enable_shared_cache	./sqlite3/sqlite3.c	/^#define sqlite3_enable_shared_cache /;"	d	file:
sqlite3_enable_shared_cache	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_errcode	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_errcode /;"	d
sqlite3_errcode	./sqlite3/sqlite3.c	/^#define sqlite3_errcode /;"	d	file:
sqlite3_errcode	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errmsg	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_errmsg /;"	d
sqlite3_errmsg	./sqlite3/sqlite3.c	/^#define sqlite3_errmsg /;"	d	file:
sqlite3_errmsg	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_errmsg16 /;"	d
sqlite3_errmsg16	./sqlite3/sqlite3.c	/^# define sqlite3_errmsg16 /;"	d	file:
sqlite3_errmsg16	./sqlite3/sqlite3.c	/^#define sqlite3_errmsg16 /;"	d	file:
sqlite3_errmsg16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_exec	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_exec /;"	d
sqlite3_exec	./sqlite3/sqlite3.c	/^#define sqlite3_exec /;"	d	file:
sqlite3_exec	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_expired	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_expired /;"	d
sqlite3_expired	./sqlite3/sqlite3.c	/^#define sqlite3_expired /;"	d	file:
sqlite3_expired	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_extended_errcode	./sqlite3/sqlite3.c	/^#define sqlite3_extended_errcode /;"	d	file:
sqlite3_extended_errcode	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_result_codes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_extended_result_codes /;"	d
sqlite3_extended_result_codes	./sqlite3/sqlite3.c	/^#define sqlite3_extended_result_codes /;"	d	file:
sqlite3_extended_result_codes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extension_init	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_extension_init($/;"	f
sqlite3_file	./sqlite3/include/sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file	./sqlite3/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	./sqlite3/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_file_control /;"	d
sqlite3_file_control	./sqlite3/sqlite3.c	/^#define sqlite3_file_control /;"	d	file:
sqlite3_file_control	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_finalize	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_finalize /;"	d
sqlite3_finalize	./sqlite3/sqlite3.c	/^#define sqlite3_finalize /;"	d	file:
sqlite3_finalize	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_found_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_free /;"	d
sqlite3_free	./sqlite3/sqlite3.c	/^#define sqlite3_free /;"	d	file:
sqlite3_free	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free_table	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_free_table /;"	d
sqlite3_free_table	./sqlite3/sqlite3.c	/^# define sqlite3_free_table /;"	d	file:
sqlite3_free_table	./sqlite3/sqlite3.c	/^#define sqlite3_free_table /;"	d	file:
sqlite3_free_table	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_fts3_enable_parentheses	./sqlite3/sqlite3.c	/^#  define sqlite3_fts3_enable_parentheses /;"	d	file:
sqlite3_fts3_enable_parentheses	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fullsync_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_get_autocommit /;"	d
sqlite3_get_autocommit	./sqlite3/sqlite3.c	/^#define sqlite3_get_autocommit /;"	d	file:
sqlite3_get_autocommit	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_auxdata	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_get_auxdata /;"	d
sqlite3_get_auxdata	./sqlite3/sqlite3.c	/^#define sqlite3_get_auxdata /;"	d	file:
sqlite3_get_auxdata	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_table	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_get_table /;"	d
sqlite3_get_table	./sqlite3/sqlite3.c	/^# define sqlite3_get_table /;"	d	file:
sqlite3_get_table	./sqlite3/sqlite3.c	/^#define sqlite3_get_table /;"	d	file:
sqlite3_get_table	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table_cb	./sqlite3/sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_global_recover /;"	d
sqlite3_global_recover	./sqlite3/sqlite3.c	/^#define sqlite3_global_recover /;"	d	file:
sqlite3_global_recover	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_hostid_num	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	./sqlite3/include/sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint	./sqlite3/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	./sqlite3/include/sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	./sqlite3/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	./sqlite3/include/sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_info	./sqlite3/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	./sqlite3/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	./sqlite3/include/sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_index_orderby	./sqlite3/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	./sqlite3/include/sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_int64	./sqlite3/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_interrupt /;"	d
sqlite3_interrupt	./sqlite3/sqlite3.c	/^#define sqlite3_interrupt /;"	d	file:
sqlite3_interrupt	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	./sqlite3/include/sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_io_methods	./sqlite3/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	./sqlite3/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_last_insert_rowid /;"	d
sqlite3_last_insert_rowid	./sqlite3/sqlite3.c	/^#define sqlite3_last_insert_rowid /;"	d	file:
sqlite3_last_insert_rowid	./sqlite3/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_libversion	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_libversion /;"	d
sqlite3_libversion	./sqlite3/sqlite3.c	/^#define sqlite3_libversion /;"	d	file:
sqlite3_libversion	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion_number	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_libversion_number /;"	d
sqlite3_libversion_number	./sqlite3/sqlite3.c	/^#define sqlite3_libversion_number /;"	d	file:
sqlite3_libversion_number	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_like_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_limit /;"	d
sqlite3_limit	./sqlite3/sqlite3.c	/^#define sqlite3_limit /;"	d	file:
sqlite3_limit	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_load_extension	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_log	./sqlite3/sqlite3.c	/^#define sqlite3_log /;"	d	file:
sqlite3_log	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_malloc	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_malloc /;"	d
sqlite3_malloc	./sqlite3/sqlite3.c	/^#define sqlite3_malloc /;"	d	file:
sqlite3_malloc	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_max_blobsize	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	./sqlite3/include/sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_mem_methods	./sqlite3/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	./sqlite3/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_memory_highwater /;"	d
sqlite3_memory_highwater	./sqlite3/sqlite3.c	/^#define sqlite3_memory_highwater /;"	d	file:
sqlite3_memory_highwater	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_used	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_memory_used /;"	d
sqlite3_memory_used	./sqlite3/sqlite3.c	/^#define sqlite3_memory_used /;"	d	file:
sqlite3_memory_used	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_module	./sqlite3/include/sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_module	./sqlite3/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	./sqlite3/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mprintf /;"	d
sqlite3_mprintf	./sqlite3/sqlite3.c	/^#define sqlite3_mprintf /;"	d	file:
sqlite3_mprintf	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mutex	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex	./sqlite3/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	./sqlite3/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mutex_alloc /;"	d
sqlite3_mutex_alloc	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_alloc /;"	d	file:
sqlite3_mutex_alloc	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_alloc(/;"	d	file:
sqlite3_mutex_alloc	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_enter	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mutex_enter /;"	d
sqlite3_mutex_enter	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_enter /;"	d	file:
sqlite3_mutex_enter	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_enter(/;"	d	file:
sqlite3_mutex_enter	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mutex_free /;"	d
sqlite3_mutex_free	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_free /;"	d	file:
sqlite3_mutex_free	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_free(/;"	d	file:
sqlite3_mutex_free	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_held(/;"	d	file:
sqlite3_mutex_held	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mutex_leave /;"	d
sqlite3_mutex_leave	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_leave /;"	d	file:
sqlite3_mutex_leave	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_leave(/;"	d	file:
sqlite3_mutex_leave	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_methods	./sqlite3/include/sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_methods	./sqlite3/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	./sqlite3/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_notheld(/;"	d	file:
sqlite3_mutex_notheld	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_mutex_try /;"	d
sqlite3_mutex_try	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_try /;"	d	file:
sqlite3_mutex_try	./sqlite3/sqlite3.c	/^#define sqlite3_mutex_try(/;"	d	file:
sqlite3_mutex_try	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_next_stmt	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_next_stmt /;"	d
sqlite3_next_stmt	./sqlite3/sqlite3.c	/^#define sqlite3_next_stmt /;"	d	file:
sqlite3_next_stmt	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_open	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_open /;"	d
sqlite3_open	./sqlite3/sqlite3.c	/^#define sqlite3_open /;"	d	file:
sqlite3_open	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_open16 /;"	d
sqlite3_open16	./sqlite3/sqlite3.c	/^# define sqlite3_open16 /;"	d	file:
sqlite3_open16	./sqlite3/sqlite3.c	/^#define sqlite3_open16 /;"	d	file:
sqlite3_open16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open_file_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_open_v2 /;"	d
sqlite3_open_v2	./sqlite3/sqlite3.c	/^#define sqlite3_open_v2 /;"	d	file:
sqlite3_open_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_opentemp_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	./sqlite3/sqlite3.c	/^static int sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_overload_function /;"	d
sqlite3_overload_function	./sqlite3/sqlite3.c	/^#define sqlite3_overload_function /;"	d	file:
sqlite3_overload_function	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_pager_readdb_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache	./sqlite3/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	./sqlite3/include/sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods	./sqlite3/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	./sqlite3/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_prepare	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_prepare /;"	d
sqlite3_prepare	./sqlite3/sqlite3.c	/^#define sqlite3_prepare /;"	d	file:
sqlite3_prepare	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_prepare16 /;"	d
sqlite3_prepare16	./sqlite3/sqlite3.c	/^# define sqlite3_prepare16 /;"	d	file:
sqlite3_prepare16	./sqlite3/sqlite3.c	/^#define sqlite3_prepare16 /;"	d	file:
sqlite3_prepare16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16_v2	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_prepare16_v2 /;"	d
sqlite3_prepare16_v2	./sqlite3/sqlite3.c	/^# define sqlite3_prepare16_v2 /;"	d	file:
sqlite3_prepare16_v2	./sqlite3/sqlite3.c	/^#define sqlite3_prepare16_v2 /;"	d	file:
sqlite3_prepare16_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare_v2	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_prepare_v2 /;"	d
sqlite3_prepare_v2	./sqlite3/sqlite3.c	/^#define sqlite3_prepare_v2 /;"	d	file:
sqlite3_prepare_v2	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_profile	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_profile /;"	d
sqlite3_profile	./sqlite3/sqlite3.c	/^# define sqlite3_profile /;"	d	file:
sqlite3_profile	./sqlite3/sqlite3.c	/^#define sqlite3_profile /;"	d	file:
sqlite3_profile	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_progress_handler	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_progress_handler /;"	d
sqlite3_progress_handler	./sqlite3/sqlite3.c	/^# define sqlite3_progress_handler /;"	d	file:
sqlite3_progress_handler	./sqlite3/sqlite3.c	/^#define sqlite3_progress_handler /;"	d	file:
sqlite3_progress_handler	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_query_plan	./sqlite3/sqlite3.c	/^SQLITE_API char sqlite3_query_plan[BMS*2*40];  \/* Text of the join *\/$/;"	v
sqlite3_randomness	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_randomness /;"	d
sqlite3_randomness	./sqlite3/sqlite3.c	/^#define sqlite3_randomness /;"	d	file:
sqlite3_randomness	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_realloc	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_realloc /;"	d
sqlite3_realloc	./sqlite3/sqlite3.c	/^#define sqlite3_realloc /;"	d	file:
sqlite3_realloc	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_release_memory	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_release_memory /;"	d
sqlite3_release_memory	./sqlite3/sqlite3.c	/^#define sqlite3_release_memory /;"	d	file:
sqlite3_release_memory	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_reset	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_reset /;"	d
sqlite3_reset	./sqlite3/sqlite3.c	/^#define sqlite3_reset /;"	d	file:
sqlite3_reset	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset_auto_extension	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_result_blob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_blob /;"	d
sqlite3_result_blob	./sqlite3/sqlite3.c	/^#define sqlite3_result_blob /;"	d	file:
sqlite3_result_blob	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_double	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_double /;"	d
sqlite3_result_double	./sqlite3/sqlite3.c	/^#define sqlite3_result_double /;"	d	file:
sqlite3_result_double	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_error	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_error /;"	d
sqlite3_result_error	./sqlite3/sqlite3.c	/^#define sqlite3_result_error /;"	d	file:
sqlite3_result_error	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_error16 /;"	d
sqlite3_result_error16	./sqlite3/sqlite3.c	/^# define sqlite3_result_error16 /;"	d	file:
sqlite3_result_error16	./sqlite3/sqlite3.c	/^#define sqlite3_result_error16 /;"	d	file:
sqlite3_result_error16	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error_code	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_error_code /;"	d
sqlite3_result_error_code	./sqlite3/sqlite3.c	/^#define sqlite3_result_error_code /;"	d	file:
sqlite3_result_error_code	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_nomem	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_error_nomem /;"	d
sqlite3_result_error_nomem	./sqlite3/sqlite3.c	/^#define sqlite3_result_error_nomem /;"	d	file:
sqlite3_result_error_nomem	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_error_toobig /;"	d
sqlite3_result_error_toobig	./sqlite3/sqlite3.c	/^#define sqlite3_result_error_toobig /;"	d	file:
sqlite3_result_error_toobig	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_int	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_int /;"	d
sqlite3_result_int	./sqlite3/sqlite3.c	/^#define sqlite3_result_int /;"	d	file:
sqlite3_result_int	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int64	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_int64 /;"	d
sqlite3_result_int64	./sqlite3/sqlite3.c	/^#define sqlite3_result_int64 /;"	d	file:
sqlite3_result_int64	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_null	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_null /;"	d
sqlite3_result_null	./sqlite3/sqlite3.c	/^#define sqlite3_result_null /;"	d	file:
sqlite3_result_null	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_text	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_text /;"	d
sqlite3_result_text	./sqlite3/sqlite3.c	/^#define sqlite3_result_text /;"	d	file:
sqlite3_result_text	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_text16 /;"	d
sqlite3_result_text16	./sqlite3/sqlite3.c	/^# define sqlite3_result_text16 /;"	d	file:
sqlite3_result_text16	./sqlite3/sqlite3.c	/^#define sqlite3_result_text16 /;"	d	file:
sqlite3_result_text16	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16be	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_text16be /;"	d
sqlite3_result_text16be	./sqlite3/sqlite3.c	/^# define sqlite3_result_text16be /;"	d	file:
sqlite3_result_text16be	./sqlite3/sqlite3.c	/^#define sqlite3_result_text16be /;"	d	file:
sqlite3_result_text16be	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16le	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_text16le /;"	d
sqlite3_result_text16le	./sqlite3/sqlite3.c	/^# define sqlite3_result_text16le /;"	d	file:
sqlite3_result_text16le	./sqlite3/sqlite3.c	/^#define sqlite3_result_text16le /;"	d	file:
sqlite3_result_text16le	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_value	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_value /;"	d
sqlite3_result_value	./sqlite3/sqlite3.c	/^#define sqlite3_result_value /;"	d	file:
sqlite3_result_value	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_zeroblob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_result_zeroblob /;"	d
sqlite3_result_zeroblob	./sqlite3/sqlite3.c	/^#define sqlite3_result_zeroblob /;"	d	file:
sqlite3_result_zeroblob	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_rollback_hook	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_rollback_hook /;"	d
sqlite3_rollback_hook	./sqlite3/sqlite3.c	/^#define sqlite3_rollback_hook /;"	d	file:
sqlite3_rollback_hook	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rtree_geometry	./sqlite3/include/sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_geometry	./sqlite3/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	./sqlite3/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_search_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_set_authorizer /;"	d
sqlite3_set_authorizer	./sqlite3/sqlite3.c	/^# define sqlite3_set_authorizer /;"	d	file:
sqlite3_set_authorizer	./sqlite3/sqlite3.c	/^#define sqlite3_set_authorizer /;"	d	file:
sqlite3_set_authorizer	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_auxdata	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_set_auxdata /;"	d
sqlite3_set_auxdata	./sqlite3/sqlite3.c	/^#define sqlite3_set_auxdata /;"	d	file:
sqlite3_set_auxdata	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_shutdown	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_sleep /;"	d
sqlite3_sleep	./sqlite3/sqlite3.c	/^#define sqlite3_sleep /;"	d	file:
sqlite3_sleep	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_snprintf	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_snprintf /;"	d
sqlite3_snprintf	./sqlite3/sqlite3.c	/^#define sqlite3_snprintf /;"	d	file:
sqlite3_snprintf	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_soft_heap_limit	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_soft_heap_limit /;"	d
sqlite3_soft_heap_limit	./sqlite3/sqlite3.c	/^#define sqlite3_soft_heap_limit /;"	d	file:
sqlite3_soft_heap_limit	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit64	./sqlite3/sqlite3.c	/^#define sqlite3_soft_heap_limit64 /;"	d	file:
sqlite3_soft_heap_limit64	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_sort_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	./sqlite3/sqlite3.c	/^#define sqlite3_sourceid /;"	d	file:
sqlite3_sourceid	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sql	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_sql /;"	d
sqlite3_sql	./sqlite3/sqlite3.c	/^#define sqlite3_sql /;"	d	file:
sqlite3_sql	./sqlite3/sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_status	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_status /;"	d
sqlite3_status	./sqlite3/sqlite3.c	/^#define sqlite3_status /;"	d	file:
sqlite3_status	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_step	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_step /;"	d
sqlite3_step	./sqlite3/sqlite3.c	/^#define sqlite3_step /;"	d	file:
sqlite3_step	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt	./sqlite3/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_readonly	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	./sqlite3/sqlite3.c	/^#define sqlite3_stmt_status /;"	d	file:
sqlite3_stmt_status	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_strnicmp	./sqlite3/sqlite3.c	/^#define sqlite3_strnicmp /;"	d	file:
sqlite3_strnicmp	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_sync_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_table_column_metadata	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_table_column_metadata /;"	d
sqlite3_table_column_metadata	./sqlite3/sqlite3.c	/^# define sqlite3_table_column_metadata /;"	d	file:
sqlite3_table_column_metadata	./sqlite3/sqlite3.c	/^#define sqlite3_table_column_metadata /;"	d	file:
sqlite3_table_column_metadata	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_temp_directory	./sqlite3/include/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_temp_directory	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_test_control /;"	d
sqlite3_test_control	./sqlite3/sqlite3.c	/^#define sqlite3_test_control /;"	d	file:
sqlite3_test_control	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_thread_cleanup	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_thread_cleanup /;"	d
sqlite3_thread_cleanup	./sqlite3/sqlite3.c	/^#define sqlite3_thread_cleanup /;"	d	file:
sqlite3_thread_cleanup	./sqlite3/sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_threadsafe	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_threadsafe /;"	d
sqlite3_threadsafe	./sqlite3/sqlite3.c	/^#define sqlite3_threadsafe /;"	d	file:
sqlite3_threadsafe	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_tokenizer	./sqlite3/sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	./sqlite3/sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	./sqlite3/sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	./sqlite3/sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	./sqlite3/sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	./sqlite3/sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_total_changes /;"	d
sqlite3_total_changes	./sqlite3/sqlite3.c	/^#define sqlite3_total_changes /;"	d	file:
sqlite3_total_changes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_trace	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_trace /;"	d
sqlite3_trace	./sqlite3/sqlite3.c	/^# define sqlite3_trace /;"	d	file:
sqlite3_trace	./sqlite3/sqlite3.c	/^#define sqlite3_trace /;"	d	file:
sqlite3_trace	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_transfer_bindings	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_transfer_bindings /;"	d
sqlite3_transfer_bindings	./sqlite3/sqlite3.c	/^#define sqlite3_transfer_bindings /;"	d	file:
sqlite3_transfer_bindings	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_uint64	./sqlite3/include/sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_uint64	./sqlite3/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	./sqlite3/sqlite3.c	/^#define sqlite3_unlock_notify /;"	d	file:
sqlite3_unlock_notify	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_update_hook	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_update_hook /;"	d
sqlite3_update_hook	./sqlite3/sqlite3.c	/^#define sqlite3_update_hook /;"	d	file:
sqlite3_update_hook	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_user_data	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_user_data /;"	d
sqlite3_user_data	./sqlite3/sqlite3.c	/^#define sqlite3_user_data /;"	d	file:
sqlite3_user_data	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_value	./sqlite3/include/sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_value	./sqlite3/sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value_blob	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_blob /;"	d
sqlite3_value_blob	./sqlite3/sqlite3.c	/^#define sqlite3_value_blob /;"	d	file:
sqlite3_value_blob	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_bytes /;"	d
sqlite3_value_bytes	./sqlite3/sqlite3.c	/^#define sqlite3_value_bytes /;"	d	file:
sqlite3_value_bytes	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_bytes16 /;"	d
sqlite3_value_bytes16	./sqlite3/sqlite3.c	/^#define sqlite3_value_bytes16 /;"	d	file:
sqlite3_value_bytes16	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_double /;"	d
sqlite3_value_double	./sqlite3/sqlite3.c	/^#define sqlite3_value_double /;"	d	file:
sqlite3_value_double	./sqlite3/sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_int /;"	d
sqlite3_value_int	./sqlite3/sqlite3.c	/^#define sqlite3_value_int /;"	d	file:
sqlite3_value_int	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_int64 /;"	d
sqlite3_value_int64	./sqlite3/sqlite3.c	/^#define sqlite3_value_int64 /;"	d	file:
sqlite3_value_int64	./sqlite3/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_numeric_type /;"	d
sqlite3_value_numeric_type	./sqlite3/sqlite3.c	/^#define sqlite3_value_numeric_type /;"	d	file:
sqlite3_value_numeric_type	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_text /;"	d
sqlite3_value_text	./sqlite3/sqlite3.c	/^#define sqlite3_value_text /;"	d	file:
sqlite3_value_text	./sqlite3/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_text16 /;"	d
sqlite3_value_text16	./sqlite3/sqlite3.c	/^# define sqlite3_value_text16 /;"	d	file:
sqlite3_value_text16	./sqlite3/sqlite3.c	/^#define sqlite3_value_text16 /;"	d	file:
sqlite3_value_text16	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16be	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_text16be /;"	d
sqlite3_value_text16be	./sqlite3/sqlite3.c	/^# define sqlite3_value_text16be /;"	d	file:
sqlite3_value_text16be	./sqlite3/sqlite3.c	/^#define sqlite3_value_text16be /;"	d	file:
sqlite3_value_text16be	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_text16le /;"	d
sqlite3_value_text16le	./sqlite3/sqlite3.c	/^# define sqlite3_value_text16le /;"	d	file:
sqlite3_value_text16le	./sqlite3/sqlite3.c	/^#define sqlite3_value_text16le /;"	d	file:
sqlite3_value_text16le	./sqlite3/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_type	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_value_type /;"	d
sqlite3_value_type	./sqlite3/sqlite3.c	/^#define sqlite3_value_type /;"	d	file:
sqlite3_value_type	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_version	./sqlite3/include/sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_version	./sqlite3/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	./sqlite3/include/sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs	./sqlite3/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	./sqlite3/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_vfs_find /;"	d
sqlite3_vfs_find	./sqlite3/sqlite3.c	/^#define sqlite3_vfs_find /;"	d	file:
sqlite3_vfs_find	./sqlite3/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_register	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_vfs_register /;"	d
sqlite3_vfs_register	./sqlite3/sqlite3.c	/^#define sqlite3_vfs_register /;"	d	file:
sqlite3_vfs_register	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_unregister	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_vfs_unregister /;"	d
sqlite3_vfs_unregister	./sqlite3/sqlite3.c	/^#define sqlite3_vfs_unregister /;"	d	file:
sqlite3_vfs_unregister	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vmprintf	./sqlite3/include/sqlite3ext.h	/^#define sqlite3_vmprintf /;"	d
sqlite3_vmprintf	./sqlite3/sqlite3.c	/^#define sqlite3_vmprintf /;"	d	file:
sqlite3_vmprintf	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vsnprintf	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	./sqlite3/include/sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab	./sqlite3/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	./sqlite3/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_cursor	./sqlite3/include/sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	./sqlite3/include/sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_vtab_cursor	./sqlite3/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	./sqlite3/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_wal_autocheckpoint	./sqlite3/sqlite3.c	/^#define sqlite3_wal_autocheckpoint /;"	d	file:
sqlite3_wal_autocheckpoint	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_checkpoint	./sqlite3/sqlite3.c	/^#define sqlite3_wal_checkpoint /;"	d	file:
sqlite3_wal_checkpoint	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_hook	./sqlite3/sqlite3.c	/^#define sqlite3_wal_hook /;"	d	file:
sqlite3_wal_hook	./sqlite3/sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_win32_mbcs_to_utf8	./sqlite3/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_xferopt_count	./sqlite3/sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	./sqlite3/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	./sqlite3/sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	./sqlite3/sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	./sqlite3/sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	./sqlite3/sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	./sqlite3/sqlite3.c	/^#define sqliteHashData(/;"	d	file:
sqliteHashFirst	./sqlite3/sqlite3.c	/^#define sqliteHashFirst(/;"	d	file:
sqliteHashNext	./sqlite3/sqlite3.c	/^#define sqliteHashNext(/;"	d	file:
sqliteProcessJoin	./sqlite3/sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	./sqlite3/sqlite3.c	/^# define sqliteViewResetAll(/;"	d	file:
sqliteViewResetAll	./sqlite3/sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqlite_int64	./sqlite3/include/sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	./sqlite3/include/sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	./sqlite3/include/sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_int64	./sqlite3/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	./sqlite3/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	./sqlite3/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	./sqlite3/include/sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	./sqlite3/include/sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	./sqlite3/include/sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
sqlite_uint64	./sqlite3/sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	./sqlite3/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	./sqlite3/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
star_oh	./sqlite3/sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startDiskNumber	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	startDiskNumber;$/;"	m	struct:ZIP_CentralDirectoryHeader
startEndFlag	./sqlite3/sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	./sqlite3/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
startingDisk	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	startingDisk;$/;"	m	struct:ZIP_FileNode
state	./sections/include/IMG3_FileSection.h	/^  uint32_t  state;$/;"	m	struct:KBAG_Struct
stateno	./sqlite3/sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	./sqlite3/include/sqlite3ext.h	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines
status	./sqlite3/sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	./sqlite3/sqlite3.c	/^static int stem($/;"	f	file:
step	./sqlite3/include/sqlite3ext.h	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
step	./sqlite3/sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	./sqlite3/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_status	./sqlite3/sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
strHash	./sqlite3/sqlite3.c	/^static unsigned int strHash(const char *z, int nKey){$/;"	f	file:
strftimeFunc	./sqlite3/sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strnicmp	./sqlite3/sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	./sqlite3/sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	./sqlite3/sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	./sqlite3/sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	./sqlite3/sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	./sqlite3/sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	./sqlite3/sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	./sqlite3/sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	./sqlite3/sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	./sqlite3/sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	./sqlite3/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	./sqlite3/sqlite3.c	/^# define swapMixedEndianFloat(/;"	d	file:
switchLockProxyPath	./sqlite3/sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	./sqlite3/sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncJournal	./sqlite3/sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	./sqlite3/sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	./sqlite3/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	./sqlite3/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szChunk	./sqlite3/sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	./sqlite3/sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szExtra	./sqlite3/sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szLookaside	./sqlite3/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMaster	./sqlite3/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szOsFile	./sqlite3/include/sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
szOsFile	./sqlite3/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPage	./sqlite3/sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	./sqlite3/sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	./sqlite3/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	./sqlite3/sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	./sqlite3/sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szRegion	./sqlite3/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	./sqlite3/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szScratch	./sqlite3/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	./sqlite3/sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
tabFlags	./sqlite3/sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
table	./sqlite3/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	./sqlite3/sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	./sqlite3/sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	./sqlite3/include/sqlite3ext.h	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);$/;"	m	struct:sqlite3_api_routines
table_column_metadata	./sqlite3/sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
tag	./html/include/IMG3_HtmlParser.h	/^	IMG3_HtmlTag	tag;$/;"	m	struct:HtmlTagNode
tag	./html/include/IMG3_HtmlTag.h	/^	char 						*tag;$/;"	m	class:IMG3_HtmlTag
tagAddress	./html/include/IMG3_HtmlTag.h	/^	char 						*tagAddress;$/;"	m	class:IMG3_HtmlTag
tagFilters	./html/include/IMG3_HtmlParser.h	/^	list<char *> tagFilters;$/;"	m	class:IMG3_HtmlParser
target	./sqlite3/sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	./sqlite3/sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	./sqlite3/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tempFile	./sqlite3/sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary file *\/$/;"	m	struct:Pager	file:
tempReg	./sqlite3/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	./sqlite3/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
termCanDriveIndex	./sqlite3/sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	./sqlite3/sqlite3.c	/^static void testFunc($/;"	f	file:
testRtreeCell	./sqlite3/sqlite3.c	/^static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeEntry	./sqlite3/sqlite3.c	/^static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor, int *pbEof){$/;"	f	file:
testRtreeGeom	./sqlite3/sqlite3.c	/^static int testRtreeGeom($/;"	f	file:
test_control	./sqlite3/include/sqlite3ext.h	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines
test_control	./sqlite3/sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
testcase	./sqlite3/sqlite3.c	/^# define testcase(/;"	d	file:
text_buf	./compression/include/IMG3_LzssInterface.h	/^    uint8_t text_buf[IMG3_LZSSINTERFACE_N + IMG3_LZSSINTERFACE_F - 1];$/;"	m	struct:encode_state
thread_cleanup	./sqlite3/include/sqlite3ext.h	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines
thread_cleanup	./sqlite3/sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	./sqlite3/sqlite3.c	/^#define threadid /;"	d	file:
timeFunc	./sqlite3/sqlite3.c	/^static void timeFunc($/;"	f	file:
tkCREATE	./sqlite3/sqlite3.c	/^#define tkCREATE /;"	d	file:
tkEND	./sqlite3/sqlite3.c	/^#define tkEND /;"	d	file:
tkEXPLAIN	./sqlite3/sqlite3.c	/^#define tkEXPLAIN /;"	d	file:
tkOTHER	./sqlite3/sqlite3.c	/^#define tkOTHER /;"	d	file:
tkSEMI	./sqlite3/sqlite3.c	/^#define tkSEMI /;"	d	file:
tkTEMP	./sqlite3/sqlite3.c	/^#define tkTEMP /;"	d	file:
tkTRIGGER	./sqlite3/sqlite3.c	/^#define tkTRIGGER /;"	d	file:
tkWS	./sqlite3/sqlite3.c	/^#define tkWS /;"	d	file:
tmask	./sqlite3/sqlite3.c	/^ #undef tmask$/;"	d	file:
tnum	./sqlite3/sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
tnum	./sqlite3/sqlite3.c	/^  int tnum;        \/* Page containing root of this index in database file *\/$/;"	m	struct:Index	file:
token	./sqlite3/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	./sqlite3/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tooBig	./sqlite3/sqlite3.c	/^  u8   tooBig;         \/* Becomes true if string size exceeds limits *\/$/;"	m	struct:StrAccum	file:
totalAlloc	./sqlite3/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	./sqlite3/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	./sqlite3/sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:CERT_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:DATA_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:IMG3_Generic_Header
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:IMG3_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:KBAG_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:SEPO_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:SHSH_Struct
totalLength	./sections/include/IMG3_FileSection.h	/^  uint32_t  totalLength;$/;"	m	struct:TYPE_Struct
total_changes	./sqlite3/include/sqlite3ext.h	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines
total_changes	./sqlite3/sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	./sqlite3/sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	./sqlite3/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	./sqlite3/include/sqlite3ext.h	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines
trace	./sqlite3/sqlite3.c	/^  FILE *trace;            \/* Write an execution trace here, if not NULL *\/$/;"	m	struct:Vdbe	file:
trace	./sqlite3/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	./sqlite3/sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
transCntrChng	./sqlite3/sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	./sqlite3/sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	./sqlite3/sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	./sqlite3/include/sqlite3ext.h	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines
transfer_bindings	./sqlite3/sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
trigHash	./sqlite3/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	./sqlite3/sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	./sqlite3/sqlite3.c	/^static void trimFunc($/;"	f	file:
type	./html/include/IMG3_HtmlTag.h	/^	TagType						type;$/;"	m	class:IMG3_HtmlTag
type	./sections/include/IMG3_FileSection.h	/^	IMG3_SectionType	type;$/;"	m	class:IMG3_FileSection
type	./sqlite3/sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	./sqlite3/sqlite3.c	/^  u8  type;           \/* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc *\/$/;"	m	struct:Mem	file:
type	./sqlite3/sqlite3.c	/^  u8 type;              \/* One of the SQLITE_COLL_... values below *\/$/;"	m	struct:CollSeq	file:
type	./sqlite3/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeofFunc	./sqlite3/sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	./sqlite3/sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon16	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:IndexSample	typeref:union:IndexSample::__anon3	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::__anon11	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon13	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon10	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon7	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:WherePlan	typeref:union:WherePlan::__anon6	file:
u	./sqlite3/sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon17	file:
u1	./sqlite3/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:
u16	./sqlite3/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u32	./sqlite3/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	./sqlite3/sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	./sqlite3/sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	./sqlite3/sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	./sqlite3/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	./sqlite3/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	./sqlite3/sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	./sqlite3/sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
ucUtf8	./sqlite3/sqlite3.c	/^static UconvObject ucUtf8 = NULL; \/* convert between UTF-8 and UCS-2 *\/$/;"	v	file:
uclCp	./sqlite3/sqlite3.c	/^static UconvObject uclCp = NULL;  \/* convert between local codepage and UCS-2 *\/$/;"	v	file:
unLockFlag	./sqlite3/sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
uncompressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	uncompressedSize;$/;"	m	struct:ZIP_CentralDirectoryHeader
uncompressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	uncompressedSize;$/;"	m	struct:ZIP_FileNode
uncompressedSize	./compression/include/IMG3_ZipInterface.h	/^	uint32_t	uncompressedSize;$/;"	m	struct:ZIP_LocalHeader
unicodeToMbcs	./sqlite3/sqlite3.c	/^static char *unicodeToMbcs(const WCHAR *zWideFilename){$/;"	f	file:
unicodeToUtf8	./sqlite3/sqlite3.c	/^static char *unicodeToUtf8(const WCHAR *zWideFilename){$/;"	f	file:
unixAccess	./sqlite3/sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	./sqlite3/sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	./sqlite3/sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	./sqlite3/sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	./sqlite3/sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	./sqlite3/sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	./sqlite3/sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *NotUsed){$/;"	f	file:
unixDlClose	./sqlite3/sqlite3.c	/^  #define unixDlClose /;"	d	file:
unixDlClose	./sqlite3/sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlError	./sqlite3/sqlite3.c	/^  #define unixDlError /;"	d	file:
unixDlError	./sqlite3/sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlOpen	./sqlite3/sqlite3.c	/^  #define unixDlOpen /;"	d	file:
unixDlOpen	./sqlite3/sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlSym	./sqlite3/sqlite3.c	/^  #define unixDlSym /;"	d	file:
unixDlSym	./sqlite3/sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixEnterMutex	./sqlite3/sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFile	./sqlite3/sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	./sqlite3/sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	./sqlite3/sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	./sqlite3/sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileSize	./sqlite3/sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	./sqlite3/sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	./sqlite3/sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetTempname	./sqlite3/sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixInodeInfo	./sqlite3/sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	./sqlite3/sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	./sqlite3/sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	./sqlite3/sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixMutexHeld	./sqlite3/sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixOpen	./sqlite3/sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	./sqlite3/sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	./sqlite3/sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	./sqlite3/sqlite3.c	/^static int unixRead($/;"	f	file:
unixSectorSize	./sqlite3/sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixShm	./sqlite3/sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	./sqlite3/sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	./sqlite3/sqlite3.c	/^# define unixShmBarrier /;"	d	file:
unixShmBarrier	./sqlite3/sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmLock	./sqlite3/sqlite3.c	/^# define unixShmLock /;"	d	file:
unixShmLock	./sqlite3/sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmMap	./sqlite3/sqlite3.c	/^# define unixShmMap /;"	d	file:
unixShmMap	./sqlite3/sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmNode	./sqlite3/sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	./sqlite3/sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	./sqlite3/sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmSystemLock	./sqlite3/sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	./sqlite3/sqlite3.c	/^# define unixShmUnmap /;"	d	file:
unixShmUnmap	./sqlite3/sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixSleep	./sqlite3/sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	./sqlite3/sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	./sqlite3/sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	./sqlite3/sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnlock	./sqlite3/sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixWrite	./sqlite3/sqlite3.c	/^static int unixWrite($/;"	f	file:
unknown1	./sections/include/IMG3_FileSection.h	/^  uint32_t  unknown1;$/;"	m	struct:SEPO_Struct
unknown1	./sections/include/IMG3_FileSection.h	/^  uint32_t  unknown1;$/;"	m	struct:TYPE_Struct
unknown2	./sections/include/IMG3_FileSection.h	/^  uint32_t  unknown2;$/;"	m	struct:SEPO_Struct
unknown2	./sections/include/IMG3_FileSection.h	/^  uint32_t  unknown2;$/;"	m	struct:TYPE_Struct
unknown3	./sections/include/IMG3_FileSection.h	/^  uint32_t  unknown3;$/;"	m	struct:TYPE_Struct
unlikely	./sqlite3/sqlite3.c	/^# define unlikely(/;"	d	file:
unlockBtreeIfUnused	./sqlite3/sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	./sqlite3/sqlite3.c	/^static void unlockBtreeMutex(Btree *p){$/;"	f	file:
unlockReadLock	./sqlite3/sqlite3.c	/^static int unlockReadLock( os2File *id ){$/;"	f	file:
unlockReadLock	./sqlite3/sqlite3.c	/^static int unlockReadLock(winFile *pFile){$/;"	f	file:
unlock_notify	./sqlite3/sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
untestedTerms	./sqlite3/sqlite3.c	/^  u8 untestedTerms;    \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	./sqlite3/sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	./sqlite3/sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	./sqlite3/sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	./sqlite3/sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	./sqlite3/sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	./sqlite3/include/sqlite3ext.h	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);$/;"	m	struct:sqlite3_api_routines
update_hook	./sqlite3/sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	./sqlite3/sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
usable	./sqlite3/include/sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
usable	./sqlite3/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	./sqlite3/sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	./sqlite3/sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	./sqlite3/sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	./sqlite3/sqlite3.c	/^  Bool useRandomRowid;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	./sqlite3/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
used	./sqlite3/sqlite3.c	/^  Bitmask used;      \/* Bitmask of cursors used by this plan *\/$/;"	m	struct:WhereCost	file:
usedAsColumnCache	./sqlite3/sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	./sqlite3/include/sqlite3ext.h	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines
user_data	./sqlite3/sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	./sqlite3/sqlite3.c	/^  u8 usesStmtJournal;     \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
utf8ToMbcs	./sqlite3/sqlite3.c	/^static char *utf8ToMbcs(const char *zFilename){$/;"	f	file:
utf8ToUnicode	./sqlite3/sqlite3.c	/^static WCHAR *utf8ToUnicode(const char *zFilename){$/;"	f	file:
v	./sqlite3/sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	./sqlite3/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	./sqlite3/sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
vacuumFinalize	./sqlite3/sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
validHMS	./sqlite3/sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	./sqlite3/sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validNKey	./sqlite3/sqlite3.c	/^  u8 validNKey;             \/* True if info.nKey is valid *\/$/;"	m	struct:BtCursor	file:
validTZ	./sqlite3/sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	./sqlite3/sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	./sqlite3/sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon18::__anon19	file:
valueFromExpr	./sqlite3/sqlite3.c	/^static int valueFromExpr($/;"	f	file:
value_blob	./sqlite3/include/sqlite3ext.h	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_blob	./sqlite3/sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	./sqlite3/include/sqlite3ext.h	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes	./sqlite3/sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	./sqlite3/include/sqlite3ext.h	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_bytes16	./sqlite3/sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	./sqlite3/include/sqlite3ext.h	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_double	./sqlite3/sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	./sqlite3/include/sqlite3ext.h	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int	./sqlite3/sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	./sqlite3/include/sqlite3ext.h	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_int64	./sqlite3/sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	./sqlite3/include/sqlite3ext.h	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_numeric_type	./sqlite3/sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	./sqlite3/include/sqlite3ext.h	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text	./sqlite3/sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	./sqlite3/include/sqlite3ext.h	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16	./sqlite3/sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	./sqlite3/include/sqlite3ext.h	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16be	./sqlite3/sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	./sqlite3/include/sqlite3ext.h	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_text16le	./sqlite3/sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	./sqlite3/include/sqlite3ext.h	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines
value_type	./sqlite3/sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeCommit	./sqlite3/sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeExecCnt	./sqlite3/sqlite3.c	/^  int vdbeExecCnt;              \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
vdbeFreeOpArray	./sqlite3/sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeSafety	./sqlite3/sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	./sqlite3/sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeUnbind	./sqlite3/sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
versionFunc	./sqlite3/sqlite3.c	/^static void versionFunc($/;"	f	file:
versionMade	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	versionMade;$/;"	m	struct:ZIP_CentralDirectoryHeader
versionNeeded	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	versionNeeded;$/;"	m	struct:ZIP_CentralDirectoryHeader
versionNeeded	./compression/include/IMG3_ZipInterface.h	/^	uint16_t	versionNeeded;$/;"	m	struct:ZIP_LocalHeader
vfsFlags	./sqlite3/sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	./sqlite3/sqlite3.c	/^#define vfsList /;"	d	file:
vfsList	./sqlite3/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsUnlink	./sqlite3/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	./sqlite3/include/sqlite3ext.h	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines
vfs_find	./sqlite3/sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	./sqlite3/include/sqlite3ext.h	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines
vfs_register	./sqlite3/sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	./sqlite3/include/sqlite3ext.h	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines
vfs_unregister	./sqlite3/sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
vmask	./sqlite3/sqlite3.c	/^  Bitmask vmask;           \/* Bitmask identifying virtual table cursors *\/$/;"	m	struct:WhereClause	file:
vmprintf	./sqlite3/include/sqlite3ext.h	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines
vmprintf	./sqlite3/sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtabBestIndex	./sqlite3/sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	./sqlite3/sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	./sqlite3/sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vxworksFileId	./sqlite3/sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	./sqlite3/sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	./sqlite3/sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	./sqlite3/sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	./sqlite3/sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walCheckpoint	./sqlite3/sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	./sqlite3/sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	./sqlite3/sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	./sqlite3/sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	./sqlite3/sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	./sqlite3/sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	./sqlite3/sqlite3.c	/^#define walFrameOffset(/;"	d	file:
walFramePage	./sqlite3/sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	./sqlite3/sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	./sqlite3/sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	./sqlite3/sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	./sqlite3/sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	./sqlite3/sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	./sqlite3/sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	./sqlite3/sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	./sqlite3/sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	./sqlite3/sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	./sqlite3/sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	./sqlite3/sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	./sqlite3/sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	./sqlite3/sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	./sqlite3/sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLockExclusive	./sqlite3/sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	./sqlite3/sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	./sqlite3/sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	./sqlite3/sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	./sqlite3/sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	./sqlite3/sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walRestartLog	./sqlite3/sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	./sqlite3/sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walTryBeginRead	./sqlite3/sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	./sqlite3/sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	./sqlite3/sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
wal_autocheckpoint	./sqlite3/sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	./sqlite3/sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	./sqlite3/sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
wantToLock	./sqlite3/sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	./sqlite3/sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	./sqlite3/sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	./sqlite3/sqlite3.c	/^  u16 wctrlFlags;      \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	./sqlite3/sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	./sqlite3/sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	./sqlite3/sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	./sqlite3/sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereForeignKeys	./sqlite3/sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInfoFree	./sqlite3/sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereOrInfoDelete	./sqlite3/sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrName	./sqlite3/sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
whereRangeRegion	./sqlite3/sqlite3.c	/^static int whereRangeRegion($/;"	f	file:
whereRangeScanEst	./sqlite3/sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereSplit	./sqlite3/sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){$/;"	f	file:
whereTempTriggers	./sqlite3/sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
winAccess	./sqlite3/sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	./sqlite3/sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	./sqlite3/sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winCurrentTime	./sqlite3/sqlite3.c	/^int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f
winCurrentTimeInt64	./sqlite3/sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	./sqlite3/sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	./sqlite3/sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	./sqlite3/sqlite3.c	/^  #define winDlClose /;"	d	file:
winDlClose	./sqlite3/sqlite3.c	/^void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
winDlError	./sqlite3/sqlite3.c	/^  #define winDlError /;"	d	file:
winDlError	./sqlite3/sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlOpen	./sqlite3/sqlite3.c	/^  #define winDlOpen /;"	d	file:
winDlOpen	./sqlite3/sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlSym	./sqlite3/sqlite3.c	/^  #define winDlSym /;"	d	file:
winDlSym	./sqlite3/sqlite3.c	/^void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){$/;"	f
winFile	./sqlite3/sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	./sqlite3/sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	./sqlite3/sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	./sqlite3/sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	./sqlite3/sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetLastError	./sqlite3/sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winIoMethod	./sqlite3/sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winLock	./sqlite3/sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winMutexAlloc	./sqlite3/sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	./sqlite3/sqlite3.c	/^static int winMutexEnd(void){ $/;"	f	file:
winMutexEnter	./sqlite3/sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	./sqlite3/sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	./sqlite3/sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	./sqlite3/sqlite3.c	/^static int winMutexInit(void){ $/;"	f	file:
winMutexLeave	./sqlite3/sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	./sqlite3/sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	./sqlite3/sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	./sqlite3/sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	./sqlite3/sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_lock	./sqlite3/sqlite3.c	/^static long winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	./sqlite3/sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[6] = {$/;"	v	file:
winOpen	./sqlite3/sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	./sqlite3/sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	./sqlite3/sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	./sqlite3/sqlite3.c	/^static int winRead($/;"	f	file:
winSectorSize	./sqlite3/sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winShm	./sqlite3/sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	./sqlite3/sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	./sqlite3/sqlite3.c	/^# define winShmBarrier /;"	d	file:
winShmBarrier	./sqlite3/sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmEnterMutex	./sqlite3/sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	./sqlite3/sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	./sqlite3/sqlite3.c	/^# define winShmLock /;"	d	file:
winShmLock	./sqlite3/sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmMap	./sqlite3/sqlite3.c	/^# define winShmMap /;"	d	file:
winShmMap	./sqlite3/sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMutexHeld	./sqlite3/sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	./sqlite3/sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	./sqlite3/sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	./sqlite3/sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	./sqlite3/sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	./sqlite3/sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	./sqlite3/sqlite3.c	/^# define winShmUnmap /;"	d	file:
winShmUnmap	./sqlite3/sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winSleep	./sqlite3/sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	./sqlite3/sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	./sqlite3/sqlite3.c	/^SYSTEM_INFO winSysInfo;$/;"	v
winTruncate	./sqlite3/sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnlock	./sqlite3/sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winWrite	./sqlite3/sqlite3.c	/^static int winWrite($/;"	f	file:
winceCreateLock	./sqlite3/sqlite3.c	/^static BOOL winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	./sqlite3/sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	./sqlite3/sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	./sqlite3/sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	./sqlite3/sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceLockFileEx	./sqlite3/sqlite3.c	/^static BOOL winceLockFileEx($/;"	f	file:
winceMutexAcquire	./sqlite3/sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	./sqlite3/sqlite3.c	/^#define winceMutexRelease(/;"	d	file:
winceUnlockFile	./sqlite3/sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
wrFlag	./sqlite3/sqlite3.c	/^  u8 wrFlag;                \/* True if writable *\/$/;"	m	struct:BtCursor	file:
write32bits	./sqlite3/sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	./sqlite3/sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	./sqlite3/sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	./sqlite3/sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	./sqlite3/sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	./sqlite3/sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	./sqlite3/sqlite3.c	/^  u32 writeMask;       \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	./sqlite3/sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writeVdbeCnt	./sqlite3/sqlite3.c	/^  int writeVdbeCnt;             \/* Number of active VDBEs that are writing *\/$/;"	m	struct:sqlite3	file:
wsFlags	./sqlite3/sqlite3.c	/^  u32 wsFlags;                   \/* WHERE_* flags that describe the strategy *\/$/;"	m	struct:WherePlan	file:
wsdAutoext	./sqlite3/sqlite3.c	/^# define wsdAutoext /;"	d	file:
wsdAutoextInit	./sqlite3/sqlite3.c	/^# define wsdAutoextInit /;"	d	file:
wsdAutoextInit	./sqlite3/sqlite3.c	/^# define wsdAutoextInit$/;"	d	file:
wsdHooks	./sqlite3/sqlite3.c	/^# define wsdHooks /;"	d	file:
wsdHooksInit	./sqlite3/sqlite3.c	/^# define wsdHooksInit /;"	d	file:
wsdHooksInit	./sqlite3/sqlite3.c	/^# define wsdHooksInit$/;"	d	file:
wsdPrng	./sqlite3/sqlite3.c	/^# define wsdPrng /;"	d	file:
wsdStat	./sqlite3/sqlite3.c	/^# define wsdStat /;"	d	file:
wsdStatInit	./sqlite3/sqlite3.c	/^# define wsdStatInit /;"	d	file:
wsdStatInit	./sqlite3/sqlite3.c	/^# define wsdStatInit$/;"	d	file:
wtFlags	./sqlite3/sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	./sqlite3/sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon5	file:
xAccess	./sqlite3/include/sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xAccess	./sqlite3/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAuth	./sqlite3/sqlite3.c	/^  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);$/;"	m	struct:sqlite3	file:
xBacktrace	./sqlite3/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon12	file:
xBegin	./sqlite3/include/sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBegin	./sqlite3/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	./sqlite3/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	./sqlite3/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	./sqlite3/include/sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xBestIndex	./sqlite3/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	./sqlite3/sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	./sqlite3/include/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	./sqlite3/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCheckReservedLock	./sqlite3/include/sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xCheckReservedLock	./sqlite3/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	./sqlite3/include/sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	./sqlite3/include/sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xClose	./sqlite3/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	./sqlite3/sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	./sqlite3/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	./sqlite3/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	./sqlite3/sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	./sqlite3/sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	./sqlite3/sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	./sqlite3/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	./sqlite3/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	./sqlite3/include/sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xColumn	./sqlite3/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xCommit	./sqlite3/include/sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xCommit	./sqlite3/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	./sqlite3/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	./sqlite3/include/sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xConnect	./sqlite3/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	./sqlite3/include/sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	./sqlite3/include/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	./sqlite3/sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	./sqlite3/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	./sqlite3/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCurrentTime	./sqlite3/include/sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTime	./sqlite3/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	./sqlite3/include/sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	./sqlite3/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	./sqlite3/sqlite3.c	/^  void (*xDel)(void *);  \/* If not null, call this function to delete Mem.z *\/$/;"	m	struct:Mem	file:
xDel	./sqlite3/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDelUser	./sqlite3/include/sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelUser	./sqlite3/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelete	./sqlite3/include/sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDelete	./sqlite3/sqlite3.c	/^    void (*xDelete)(void *);      \/* Destructor for the aux data *\/$/;"	m	struct:VdbeFunc::AuxData	file:
xDelete	./sqlite3/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDestroy	./sqlite3/include/sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	./sqlite3/include/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	./sqlite3/sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	./sqlite3/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	./sqlite3/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	./sqlite3/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	./sqlite3/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDeviceCharacteristics	./sqlite3/include/sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDeviceCharacteristics	./sqlite3/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	./sqlite3/include/sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDisconnect	./sqlite3/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	./sqlite3/include/sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlClose	./sqlite3/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	./sqlite3/include/sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlError	./sqlite3/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	./sqlite3/include/sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xDlOpen	./sqlite3/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	./sqlite3/include/sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xEof	./sqlite3/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	./sqlite3/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	./sqlite3/include/sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFetch	./sqlite3/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	./sqlite3/include/sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileControl	./sqlite3/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	./sqlite3/include/sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFileSize	./sqlite3/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	./sqlite3/include/sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFilter	./sqlite3/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	./sqlite3/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	./sqlite3/include/sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFindFunction	./sqlite3/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFree	./sqlite3/include/sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFree	./sqlite3/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	./sqlite3/sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	./sqlite3/sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	./sqlite3/include/sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xFullPathname	./sqlite3/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	./sqlite3/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	./sqlite3/sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	./sqlite3/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeConstraint	file:
xGeom	./sqlite3/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeGeomCallback	file:
xGeom	./sqlite3/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry *, int, double *, int *);$/;"	m	struct:RtreeMatchArg	file:
xGetLastError	./sqlite3/include/sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetLastError	./sqlite3/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xInit	./sqlite3/include/sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	./sqlite3/include/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	./sqlite3/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	./sqlite3/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xLock	./sqlite3/include/sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xLock	./sqlite3/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	./sqlite3/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	./sqlite3/include/sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMalloc	./sqlite3/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	./sqlite3/include/sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexAlloc	./sqlite3/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	./sqlite3/include/sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	./sqlite3/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	./sqlite3/include/sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	./sqlite3/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	./sqlite3/include/sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	./sqlite3/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	./sqlite3/include/sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	./sqlite3/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	./sqlite3/include/sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	./sqlite3/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	./sqlite3/include/sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	./sqlite3/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	./sqlite3/include/sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	./sqlite3/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	./sqlite3/include/sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	./sqlite3/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNext	./sqlite3/include/sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNext	./sqlite3/sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	./sqlite3/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xOpen	./sqlite3/include/sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	./sqlite3/include/sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xOpen	./sqlite3/sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	./sqlite3/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	./sqlite3/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	./sqlite3/include/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	./sqlite3/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xProfile	./sqlite3/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	./sqlite3/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xRandomness	./sqlite3/include/sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRandomness	./sqlite3/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	./sqlite3/include/sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRead	./sqlite3/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	./sqlite3/include/sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xRealloc	./sqlite3/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	./sqlite3/sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	./sqlite3/include/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRekey	./sqlite3/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRename	./sqlite3/include/sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRename	./sqlite3/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	./sqlite3/include/sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollback	./sqlite3/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	./sqlite3/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRoundup	./sqlite3/include/sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRoundup	./sqlite3/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowid	./sqlite3/include/sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xRowid	./sqlite3/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xSectorSize	./sqlite3/include/sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSectorSize	./sqlite3/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	./sqlite3/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xShmBarrier	./sqlite3/include/sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmBarrier	./sqlite3/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	./sqlite3/include/sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmLock	./sqlite3/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	./sqlite3/include/sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmMap	./sqlite3/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	./sqlite3/include/sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	./sqlite3/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShutdown	./sqlite3/include/sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	./sqlite3/include/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	./sqlite3/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	./sqlite3/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xSize	./sqlite3/include/sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSize	./sqlite3/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	./sqlite3/include/sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xSleep	./sqlite3/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xStep	./sqlite3/sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	./sqlite3/sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	./sqlite3/include/sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	./sqlite3/include/sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xSync	./sqlite3/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	./sqlite3/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTrace	./sqlite3/sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	./sqlite3/include/sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	./sqlite3/include/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	./sqlite3/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	./sqlite3/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xUnlock	./sqlite3/include/sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnlock	./sqlite3/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	./sqlite3/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	./sqlite3/include/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUnpin	./sqlite3/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	./sqlite3/include/sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUpdate	./sqlite3/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	./sqlite3/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xWalCallback	./sqlite3/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	./sqlite3/include/sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xWrite	./sqlite3/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleCollation	./sqlite3/sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	./sqlite3/sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	./sqlite3/sqlite3.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	./sqlite3/include/sqlite3ext.h	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines
xthreadsafe	./sqlite3/sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	./sqlite3/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
ynVar	./sqlite3/sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	./sqlite3/sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	./sqlite3/sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon18	file:
yy118	./sqlite3/sqlite3.c	/^  ExprSpan yy118;$/;"	m	union:__anon18	file:
yy203	./sqlite3/sqlite3.c	/^  TriggerStep* yy203;$/;"	m	union:__anon18	file:
yy210	./sqlite3/sqlite3.c	/^  u8 yy210;$/;"	m	union:__anon18	file:
yy215	./sqlite3/sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	union:__anon18	typeref:struct:__anon18::__anon19	file:
yy259	./sqlite3/sqlite3.c	/^  SrcList* yy259;$/;"	m	union:__anon18	file:
yy292	./sqlite3/sqlite3.c	/^  struct LimitVal yy292;$/;"	m	union:__anon18	typeref:struct:__anon18::LimitVal	file:
yy314	./sqlite3/sqlite3.c	/^  Expr* yy314;$/;"	m	union:__anon18	file:
yy322	./sqlite3/sqlite3.c	/^  ExprList* yy322;$/;"	m	union:__anon18	file:
yy342	./sqlite3/sqlite3.c	/^  struct LikeOp yy342;$/;"	m	union:__anon18	typeref:struct:__anon18::LikeOp	file:
yy384	./sqlite3/sqlite3.c	/^  IdList* yy384;$/;"	m	union:__anon18	file:
yy387	./sqlite3/sqlite3.c	/^  Select* yy387;$/;"	m	union:__anon18	file:
yy4	./sqlite3/sqlite3.c	/^  int yy4;$/;"	m	union:__anon18	file:
yy90	./sqlite3/sqlite3.c	/^  struct TrigEvent yy90;$/;"	m	union:__anon18	typeref:struct:__anon18::TrigEvent	file:
yyFallback	./sqlite3/sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	./sqlite3/sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	./sqlite3/sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	./sqlite3/sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	./sqlite3/sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon20	file:
yyRuleName	./sqlite3/sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	./sqlite3/sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	./sqlite3/sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	./sqlite3/sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	./sqlite3/sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	./sqlite3/sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	./sqlite3/sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	./sqlite3/sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	./sqlite3/sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	./sqlite3/sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	./sqlite3/sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	./sqlite3/sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	./sqlite3/sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	./sqlite3/sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	./sqlite3/sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	./sqlite3/sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	./sqlite3/sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	./sqlite3/sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	./sqlite3/sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	./sqlite3/sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	./sqlite3/sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	./sqlite3/sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	./sqlite3/sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	./sqlite3/sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	./sqlite3/sqlite3.c	/^  int yyinit;$/;"	m	union:__anon18	file:
yystack	./sqlite3/sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	./sqlite3/sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	./sqlite3/sqlite3.c	/^# define yytestcase(/;"	d	file:
yytestcase	./sqlite3/sqlite3.c	/^#define yytestcase(/;"	d	file:
yyzerominor	./sqlite3/sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	./sqlite3/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:
z	./sqlite3/sqlite3.c	/^    char *z;        \/* Value if eType is SQLITE_TEXT or SQLITE_BLOB *\/$/;"	m	union:IndexSample::__anon3	file:
z	./sqlite3/sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	./sqlite3/sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	./sqlite3/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	./sqlite3/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	./sqlite3/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	./sqlite3/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	./sqlite3/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zBase	./sqlite3/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBuf	./sqlite3/sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	./sqlite3/sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	./sqlite3/sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	./sqlite3/sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	./sqlite3/sqlite3.c	/^    char *zCol;        \/* Name of column in zTo.  If 0 use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	./sqlite3/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColAff	./sqlite3/sqlite3.c	/^  char *zColAff;   \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColl	./sqlite3/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zComment	./sqlite3/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zData	./sqlite3/sqlite3.c	/^  u8 *zData;$/;"	m	struct:RtreeNode	file:
zDatabase	./sqlite3/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	./sqlite3/sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	./sqlite3/sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	./sqlite3/sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	./sqlite3/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	./sqlite3/sqlite3.c	/^  WCHAR *zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	./sqlite3/sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	./sqlite3/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErrMsg	./sqlite3/include/sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zErrMsg	./sqlite3/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	./sqlite3/sqlite3.c	/^  char *zErrMsg;                \/* Most recent error message (UTF-8 encoded) *\/$/;"	m	struct:sqlite3	file:
zErrMsg	./sqlite3/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	./sqlite3/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	./sqlite3/sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg16	./sqlite3/sqlite3.c	/^  char *zErrMsg16;              \/* Most recent error message (UTF-16 encoded) *\/$/;"	m	struct:sqlite3	file:
zFilename	./sqlite3/sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	./sqlite3/sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	./sqlite3/sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zIndex	./sqlite3/sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	./sqlite3/sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	./sqlite3/sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	./sqlite3/sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLocale	./sqlite3/sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	./sqlite3/sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	./sqlite3/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	./sqlite3/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	./sqlite3/sqlite3.c	/^  char *zMalloc;      \/* Dynamic buffer allocated by sqlite3_malloc() *\/$/;"	m	struct:Mem	file:
zMatchinfo	./sqlite3/sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	./sqlite3/include/sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
zName	./sqlite3/sqlite3.c	/^    char *zName;           \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	./sqlite3/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	./sqlite3/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	./sqlite3/sqlite3.c	/^  char *zName;     \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	./sqlite3/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	./sqlite3/sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	./sqlite3/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	./sqlite3/sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zPath	./sqlite3/sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	./sqlite3/sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPool	./sqlite3/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zSegmentsTbl	./sqlite3/sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSpan	./sqlite3/sqlite3.c	/^    char *zSpan;           \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	./sqlite3/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	./sqlite3/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zTail	./sqlite3/sqlite3.c	/^  const char *zTail;   \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	./sqlite3/sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	./sqlite3/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	./sqlite3/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	./sqlite3/sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	./sqlite3/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	./sqlite3/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon12	file:
zTo	./sqlite3/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	./sqlite3/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon4	file:
zToken	./sqlite3/sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zType	./sqlite3/sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	./sqlite3/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	./sqlite3/sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	./sqlite3/sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zeroJournalHdr	./sqlite3/sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	./sqlite3/sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	./sqlite3/sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
zeroed	./sqlite3/sqlite3.c	/^  Bool zeroed;          \/* True if zeroed out and ready for reuse *\/$/;"	m	struct:VdbeCursor	file:
~IMG3_FileInterface	./sections/IMG3_FileInterface.cpp	/^IMG3_FileInterface::~IMG3_FileInterface() {$/;"	f	class:IMG3_FileInterface
~IMG3_FileSection	./sections/IMG3_FileSection.cpp	/^IMG3_FileSection::~IMG3_FileSection() {$/;"	f	class:IMG3_FileSection
~IMG3_HtmlParser	./html/IMG3_HtmlParser.cpp	/^IMG3_HtmlParser::~IMG3_HtmlParser()$/;"	f	class:IMG3_HtmlParser
~IMG3_HtmlTag	./html/IMG3_HtmlTag.cpp	/^IMG3_HtmlTag::~IMG3_HtmlTag() {$/;"	f	class:IMG3_HtmlTag
~IMG3_LzssInterface	./compression/IMG3_LzssInterface.cpp	/^IMG3_LzssInterface::~IMG3_LzssInterface() {$/;"	f	class:IMG3_LzssInterface
~IMG3_OpensslInterface	./openssl/IMG3_OpensslInterface.cpp	/^IMG3_OpensslInterface::~IMG3_OpensslInterface() {$/;"	f	class:IMG3_OpensslInterface
~IMG3_Sqlite3	./sqlite3/IMG3_Sqlite3.cpp	/^IMG3_Sqlite3::~IMG3_Sqlite3()$/;"	f	class:IMG3_Sqlite3
~IMG3_ZipInterface	./compression/IMG3_ZipInterface.cpp	/^IMG3_ZipInterface::~IMG3_ZipInterface() {$/;"	f	class:IMG3_ZipInterface
